
lcd_nios_5.elf:     file format elf32-littlenios2
lcd_nios_5.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00012ff4 memsz 0x00013330 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010934  040001b4  040001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000009f4  04010ae8  04010ae8  00011ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b38  040114dc  040114dc  000124dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000033c  04013014  04013014  00014014  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00014014  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e10  00000000  00000000  00014040  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000018de  00000000  00000000  00014e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002a0f1  00000000  00000000  0001672e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008c3e  00000000  00000000  0004081f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000170eb  00000000  00000000  0004945d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001fec  00000000  00000000  00060548  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000251b  00000000  00000000  00062534  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000cf7e  00000000  00000000  00064a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000719d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000970  00000000  00000000  00071a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00075b42  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00075b45  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00075b48  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00075b49  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00075b4a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00075b4e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00075b52  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00075b56  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00075b5f  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00075b68  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000004  00000000  00000000  00075b71  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000010  00000000  00000000  00075b75  2**0
                  CONTENTS, READONLY
 29 .jdi          000045f9  00000000  00000000  00075b85  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007d2cc  00000000  00000000  0007a17e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
040001b4 l    d  .text	00000000 .text
04010ae8 l    d  .rodata	00000000 .rodata
040114dc l    d  .rwdata	00000000 .rwdata
04013014 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
040001e8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 AsciiLib.c
04010ae8 l     O .rodata	000005f0 AsciiLib
00000000 l    df *ABS*	00000000 LCD32.c
04013014 l     O .bss	00000001 LCD_Code
00000000 l    df *ABS*	00000000 game.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 touch.c
04013016 l     O .bss	00000004 screen.1908
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
04002d38 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04004540 l     F .text	00000058 std
0400464c l     F .text	00000008 __fp_lock
04004654 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
040114e8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
04006178 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
04006498 l     F .text	00000058 __sprint_r
0401131e l     O .rodata	00000010 blanks.3452
0401130e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
040085e4 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
04012fe0 l     O .rwdata	00000004 charset
04011350 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
04011498 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0400cccc l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
0400cf14 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400cf74 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400d074 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0400d194 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0400d2e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0400d3f0 l     F .text	000000dc alt_file_locked
0400d654 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0400d7d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04012ffc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0400daa0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04011ea4 l     O .rwdata	000000c8 epcs
04011f6c l     O .rwdata	00001060 jtag_uart
0400db84 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0400dc48 l     F .text	00000288 alt_epcs_flash_query
0400dc10 l     F .text	00000038 alt_flash_device_register
0400ded0 l     F .text	00000108 alt_epcs_flash_memcmp
0400e358 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0400e7a8 l     F .text	00000228 altera_avalon_jtag_uart_irq
0400e9d0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 epcs_commands.c
0400f3dc l     F .text	00000038 epcs_await_wip_released
0400f414 l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0400fcac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040103dc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
040108d0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
04010a84 l     F .text	00000040 alt_sim_halt
0400aa68 g     F .text	00000094 _mprec_log10
0400e258 g     F .text	00000090 alt_epcs_flash_get_info
0400ab54 g     F .text	00000088 __any_on
0400a2ec g     F .text	00000070 _isatty_r
04011470 g     O .rodata	00000028 __mprec_tinytens
0400d344 g     F .text	0000006c alt_main
04005f00 g     F .text	000000a0 _puts_r
040130c0 g     O .bss	00000100 alt_irq
0400a420 g     F .text	00000078 _lseek_r
04009db0 g     F .text	000000a0 __sflags
04003858 g     F .text	00000088 __eqdf2
04013350 g       *ABS*	00000000 __alt_heap_start
04005e88 g     F .text	00000044 printf
040062e0 g     F .text	00000068 __sseek
040045a8 g     F .text	000000a4 __sinit
0400a380 g     F .text	00000084 _setlocale_r
040046a8 g     F .text	00000068 __sfmoreglue
04000304 g     F .text	00000078 LCD_ReadData
0400d3d0 g     F .text	00000020 __malloc_unlock
040013d0 g     F .text	000000c8 GUI_Text
0400a57c g     F .text	000000e0 memmove
04001498 g     F .text	000000f0 saveCoordinatesToCSV
04004698 g     F .text	00000010 _cleanup
0400abdc g     F .text	000000bc _Balloc
0400ca28 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0400f2e4 g     F .text	000000f8 epcs_sector_erase
00000000 g     F .entry	00000000 __reset
04000bcc g     F .text	00000104 LCD_Clear
04005210 g     F .text	00000074 _fstat_r
04001884 g     F .text	00000030 TP_Init
04013020 g     O .bss	00000004 errno
04013040 g     O .bss	00000004 alt_argv
0401afcc g       *ABS*	00000000 _gp
0400d950 g     F .text	00000030 usleep
04011d24 g     O .rwdata	00000180 alt_fd_list
04000548 g     F .text	00000684 LCD_Initializtion
0400f5e8 g     F .text	00000064 epcs_write_status_register
0400fdd4 g     F .text	00000094 alt_find_dev
04005cd8 g     F .text	000000a0 memcpy
0400468c g     F .text	0000000c _cleanup_r
040039f0 g     F .text	000000f8 __floatsidf
040104a0 g     F .text	00000078 alt_io_redirect
0400cab0 g     F .text	00000088 __ltdf2
04010ae8 g       *ABS*	00000000 __DTOR_END__
04005fa0 g     F .text	00000014 puts
0400e3ec g     F .text	0000011c alt_epcs_flash_write_block
0400a9b8 g     F .text	000000b0 __ratio
040001ec g     F .text	00000060 GetASCIICode
0400ebe8 g     F .text	00000224 altera_avalon_jtag_uart_read
04001048 g     F .text	00000274 LCD_DrawLine
00000000  w      *UND*	00000000 malloc
04005ecc g     F .text	00000034 _printf_r
0400ce08 g     F .text	00000008 __udivsi3
0400d0d4 g     F .text	000000c0 isatty
04011380 g     O .rodata	000000c8 __mprec_tens
0400a35c g     F .text	00000008 __locale_charset
04002c94 g     F .text	000000a4 __fixunsdfsi
04013024 g     O .bss	00000004 __malloc_top_pad
04012fdc g     O .rwdata	00000004 __mb_cur_max
0400a364 g     F .text	0000000c _localeconv_r
0400b2d4 g     F .text	0000003c __i2b
04009e50 g     F .text	0000049c __sfvwrite_r
04006194 g     F .text	00000070 _sbrk_r
0400b650 g     F .text	00000078 _read_r
04011cf0 g     O .rwdata	0000000c __lc_ctype
04012ff4 g     O .rwdata	00000004 alt_max_fd
04003fec g     F .text	00000138 __unpack_d
040041ec g     F .text	00000110 _fclose_r
0400450c g     F .text	00000034 fflush
04013028 g     O .bss	00000004 __malloc_max_sbrked_mem
040031c8 g     F .text	00000074 __adddf3
0400e2e8 g     F .text	00000070 alt_epcs_flash_erase_block
0400a898 g     F .text	00000120 __b2d
0400c478 g     F .text	000005b0 __umoddi3
0400d1f4 g     F .text	000000f0 lseek
04012fd0 g     O .rwdata	00000004 _global_impure_ptr
0400f900 g     F .text	00000058 epcs_exit_4_bytes_mode
0400b6c8 g     F .text	000005f4 _realloc_r
04013350 g       *ABS*	00000000 __bss_end
040102e4 g     F .text	000000f8 alt_iic_isr_register
0401301a g     O .bss	00000004 display
040105b0 g     F .text	0000010c alt_tick
040018b4 g     F .text	00000030 DelayUS
0400be9c g     F .text	000005dc __udivdi3
04011448 g     O .rodata	00000028 __mprec_bigtens
0400b530 g     F .text	00000120 __s2b
0400cb38 g     F .text	00000194 __floatunsidf
0400a7b8 g     F .text	00000060 __mcmp
04001ba4 g     F .text	000002dc DrawCross
04004674 g     F .text	00000018 __fp_lock_all
0401029c g     F .text	00000048 alt_ic_irq_enabled
04000fe4 g     F .text	00000064 LCD_SetPoint
04010518 g     F .text	00000098 alt_alarm_stop
04013048 g     O .bss	00000004 alt_irq_active
040000ec g     F .exceptions	000000c8 alt_irq_handler
04011cfc g     O .rwdata	00000028 alt_dev_null
0400a684 g     F .text	00000070 __hi0bits
04003ae8 g     F .text	000000d8 __fixdfsi
04002868 g     F .text	000002e8 getDisplayPoint
04000cd0 g     F .text	00000128 LCD_show_test
04012fec g     O .rwdata	00000008 alt_dev_list
0400d980 g     F .text	00000120 write
0400cfa0 g     F .text	000000d4 fstat
04004910 g     F .text	0000002c fprintf
0400b410 g     F .text	00000120 __pow5mult
04013030 g     O .bss	00000004 __nlocale_changed
0400ce10 g     F .text	00000008 __umodsi3
04001a50 g     F .text	0000005c Read_Y
0400f7bc g     F .text	0000006c epcs_read_electronic_signature
04013350 g       *ABS*	00000000 end
040051ec g     F .text	00000024 fseek
0400e6e8 g     F .text	000000c0 altera_avalon_jtag_uart_init
04010ae4 g       *ABS*	00000000 __CTOR_LIST__
06000000 g       *ABS*	00000000 __alt_stack_pointer
04003c58 g     F .text	00000080 __clzsi2
0400ee0c g     F .text	00000240 altera_avalon_jtag_uart_write
04004598 g     F .text	00000004 __sfp_lock_acquire
0400a498 g     F .text	000000e4 memchr
040064f0 g     F .text	00001eac ___vfprintf_internal_r
04006278 g     F .text	00000060 _sprintf_r
04001aac g     F .text	0000005c TP_GetAdXY
040018e4 g     F .text	0000004c WR_CMD
04004a9c g     F .text	00000314 _free_r
0400041c g     F .text	0000012c LCD_SetCursor
040108d4 g     F .text	000001b0 __call_exitprocs
04013034 g     O .bss	00000004 __mlocale_changed
04012fd8 g     O .rwdata	00000004 __malloc_sbrk_base
040001b4 g     F .text	00000038 _start
0401304c g     O .bss	00000004 _alt_tick_rate
0400afa0 g     F .text	0000014c __lshift
0400f04c g     F .text	00000238 alt_avalon_spi_command
04013050 g     O .bss	00000004 _alt_nticks
0400d6b4 g     F .text	00000120 read
0400db34 g     F .text	00000050 alt_sys_init
04002b50 g     F .text	00000144 TouchPanel_Calibrate
04005e10 g     F .text	00000078 _open_r
0401079c g     F .text	00000134 __register_exitproc
0400b0ec g     F .text	000001e8 __multiply
0400ea80 g     F .text	00000074 altera_avalon_jtag_uart_close
04013054 g     O .bss	00000028 __malloc_current_mallinfo
0400ac98 g     F .text	0000017c __d2b
0400f284 g     F .text	00000060 epcs_read_status_register
0400e5a0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
04010058 g     F .text	000000b8 alt_get_fd
0400faac g     F .text	0000014c alt_busy_sleep
0400024c g     F .text	00000060 LCD_WriteIndex
04004124 g     F .text	000000c8 __fpcmp_parts_d
04008574 g     F .text	00000070 _close_r
0400f828 g     F .text	00000080 epcs_read_device_id
04010728 g     F .text	00000074 memcmp
0400e650 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
04013350 g       *ABS*	00000000 __alt_stack_base
0400e698 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
04008438 g     F .text	0000013c __swsetup_r
04003600 g     F .text	00000258 __divdf3
04004710 g     F .text	000000f0 __sfp
0400aafc g     F .text	00000058 __copybits
040118e8 g     O .rwdata	00000408 __malloc_av_
040045a4 g     F .text	00000004 __sinit_lock_release
0400323c g     F .text	000003c4 __muldf3
040063c4 g     F .text	00000060 __sread
0401307c g     O .bss	0000000c ScreenSample
0400fe68 g     F .text	00000120 alt_find_file
0400fbf8 g     F .text	000000b4 alt_dev_llist_insert
0400d3b0 g     F .text	00000020 __malloc_lock
0400493c g     F .text	00000034 _fprintf_r
0400d894 g     F .text	000000bc sbrk
04004310 g     F .text	000001fc _fflush_r
0400bde8 g     F .text	000000b4 _calloc_r
04013000 g     O .rwdata	00000008 alt_flash_dev_list
040016c8 g     F .text	0000005c DisplayNumber
040048f4 g     F .text	0000001c fopen
04013014 g       *ABS*	00000000 __bss_start
04005d78 g     F .text	00000098 memset
040017c0 g     F .text	000000c4 main
04013044 g     O .bss	00000004 alt_envp
0401302c g     O .bss	00000004 __malloc_max_total_mem
0400e5f8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
040062d8 g     F .text	00000008 __sclose
06000000 g       *ABS*	00000000 __alt_heap_limit
040042fc g     F .text	00000014 fclose
040131c0 g     O .bss	00000190 _atexit0
040087fc g     F .text	000015b4 _dtoa_r
04005598 g     F .text	00000740 _malloc_r
04012ff8 g     O .rwdata	00000004 alt_errno
0400534c g     F .text	000000b8 _fwalk
04013088 g     O .bss	00000038 matrix
040114dc g     O .rwdata	0000000c DisplaySample
0400cd48 g     F .text	00000060 __divsi3
04011194 g     O .rodata	00000014 __thenan_df
04004970 g     F .text	0000012c _malloc_trim_r
04010ae8 g       *ABS*	00000000 __CTOR_END__
0400dfd8 g     F .text	00000280 alt_epcs_flash_write
0400bd2c g     F .text	000000bc strcmp
04010ae8 g       *ABS*	00000000 __DTOR_LIST__
040038e0 g     F .text	00000088 __nedf2
0400db00 g     F .text	00000034 alt_irq_init
0400d834 g     F .text	00000060 alt_release_fd
04006204 g     F .text	00000074 sprintf
040111a8 g     O .rodata	00000100 __clz_tab
04013038 g     O .bss	00000004 _PathLocale
040106dc g     F .text	00000014 atexit
040083c0 g     F .text	00000078 _write_r
0400a404 g     F .text	0000001c setlocale
0400037c g     F .text	00000050 LCD_WriteReg
040012bc g     F .text	00000114 PutChar
04012fcc g     O .rwdata	00000004 _impure_ptr
0401303c g     O .bss	00000004 alt_argc
0400fd70 g     F .text	00000064 _do_dtors
04004db0 g     F .text	0000043c _fseek_r
04005fb4 g     F .text	000001c4 __srefill_r
04000020 g       .exceptions	00000000 alt_irq_entry
0400a818 g     F .text	00000080 __ulp
0400bcbc g     F .text	00000040 __isinfd
0400465c g     F .text	00000018 __fp_unlock_all
040002ac g     F .text	00000058 LCD_WriteData
04012fe4 g     O .rwdata	00000008 alt_fs_list
04001b08 g     F .text	0000009c TP_DrawPoint
0400a370 g     F .text	00000010 localeconv
0400f44c g     F .text	0000014c epcs_read_buffer
0400dbbc g     F .text	00000054 alt_epcs_flash_init
04010110 g     F .text	00000050 alt_ic_isr_register
040019f4 g     F .text	0000005c Read_X
04013014 g       *ABS*	00000000 _edata
04013350 g       *ABS*	00000000 _end
0400ff88 g     F .text	0000007c alt_flash_open_dev
0400eaf4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
04002244 g     F .text	00000624 setCalibrationMatrix
040101fc g     F .text	000000a0 alt_ic_irq_disable
0400f8a8 g     F .text	00000058 epcs_enter_4_bytes_mode
04006348 g     F .text	0000007c __swrite
04012fd4 g     O .rwdata	00000004 __malloc_trim_threshold
040106bc g     F .text	00000020 altera_nios2_qsys_irq_init
040110d8 g     O .rodata	00000010 colorfol1
040106f0 g     F .text	00000038 exit
04005284 g     F .text	000000c8 _fwalk_reent
0400ae14 g     F .text	0000018c __mdiff
04010004 g     F .text	00000054 alt_flash_close_dev
0400cda8 g     F .text	00000060 __modsi3
04001930 g     F .text	000000c4 RD_AD
06000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
0400459c g     F .text	00000004 __sfp_lock_release
04000e70 g     F .text	00000174 LCD_GetPoint
04000000 g       *ABS*	00000000 __alt_mem_sdram
04001588 g     F .text	00000140 DrawOnLCDAndStore
04004800 g     F .text	000000f4 _fopen_r
04010ac4 g     F .text	00000020 _exit
0400bcfc g     F .text	00000030 __isnand
0400f958 g     F .text	00000154 alt_alarm_start
04003bc0 g     F .text	00000098 __muldi3
04005404 g     F .text	00000194 __smakebuf_r
04006424 g     F .text	00000074 strlen
0400f598 g     F .text	00000050 epcs_write_enable
0400d4cc g     F .text	00000188 open
04003968 g     F .text	00000088 __gedf2
04001e80 g     F .text	000003c4 Read_Ads7846
04013008 g     O .rwdata	00000004 alt_priority_mask
04010160 g     F .text	0000009c alt_ic_irq_enable
0400839c g     F .text	00000024 __vfprintf_internal
00000000 g       *ABS*	00000000 __alt_mem_epcs
04003148 g     F .text	00000080 __subdf3
0400e508 g     F .text	00000098 alt_epcs_flash_read
0400a6f4 g     F .text	000000c4 __lo0bits
0401300c g     O .rwdata	00000008 alt_alarm_list
0400fd0c g     F .text	00000064 _do_ctors
0400ce18 g     F .text	000000fc close
040003cc g     F .text	00000050 LCD_ReadReg
04003cd8 g     F .text	00000314 __pack_d
04001724 g     F .text	0000009c DisplayStoredImage
04000df8 g     F .text	00000078 LCD_BGR2RGB
00000000  w      *UND*	00000000 free
040045a0 g     F .text	00000004 __sinit_lock_acquire
0400f64c g     F .text	00000170 epcs_write_buffer
0400b310 g     F .text	00000100 __multadd
0400a65c g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

04000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 4000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defff904 	addi	sp,sp,-28
 40000f0:	dfc00615 	stw	ra,24(sp)
 40000f4:	df000515 	stw	fp,20(sp)
 40000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 40000fc:	0005313a 	rdctl	r2,ipending
 4000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 4000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 4000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 400010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000110:	00800044 	movi	r2,1
 4000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 4000118:	e0ffff17 	ldw	r3,-4(fp)
 400011c:	e0bffe17 	ldw	r2,-8(fp)
 4000120:	1884703a 	and	r2,r3,r2
 4000124:	1005003a 	cmpeq	r2,r2,zero
 4000128:	1000161e 	bne	r2,zero,4000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400012c:	e0bffd17 	ldw	r2,-12(fp)
 4000130:	00c10074 	movhi	r3,1025
 4000134:	18cc3004 	addi	r3,r3,12480
 4000138:	100490fa 	slli	r2,r2,3
 400013c:	10c5883a 	add	r2,r2,r3
 4000140:	11400017 	ldw	r5,0(r2)
 4000144:	e0bffd17 	ldw	r2,-12(fp)
 4000148:	00c10074 	movhi	r3,1025
 400014c:	18cc3004 	addi	r3,r3,12480
 4000150:	100490fa 	slli	r2,r2,3
 4000154:	10c5883a 	add	r2,r2,r3
 4000158:	10800104 	addi	r2,r2,4
 400015c:	11000017 	ldw	r4,0(r2)
 4000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000164:	0005313a 	rdctl	r2,ipending
 4000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 400016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 4000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 4000174:	e0bfff17 	ldw	r2,-4(fp)
 4000178:	1004c03a 	cmpne	r2,r2,zero
 400017c:	103fe31e 	bne	r2,zero,400010c <alt_irq_handler+0x20>
 4000180:	00000706 	br	40001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4000184:	e0bffe17 	ldw	r2,-8(fp)
 4000188:	1085883a 	add	r2,r2,r2
 400018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 4000190:	e0bffd17 	ldw	r2,-12(fp)
 4000194:	10800044 	addi	r2,r2,1
 4000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 400019c:	003fde06 	br	4000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 40001a0:	e037883a 	mov	sp,fp
 40001a4:	dfc00117 	ldw	ra,4(sp)
 40001a8:	df000017 	ldw	fp,0(sp)
 40001ac:	dec00204 	addi	sp,sp,8
 40001b0:	f800283a 	ret

Disassembly of section .text:

040001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001b4:	06c18034 	movhi	sp,1536
    ori sp, sp, %lo(__alt_stack_pointer)
 40001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 40001bc:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 40001c0:	d6abf314 	ori	gp,gp,45004
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001c4:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 40001c8:	108c0514 	ori	r2,r2,12308

    movhi r3, %hi(__bss_end)
 40001cc:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 40001d0:	18ccd414 	ori	r3,r3,13136

    beq r2, r3, 1f
 40001d4:	10c00326 	beq	r2,r3,40001e4 <_start+0x30>

0:
    stw zero, (r2)
 40001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001e0:	10fffd36 	bltu	r2,r3,40001d8 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001e4:	400d3440 	call	400d344 <alt_main>

040001e8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001e8:	003fff06 	br	40001e8 <alt_after_alt_main>

040001ec <GetASCIICode>:
* Output         : 
* Return         : None
* Attention      : None
*******************************************************************************/
void GetASCIICode(unsigned char* pBuffer,unsigned char ASCII)
{  
 40001ec:	defffc04 	addi	sp,sp,-16
 40001f0:	dfc00315 	stw	ra,12(sp)
 40001f4:	df000215 	stw	fp,8(sp)
 40001f8:	df000204 	addi	fp,sp,8
 40001fc:	e13ffe15 	stw	r4,-8(fp)
 4000200:	e17fff05 	stb	r5,-4(fp)
   memcpy(pBuffer,AsciiLib[(ASCII - 32)] ,16);
 4000204:	e0bfff03 	ldbu	r2,-4(fp)
 4000208:	1004913a 	slli	r2,r2,4
 400020c:	1007883a 	mov	r3,r2
 4000210:	00810074 	movhi	r2,1025
 4000214:	1082ba04 	addi	r2,r2,2792
 4000218:	10bf8004 	addi	r2,r2,-512
 400021c:	1885883a 	add	r2,r3,r2
 4000220:	1007883a 	mov	r3,r2
 4000224:	e0bffe17 	ldw	r2,-8(fp)
 4000228:	1009883a 	mov	r4,r2
 400022c:	180b883a 	mov	r5,r3
 4000230:	01800404 	movi	r6,16
 4000234:	4005cd80 	call	4005cd8 <memcpy>
}
 4000238:	e037883a 	mov	sp,fp
 400023c:	dfc00117 	ldw	ra,4(sp)
 4000240:	df000017 	ldw	fp,0(sp)
 4000244:	dec00204 	addi	sp,sp,8
 4000248:	f800283a 	ret

0400024c <LCD_WriteIndex>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
__inline void LCD_WriteIndex(alt_u16 index)
{
 400024c:	defffe04 	addi	sp,sp,-8
 4000250:	df000115 	stw	fp,4(sp)
 4000254:	df000104 	addi	fp,sp,4
 4000258:	e13fff0d 	sth	r4,-4(fp)
    Clr_Rs;
 400025c:	00862c04 	movi	r2,6320
 4000260:	10000035 	stwio	zero,0(r2)
    Set_nRd;
 4000264:	00c61804 	movi	r3,6240
 4000268:	00800044 	movi	r2,1
 400026c:	18800035 	stwio	r2,0(r3)
    
    IOWR_ALTERA_AVALON_PIO_DIRECTION(LCD32_DATA_BASE, 0XFFFF) ;  /* GPIO_Write(GPIOE,index); */
 4000270:	00c61d04 	movi	r3,6260
 4000274:	00bfffd4 	movui	r2,65535
 4000278:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_PIO_DATA(LCD32_DATA_BASE, index);
 400027c:	e0ffff0b 	ldhu	r3,-4(fp)
 4000280:	00861c04 	movi	r2,6256
 4000284:	10c00035 	stwio	r3,0(r2)
    
    Clr_nWr;
 4000288:	00862004 	movi	r2,6272
 400028c:	10000035 	stwio	zero,0(r2)
    Set_nWr;
 4000290:	00c62004 	movi	r3,6272
 4000294:	00800044 	movi	r2,1
 4000298:	18800035 	stwio	r2,0(r3)
}
 400029c:	e037883a 	mov	sp,fp
 40002a0:	df000017 	ldw	fp,0(sp)
 40002a4:	dec00104 	addi	sp,sp,4
 40002a8:	f800283a 	ret

040002ac <LCD_WriteData>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
__inline void LCD_WriteData(alt_u16 data)
{
 40002ac:	defffe04 	addi	sp,sp,-8
 40002b0:	df000115 	stw	fp,4(sp)
 40002b4:	df000104 	addi	fp,sp,4
 40002b8:	e13fff0d 	sth	r4,-4(fp)
    Set_Rs;
 40002bc:	00c62c04 	movi	r3,6320
 40002c0:	00800044 	movi	r2,1
 40002c4:	18800035 	stwio	r2,0(r3)

    IOWR_ALTERA_AVALON_PIO_DIRECTION(LCD32_DATA_BASE, 0XFFFF) ;  /* GPIO_Write(GPIOE,index); */
 40002c8:	00c61d04 	movi	r3,6260
 40002cc:	00bfffd4 	movui	r2,65535
 40002d0:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_PIO_DATA(LCD32_DATA_BASE, data);
 40002d4:	e0ffff0b 	ldhu	r3,-4(fp)
 40002d8:	00861c04 	movi	r2,6256
 40002dc:	10c00035 	stwio	r3,0(r2)

    Clr_nWr;
 40002e0:	00862004 	movi	r2,6272
 40002e4:	10000035 	stwio	zero,0(r2)
    Set_nWr;
 40002e8:	00c62004 	movi	r3,6272
 40002ec:	00800044 	movi	r2,1
 40002f0:	18800035 	stwio	r2,0(r3)
}
 40002f4:	e037883a 	mov	sp,fp
 40002f8:	df000017 	ldw	fp,0(sp)
 40002fc:	dec00104 	addi	sp,sp,4
 4000300:	f800283a 	ret

04000304 <LCD_ReadData>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
__inline alt_u16 LCD_ReadData(void)
{
 4000304:	defffe04 	addi	sp,sp,-8
 4000308:	df000115 	stw	fp,4(sp)
 400030c:	df000104 	addi	fp,sp,4
    alt_u16 value;

    Set_Rs;
 4000310:	00c62c04 	movi	r3,6320
 4000314:	00800044 	movi	r2,1
 4000318:	18800035 	stwio	r2,0(r3)
    Set_nWr;
 400031c:	00c62004 	movi	r3,6272
 4000320:	00800044 	movi	r2,1
 4000324:	18800035 	stwio	r2,0(r3)
    Clr_nRd;
 4000328:	00861804 	movi	r2,6240
 400032c:	10000035 	stwio	zero,0(r2)
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIOE, &GPIO_InitStructure);
*/
    IOWR_ALTERA_AVALON_PIO_DIRECTION(LCD32_DATA_BASE, 0X0000) ;  /* GPIO_Write(GPIOE,index); */
 4000330:	00861d04 	movi	r2,6260
 4000334:	10000035 	stwio	zero,0(r2)
    value=IORD_ALTERA_AVALON_PIO_DATA(LCD32_DATA_BASE);
 4000338:	00861c04 	movi	r2,6256
 400033c:	10800037 	ldwio	r2,0(r2)
 4000340:	e0bfff0d 	sth	r2,-4(fp)
     value=IORD_ALTERA_AVALON_PIO_DATA(LCD32_DATA_BASE);
 4000344:	00861c04 	movi	r2,6256
 4000348:	10800037 	ldwio	r2,0(r2)
 400034c:	e0bfff0d 	sth	r2,-4(fp)

    IOWR_ALTERA_AVALON_PIO_DIRECTION(LCD32_DATA_BASE, 0XFFFF) ;
 4000350:	00c61d04 	movi	r3,6260
 4000354:	00bfffd4 	movui	r2,65535
 4000358:	18800035 	stwio	r2,0(r3)

    Set_nRd;
 400035c:	00c61804 	movi	r3,6240
 4000360:	00800044 	movi	r2,1
 4000364:	18800035 	stwio	r2,0(r3)

    return value;
 4000368:	e0bfff0b 	ldhu	r2,-4(fp)
}
 400036c:	e037883a 	mov	sp,fp
 4000370:	df000017 	ldw	fp,0(sp)
 4000374:	dec00104 	addi	sp,sp,4
 4000378:	f800283a 	ret

0400037c <LCD_WriteReg>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
__inline void LCD_WriteReg(alt_u16 LCD_Reg,alt_u16 LCD_RegValue)
{ 
 400037c:	defffc04 	addi	sp,sp,-16
 4000380:	dfc00315 	stw	ra,12(sp)
 4000384:	df000215 	stw	fp,8(sp)
 4000388:	df000204 	addi	fp,sp,8
 400038c:	e13ffe0d 	sth	r4,-8(fp)
 4000390:	e17fff0d 	sth	r5,-4(fp)
    /* Write 16-bit Index, then Write Reg */  
    Clr_Cs;
 4000394:	00863404 	movi	r2,6352
 4000398:	10000035 	stwio	zero,0(r2)
    LCD_WriteIndex(LCD_Reg);         
 400039c:	e13ffe0b 	ldhu	r4,-8(fp)
 40003a0:	400024c0 	call	400024c <LCD_WriteIndex>
    /* Write 16-bit Reg */
    LCD_WriteData(LCD_RegValue);  
 40003a4:	e13fff0b 	ldhu	r4,-4(fp)
 40003a8:	40002ac0 	call	40002ac <LCD_WriteData>
    Set_Cs; 
 40003ac:	00c63404 	movi	r3,6352
 40003b0:	00800044 	movi	r2,1
 40003b4:	18800035 	stwio	r2,0(r3)
}
 40003b8:	e037883a 	mov	sp,fp
 40003bc:	dfc00117 	ldw	ra,4(sp)
 40003c0:	df000017 	ldw	fp,0(sp)
 40003c4:	dec00204 	addi	sp,sp,8
 40003c8:	f800283a 	ret

040003cc <LCD_ReadReg>:
* Output         : None
* Return         : LCD Register Value.
* Attention      : None
*******************************************************************************/
__inline alt_u16 LCD_ReadReg(alt_u16 LCD_Reg)
{
 40003cc:	defffc04 	addi	sp,sp,-16
 40003d0:	dfc00315 	stw	ra,12(sp)
 40003d4:	df000215 	stw	fp,8(sp)
 40003d8:	df000204 	addi	fp,sp,8
 40003dc:	e13fff0d 	sth	r4,-4(fp)
    alt_u16 LCD_RAM;
    
    /* Write 16-bit Index (then Read Reg) */
    Clr_Cs;
 40003e0:	00863404 	movi	r2,6352
 40003e4:	10000035 	stwio	zero,0(r2)
    LCD_WriteIndex(LCD_Reg);
 40003e8:	e13fff0b 	ldhu	r4,-4(fp)
 40003ec:	400024c0 	call	400024c <LCD_WriteIndex>
    /* Read 16-bit Reg */
    LCD_RAM = LCD_ReadData();       
 40003f0:	40003040 	call	4000304 <LCD_ReadData>
 40003f4:	e0bffe0d 	sth	r2,-8(fp)
    Set_Cs;
 40003f8:	00c63404 	movi	r3,6352
 40003fc:	00800044 	movi	r2,1
 4000400:	18800035 	stwio	r2,0(r3)
    return LCD_RAM;
 4000404:	e0bffe0b 	ldhu	r2,-8(fp)
}
 4000408:	e037883a 	mov	sp,fp
 400040c:	dfc00117 	ldw	ra,4(sp)
 4000410:	df000017 	ldw	fp,0(sp)
 4000414:	dec00204 	addi	sp,sp,8
 4000418:	f800283a 	ret

0400041c <LCD_SetCursor>:

      

void LCD_SetCursor( alt_u16 Xpos, alt_u16 Ypos )
{
 400041c:	defffa04 	addi	sp,sp,-24
 4000420:	dfc00515 	stw	ra,20(sp)
 4000424:	df000415 	stw	fp,16(sp)
 4000428:	df000404 	addi	fp,sp,16
 400042c:	e13ffd0d 	sth	r4,-12(fp)
 4000430:	e17ffe0d 	sth	r5,-8(fp)
    #if  ( DISP_ORIENTATION == 90 ) || ( DISP_ORIENTATION == 270 )

        alt_u16 temp = Xpos;
 4000434:	e0bffd0b 	ldhu	r2,-12(fp)
 4000438:	e0bffc0d 	sth	r2,-16(fp)
        Xpos = Ypos;
 400043c:	e0bffe0b 	ldhu	r2,-8(fp)
 4000440:	e0bffd0d 	sth	r2,-12(fp)
        Ypos = ( MAX_X - 1 ) - temp;  
 4000444:	e0fffc0b 	ldhu	r3,-16(fp)
 4000448:	00804fc4 	movi	r2,319
 400044c:	10c5c83a 	sub	r2,r2,r3
 4000450:	e0bffe0d 	sth	r2,-8(fp)

    #elif  ( DISP_ORIENTATION == 0 ) || ( DISP_ORIENTATION == 180 )
        
    #endif

    switch (LCD_Code) {
 4000454:	d0a01203 	ldbu	r2,-32696(gp)
 4000458:	10803fcc 	andi	r2,r2,255
 400045c:	10bfff04 	addi	r2,r2,-4
 4000460:	e0bfff15 	stw	r2,-4(fp)
 4000464:	e0ffff17 	ldw	r3,-4(fp)
 4000468:	188002a8 	cmpgeui	r2,r3,10
 400046c:	1000131e 	bne	r2,zero,40004bc <LCD_SetCursor+0xa0>
 4000470:	e13fff17 	ldw	r4,-4(fp)
 4000474:	e13fff17 	ldw	r4,-4(fp)
 4000478:	2105883a 	add	r2,r4,r4
 400047c:	1087883a 	add	r3,r2,r2
 4000480:	00810034 	movhi	r2,1024
 4000484:	10812504 	addi	r2,r2,1172
 4000488:	1885883a 	add	r2,r3,r2
 400048c:	10800017 	ldw	r2,0(r2)
 4000490:	1000683a 	jmp	r2
 4000494:	040004d8 	cmpnei	r16,zero,19
 4000498:	040004d8 	cmpnei	r16,zero,19
 400049c:	040004bc 	xorhi	r16,zero,18
 40004a0:	040004bc 	xorhi	r16,zero,18
 40004a4:	040004bc 	xorhi	r16,zero,18
 40004a8:	040004bc 	xorhi	r16,zero,18
 40004ac:	040004f4 	movhi	r16,19
 40004b0:	040004f4 	movhi	r16,19
 40004b4:	040004bc 	xorhi	r16,zero,18
 40004b8:	04000534 	movhi	r16,20
        default: /* 0x9320 0x9325 0x9328 0x9331 0x5408 0x1505 0x0505 0x7783 0x4531 0x4535 */
            LCD_WriteReg(0x0020, Xpos);
 40004bc:	e17ffd0b 	ldhu	r5,-12(fp)
 40004c0:	01000804 	movi	r4,32
 40004c4:	400037c0 	call	400037c <LCD_WriteReg>
            LCD_WriteReg(0x0021, Ypos);
 40004c8:	e17ffe0b 	ldhu	r5,-8(fp)
 40004cc:	01000844 	movi	r4,33
 40004d0:	400037c0 	call	400037c <LCD_WriteReg>
            break;
 40004d4:	00001706 	br	4000534 <LCD_SetCursor+0x118>

        case SSD1298: /* 0x8999 */
        case SSD1289: /* 0x8989 */
            LCD_WriteReg(0x004e, Xpos);
 40004d8:	e17ffd0b 	ldhu	r5,-12(fp)
 40004dc:	01001384 	movi	r4,78
 40004e0:	400037c0 	call	400037c <LCD_WriteReg>
            LCD_WriteReg(0x004f, Ypos);
 40004e4:	e17ffe0b 	ldhu	r5,-8(fp)
 40004e8:	010013c4 	movi	r4,79
 40004ec:	400037c0 	call	400037c <LCD_WriteReg>
            break;
 40004f0:	00001006 	br	4000534 <LCD_SetCursor+0x118>

        case HX8347A: /* 0x0047 */
        case HX8347D: /* 0x0047 */
            LCD_WriteReg(0x02, Xpos >> 8);
 40004f4:	e0bffd0b 	ldhu	r2,-12(fp)
 40004f8:	1004d23a 	srli	r2,r2,8
 40004fc:	117fffcc 	andi	r5,r2,65535
 4000500:	01000084 	movi	r4,2
 4000504:	400037c0 	call	400037c <LCD_WriteReg>
            LCD_WriteReg(0x03, Xpos);
 4000508:	e17ffd0b 	ldhu	r5,-12(fp)
 400050c:	010000c4 	movi	r4,3
 4000510:	400037c0 	call	400037c <LCD_WriteReg>

            LCD_WriteReg(0x06, Ypos >> 8);
 4000514:	e0bffe0b 	ldhu	r2,-8(fp)
 4000518:	1004d23a 	srli	r2,r2,8
 400051c:	117fffcc 	andi	r5,r2,65535
 4000520:	01000184 	movi	r4,6
 4000524:	400037c0 	call	400037c <LCD_WriteReg>
            LCD_WriteReg(0x07, Ypos);
 4000528:	e17ffe0b 	ldhu	r5,-8(fp)
 400052c:	010001c4 	movi	r4,7
 4000530:	400037c0 	call	400037c <LCD_WriteReg>
            break;

        case SSD2119: /* 3.5 LCD 0x9919 */
            break;
    }
}
 4000534:	e037883a 	mov	sp,fp
 4000538:	dfc00117 	ldw	ra,4(sp)
 400053c:	df000017 	ldw	fp,0(sp)
 4000540:	dec00204 	addi	sp,sp,8
 4000544:	f800283a 	ret

04000548 <LCD_Initializtion>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void LCD_Initializtion(void)
{
 4000548:	defffd04 	addi	sp,sp,-12
 400054c:	dfc00215 	stw	ra,8(sp)
 4000550:	df000115 	stw	fp,4(sp)
 4000554:	df000104 	addi	fp,sp,4
    alt_u16 DeviceCode;

    // LCD_Configuration();
    Clr_RST ;      /* LCD_RESET *////0
 4000558:	00862404 	movi	r2,6288
 400055c:	10000035 	stwio	zero,0(r2)
    delay_ms(100);
 4000560:	010000b4 	movhi	r4,2
 4000564:	2121a804 	addi	r4,r4,-31072
 4000568:	400d9500 	call	400d950 <usleep>
    Set_RST;    /////////1
 400056c:	00c62404 	movi	r3,6288
 4000570:	00800044 	movi	r2,1
 4000574:	18800035 	stwio	r2,0(r3)

    /* Set MN(multipliers) of PLL, VCO = crystal freq * (N+1) */
    /* PLL freq = VCO/M with 250MHz < VCO < 800MHz */
    /* The max PLL freq is around 120MHz. To obtain 120MHz as the PLL freq */

    DeviceCode = LCD_ReadReg(0x0000);       /* Read LCD ID  */                 
 4000578:	0009883a 	mov	r4,zero
 400057c:	40003cc0 	call	40003cc <LCD_ReadReg>
 4000580:	e0bfff0d 	sth	r2,-4(fp)
    
    /*For ILI9325*/ 
    if( DeviceCode == 0x9325 || DeviceCode == 0x9328 )  
 4000584:	e0ffff0b 	ldhu	r3,-4(fp)
 4000588:	00a4c954 	movui	r2,37669
 400058c:	18800326 	beq	r3,r2,400059c <LCD_Initializtion+0x54>
 4000590:	e0ffff0b 	ldhu	r3,-4(fp)
 4000594:	00a4ca14 	movui	r2,37672
 4000598:	1880b71e 	bne	r3,r2,4000878 <LCD_Initializtion+0x330>
    {
        LCD_Code = ILI9325;
 400059c:	00800044 	movi	r2,1
 40005a0:	d0a01205 	stb	r2,-32696(gp)
        LCD_WriteReg(0x00e7,0x0010);      
 40005a4:	010039c4 	movi	r4,231
 40005a8:	01400404 	movi	r5,16
 40005ac:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0000,0x0001);    /* start internal osc */
 40005b0:	0009883a 	mov	r4,zero
 40005b4:	01400044 	movi	r5,1
 40005b8:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0001,0x0100);     
 40005bc:	01000044 	movi	r4,1
 40005c0:	01404004 	movi	r5,256
 40005c4:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);    /* power on sequence */
 40005c8:	01000084 	movi	r4,2
 40005cc:	0141c004 	movi	r5,1792
 40005d0:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0003,(1<<12)|(1<<5)|(1<<4)|(0<<3) );     /* importance */
 40005d4:	010000c4 	movi	r4,3
 40005d8:	01440c04 	movi	r5,4144
 40005dc:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);                                   
 40005e0:	01000104 	movi	r4,4
 40005e4:	000b883a 	mov	r5,zero
 40005e8:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x0207);               
 40005ec:	01000204 	movi	r4,8
 40005f0:	014081c4 	movi	r5,519
 40005f4:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0009,0x0000);         
 40005f8:	01000244 	movi	r4,9
 40005fc:	000b883a 	mov	r5,zero
 4000600:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x000a,0x0000);    /* display setting */        
 4000604:	01000284 	movi	r4,10
 4000608:	000b883a 	mov	r5,zero
 400060c:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x000c,0x0001);    /* display setting */        
 4000610:	01000304 	movi	r4,12
 4000614:	01400044 	movi	r5,1
 4000618:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x000d,0x0000);                    
 400061c:	01000344 	movi	r4,13
 4000620:	000b883a 	mov	r5,zero
 4000624:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x000f,0x0000);
 4000628:	010003c4 	movi	r4,15
 400062c:	000b883a 	mov	r5,zero
 4000630:	400037c0 	call	400037c <LCD_WriteReg>
        /* Power On sequence */
        LCD_WriteReg(0x0010,0x0000);   
 4000634:	01000404 	movi	r4,16
 4000638:	000b883a 	mov	r5,zero
 400063c:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0007);
 4000640:	01000444 	movi	r4,17
 4000644:	014001c4 	movi	r5,7
 4000648:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x0000);                                                                 
 400064c:	01000484 	movi	r4,18
 4000650:	000b883a 	mov	r5,zero
 4000654:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0000);                 
 4000658:	010004c4 	movi	r4,19
 400065c:	000b883a 	mov	r5,zero
 4000660:	400037c0 	call	400037c <LCD_WriteReg>
        delay_ms(50);  /* delay 50 ms */        
 4000664:	0130d414 	movui	r4,50000
 4000668:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0010,0x1590);   
 400066c:	01000404 	movi	r4,16
 4000670:	01456404 	movi	r5,5520
 4000674:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0227);
 4000678:	01000444 	movi	r4,17
 400067c:	014089c4 	movi	r5,551
 4000680:	400037c0 	call	400037c <LCD_WriteReg>
        delay_ms(50);  /* delay 50 ms */        
 4000684:	0130d414 	movui	r4,50000
 4000688:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0012,0x009c);                  
 400068c:	01000484 	movi	r4,18
 4000690:	01402704 	movi	r5,156
 4000694:	400037c0 	call	400037c <LCD_WriteReg>
        delay_ms(50);  /* delay 50 ms */        
 4000698:	0130d414 	movui	r4,50000
 400069c:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0013,0x1900);   
 40006a0:	010004c4 	movi	r4,19
 40006a4:	01464004 	movi	r5,6400
 40006a8:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x0023);
 40006ac:	01000a44 	movi	r4,41
 40006b0:	014008c4 	movi	r5,35
 40006b4:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x002b,0x000e);
 40006b8:	01000ac4 	movi	r4,43
 40006bc:	01400384 	movi	r5,14
 40006c0:	400037c0 	call	400037c <LCD_WriteReg>
        delay_ms(50);  /* delay 50 ms */        
 40006c4:	0130d414 	movui	r4,50000
 40006c8:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0020,0x0000);                                                            
 40006cc:	01000804 	movi	r4,32
 40006d0:	000b883a 	mov	r5,zero
 40006d4:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);           
 40006d8:	01000844 	movi	r4,33
 40006dc:	000b883a 	mov	r5,zero
 40006e0:	400037c0 	call	400037c <LCD_WriteReg>
        delay_ms(50);  /* delay 50 ms */        
 40006e4:	0130d414 	movui	r4,50000
 40006e8:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0030,0x0007); 
 40006ec:	01000c04 	movi	r4,48
 40006f0:	014001c4 	movi	r5,7
 40006f4:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0707);   
 40006f8:	01000c44 	movi	r4,49
 40006fc:	0141c1c4 	movi	r5,1799
 4000700:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0006);
 4000704:	01000c84 	movi	r4,50
 4000708:	01400184 	movi	r5,6
 400070c:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0704);
 4000710:	01000d44 	movi	r4,53
 4000714:	0141c104 	movi	r5,1796
 4000718:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x1f04); 
 400071c:	01000d84 	movi	r4,54
 4000720:	0147c104 	movi	r5,7940
 4000724:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0004);
 4000728:	01000dc4 	movi	r4,55
 400072c:	01400104 	movi	r5,4
 4000730:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0000);        
 4000734:	01000e04 	movi	r4,56
 4000738:	000b883a 	mov	r5,zero
 400073c:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0706);     
 4000740:	01000e44 	movi	r4,57
 4000744:	0141c184 	movi	r5,1798
 4000748:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x003c,0x0701);
 400074c:	01000f04 	movi	r4,60
 4000750:	0141c044 	movi	r5,1793
 4000754:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x003d,0x000f);
 4000758:	01000f44 	movi	r4,61
 400075c:	014003c4 	movi	r5,15
 4000760:	400037c0 	call	400037c <LCD_WriteReg>
        delay_ms(50);  /* delay 50 ms */        
 4000764:	0130d414 	movui	r4,50000
 4000768:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0050,0x0000);        
 400076c:	01001404 	movi	r4,80
 4000770:	000b883a 	mov	r5,zero
 4000774:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00ef);   
 4000778:	01001444 	movi	r4,81
 400077c:	01403bc4 	movi	r5,239
 4000780:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000);     
 4000784:	01001484 	movi	r4,82
 4000788:	000b883a 	mov	r5,zero
 400078c:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013f);
 4000790:	010014c4 	movi	r4,83
 4000794:	01404fc4 	movi	r5,319
 4000798:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0060,0xa700);        
 400079c:	01001804 	movi	r4,96
 40007a0:	0169c014 	movui	r5,42752
 40007a4:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001); 
 40007a8:	01001844 	movi	r4,97
 40007ac:	01400044 	movi	r5,1
 40007b0:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x006a,0x0000);
 40007b4:	01001a84 	movi	r4,106
 40007b8:	000b883a 	mov	r5,zero
 40007bc:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 40007c0:	01002004 	movi	r4,128
 40007c4:	000b883a 	mov	r5,zero
 40007c8:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0081,0x0000);
 40007cc:	01002044 	movi	r4,129
 40007d0:	000b883a 	mov	r5,zero
 40007d4:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 40007d8:	01002084 	movi	r4,130
 40007dc:	000b883a 	mov	r5,zero
 40007e0:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 40007e4:	010020c4 	movi	r4,131
 40007e8:	000b883a 	mov	r5,zero
 40007ec:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 40007f0:	01002104 	movi	r4,132
 40007f4:	000b883a 	mov	r5,zero
 40007f8:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 40007fc:	01002144 	movi	r4,133
 4000800:	000b883a 	mov	r5,zero
 4000804:	400037c0 	call	400037c <LCD_WriteReg>
          
        LCD_WriteReg(0x0090,0x0010);     
 4000808:	01002404 	movi	r4,144
 400080c:	01400404 	movi	r5,16
 4000810:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0000);  
 4000814:	01002484 	movi	r4,146
 4000818:	000b883a 	mov	r5,zero
 400081c:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0093,0x0003);
 4000820:	010024c4 	movi	r4,147
 4000824:	014000c4 	movi	r5,3
 4000828:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0095,0x0110);
 400082c:	01002544 	movi	r4,149
 4000830:	01404404 	movi	r5,272
 4000834:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0097,0x0000);        
 4000838:	010025c4 	movi	r4,151
 400083c:	000b883a 	mov	r5,zero
 4000840:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0098,0x0000);  
 4000844:	01002604 	movi	r4,152
 4000848:	000b883a 	mov	r5,zero
 400084c:	400037c0 	call	400037c <LCD_WriteReg>
        /* display on sequence */    
        LCD_WriteReg(0x0007,0x0133);
 4000850:	010001c4 	movi	r4,7
 4000854:	01404cc4 	movi	r5,307
 4000858:	400037c0 	call	400037c <LCD_WriteReg>
        
        LCD_WriteReg(0x0020,0x0000);
 400085c:	01000804 	movi	r4,32
 4000860:	000b883a 	mov	r5,zero
 4000864:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 4000868:	01000844 	movi	r4,33
 400086c:	000b883a 	mov	r5,zero
 4000870:	400037c0 	call	400037c <LCD_WriteReg>
    /* The max PLL freq is around 120MHz. To obtain 120MHz as the PLL freq */

    DeviceCode = LCD_ReadReg(0x0000);       /* Read LCD ID  */                 
    
    /*For ILI9325*/ 
    if( DeviceCode == 0x9325 || DeviceCode == 0x9328 )  
 4000874:	0000ce06 	br	4000bb0 <LCD_Initializtion+0x668>
        LCD_WriteReg(0x0007,0x0133);
        
        LCD_WriteReg(0x0020,0x0000);
        LCD_WriteReg(0x0021,0x0000);
    }
    else if( DeviceCode == 0x8989 )  /*For SSD1289*/
 4000878:	e0ffff0b 	ldhu	r3,-4(fp)
 400087c:	00a26254 	movui	r2,35209
 4000880:	1880cb1e 	bne	r3,r2,4000bb0 <LCD_Initializtion+0x668>
    {
        LCD_Code = SSD1289;
 4000884:	00800144 	movi	r2,5
 4000888:	d0a01205 	stb	r2,-32696(gp)
        LCD_WriteReg(0x0000,0x0001);    delay_ms(50);   /* Enable LCD Oscillator */
 400088c:	0009883a 	mov	r4,zero
 4000890:	01400044 	movi	r5,1
 4000894:	400037c0 	call	400037c <LCD_WriteReg>
 4000898:	0130d414 	movui	r4,50000
 400089c:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0003,0xA8A4);    delay_ms(50);   
 40008a0:	010000c4 	movi	r4,3
 40008a4:	016a2914 	movui	r5,43172
 40008a8:	400037c0 	call	400037c <LCD_WriteReg>
 40008ac:	0130d414 	movui	r4,50000
 40008b0:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x000C,0x0000);    delay_ms(50);   
 40008b4:	01000304 	movi	r4,12
 40008b8:	000b883a 	mov	r5,zero
 40008bc:	400037c0 	call	400037c <LCD_WriteReg>
 40008c0:	0130d414 	movui	r4,50000
 40008c4:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x000D,0x080C);    delay_ms(50);   
 40008c8:	01000344 	movi	r4,13
 40008cc:	01420304 	movi	r5,2060
 40008d0:	400037c0 	call	400037c <LCD_WriteReg>
 40008d4:	0130d414 	movui	r4,50000
 40008d8:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x000E,0x2B00);    delay_ms(50);   
 40008dc:	01000384 	movi	r4,14
 40008e0:	014ac004 	movi	r5,11008
 40008e4:	400037c0 	call	400037c <LCD_WriteReg>
 40008e8:	0130d414 	movui	r4,50000
 40008ec:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x001E,0x00B0);    delay_ms(50);   
 40008f0:	01000784 	movi	r4,30
 40008f4:	01402c04 	movi	r5,176
 40008f8:	400037c0 	call	400037c <LCD_WriteReg>
 40008fc:	0130d414 	movui	r4,50000
 4000900:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0001,0x2B3F);    delay_ms(50);   /* 320*240 0x2B3F */
 4000904:	01000044 	movi	r4,1
 4000908:	014acfc4 	movi	r5,11071
 400090c:	400037c0 	call	400037c <LCD_WriteReg>
 4000910:	0130d414 	movui	r4,50000
 4000914:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0002,0x0600);    delay_ms(50);
 4000918:	01000084 	movi	r4,2
 400091c:	01418004 	movi	r5,1536
 4000920:	400037c0 	call	400037c <LCD_WriteReg>
 4000924:	0130d414 	movui	r4,50000
 4000928:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0010,0x0000);    delay_ms(50);
 400092c:	01000404 	movi	r4,16
 4000930:	000b883a 	mov	r5,zero
 4000934:	400037c0 	call	400037c <LCD_WriteReg>
 4000938:	0130d414 	movui	r4,50000
 400093c:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0011,0x6070);    delay_ms(50);
 4000940:	01000444 	movi	r4,17
 4000944:	01581c04 	movi	r5,24688
 4000948:	400037c0 	call	400037c <LCD_WriteReg>
 400094c:	0130d414 	movui	r4,50000
 4000950:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0005,0x0000);    delay_ms(50);
 4000954:	01000144 	movi	r4,5
 4000958:	000b883a 	mov	r5,zero
 400095c:	400037c0 	call	400037c <LCD_WriteReg>
 4000960:	0130d414 	movui	r4,50000
 4000964:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0006,0x0000);    delay_ms(50);
 4000968:	01000184 	movi	r4,6
 400096c:	000b883a 	mov	r5,zero
 4000970:	400037c0 	call	400037c <LCD_WriteReg>
 4000974:	0130d414 	movui	r4,50000
 4000978:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0016,0xEF1C);    delay_ms(50);
 400097c:	01000584 	movi	r4,22
 4000980:	017bc714 	movui	r5,61212
 4000984:	400037c0 	call	400037c <LCD_WriteReg>
 4000988:	0130d414 	movui	r4,50000
 400098c:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0017,0x0003);    delay_ms(50);
 4000990:	010005c4 	movi	r4,23
 4000994:	014000c4 	movi	r5,3
 4000998:	400037c0 	call	400037c <LCD_WriteReg>
 400099c:	0130d414 	movui	r4,50000
 40009a0:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0007,0x0133);    delay_ms(50);         
 40009a4:	010001c4 	movi	r4,7
 40009a8:	01404cc4 	movi	r5,307
 40009ac:	400037c0 	call	400037c <LCD_WriteReg>
 40009b0:	0130d414 	movui	r4,50000
 40009b4:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x000B,0x0000);    delay_ms(50);
 40009b8:	010002c4 	movi	r4,11
 40009bc:	000b883a 	mov	r5,zero
 40009c0:	400037c0 	call	400037c <LCD_WriteReg>
 40009c4:	0130d414 	movui	r4,50000
 40009c8:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x000F,0x0000);    delay_ms(50);
 40009cc:	010003c4 	movi	r4,15
 40009d0:	000b883a 	mov	r5,zero
 40009d4:	400037c0 	call	400037c <LCD_WriteReg>
 40009d8:	0130d414 	movui	r4,50000
 40009dc:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0041,0x0000);    delay_ms(50);
 40009e0:	01001044 	movi	r4,65
 40009e4:	000b883a 	mov	r5,zero
 40009e8:	400037c0 	call	400037c <LCD_WriteReg>
 40009ec:	0130d414 	movui	r4,50000
 40009f0:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0042,0x0000);    delay_ms(50);
 40009f4:	01001084 	movi	r4,66
 40009f8:	000b883a 	mov	r5,zero
 40009fc:	400037c0 	call	400037c <LCD_WriteReg>
 4000a00:	0130d414 	movui	r4,50000
 4000a04:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0048,0x0000);    delay_ms(50);
 4000a08:	01001204 	movi	r4,72
 4000a0c:	000b883a 	mov	r5,zero
 4000a10:	400037c0 	call	400037c <LCD_WriteReg>
 4000a14:	0130d414 	movui	r4,50000
 4000a18:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0049,0x013F);    delay_ms(50);
 4000a1c:	01001244 	movi	r4,73
 4000a20:	01404fc4 	movi	r5,319
 4000a24:	400037c0 	call	400037c <LCD_WriteReg>
 4000a28:	0130d414 	movui	r4,50000
 4000a2c:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x004A,0x0000);    delay_ms(50);
 4000a30:	01001284 	movi	r4,74
 4000a34:	000b883a 	mov	r5,zero
 4000a38:	400037c0 	call	400037c <LCD_WriteReg>
 4000a3c:	0130d414 	movui	r4,50000
 4000a40:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x004B,0x0000);    delay_ms(50);
 4000a44:	010012c4 	movi	r4,75
 4000a48:	000b883a 	mov	r5,zero
 4000a4c:	400037c0 	call	400037c <LCD_WriteReg>
 4000a50:	0130d414 	movui	r4,50000
 4000a54:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0044,0xEF00);    delay_ms(50);
 4000a58:	01001104 	movi	r4,68
 4000a5c:	017bc014 	movui	r5,61184
 4000a60:	400037c0 	call	400037c <LCD_WriteReg>
 4000a64:	0130d414 	movui	r4,50000
 4000a68:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0045,0x0000);    delay_ms(50);
 4000a6c:	01001144 	movi	r4,69
 4000a70:	000b883a 	mov	r5,zero
 4000a74:	400037c0 	call	400037c <LCD_WriteReg>
 4000a78:	0130d414 	movui	r4,50000
 4000a7c:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0046,0x013F);    delay_ms(50);
 4000a80:	01001184 	movi	r4,70
 4000a84:	01404fc4 	movi	r5,319
 4000a88:	400037c0 	call	400037c <LCD_WriteReg>
 4000a8c:	0130d414 	movui	r4,50000
 4000a90:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0030,0x0707);    delay_ms(50);
 4000a94:	01000c04 	movi	r4,48
 4000a98:	0141c1c4 	movi	r5,1799
 4000a9c:	400037c0 	call	400037c <LCD_WriteReg>
 4000aa0:	0130d414 	movui	r4,50000
 4000aa4:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0031,0x0204);    delay_ms(50);
 4000aa8:	01000c44 	movi	r4,49
 4000aac:	01408104 	movi	r5,516
 4000ab0:	400037c0 	call	400037c <LCD_WriteReg>
 4000ab4:	0130d414 	movui	r4,50000
 4000ab8:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0032,0x0204);    delay_ms(50);
 4000abc:	01000c84 	movi	r4,50
 4000ac0:	01408104 	movi	r5,516
 4000ac4:	400037c0 	call	400037c <LCD_WriteReg>
 4000ac8:	0130d414 	movui	r4,50000
 4000acc:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0033,0x0502);    delay_ms(50);
 4000ad0:	01000cc4 	movi	r4,51
 4000ad4:	01414084 	movi	r5,1282
 4000ad8:	400037c0 	call	400037c <LCD_WriteReg>
 4000adc:	0130d414 	movui	r4,50000
 4000ae0:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0034,0x0507);    delay_ms(50);
 4000ae4:	01000d04 	movi	r4,52
 4000ae8:	014141c4 	movi	r5,1287
 4000aec:	400037c0 	call	400037c <LCD_WriteReg>
 4000af0:	0130d414 	movui	r4,50000
 4000af4:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0035,0x0204);    delay_ms(50);
 4000af8:	01000d44 	movi	r4,53
 4000afc:	01408104 	movi	r5,516
 4000b00:	400037c0 	call	400037c <LCD_WriteReg>
 4000b04:	0130d414 	movui	r4,50000
 4000b08:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0036,0x0204);    delay_ms(50);
 4000b0c:	01000d84 	movi	r4,54
 4000b10:	01408104 	movi	r5,516
 4000b14:	400037c0 	call	400037c <LCD_WriteReg>
 4000b18:	0130d414 	movui	r4,50000
 4000b1c:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0037,0x0502);    delay_ms(50);
 4000b20:	01000dc4 	movi	r4,55
 4000b24:	01414084 	movi	r5,1282
 4000b28:	400037c0 	call	400037c <LCD_WriteReg>
 4000b2c:	0130d414 	movui	r4,50000
 4000b30:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x003A,0x0302);    delay_ms(50);
 4000b34:	01000e84 	movi	r4,58
 4000b38:	0140c084 	movi	r5,770
 4000b3c:	400037c0 	call	400037c <LCD_WriteReg>
 4000b40:	0130d414 	movui	r4,50000
 4000b44:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x003B,0x0302);    delay_ms(50);
 4000b48:	01000ec4 	movi	r4,59
 4000b4c:	0140c084 	movi	r5,770
 4000b50:	400037c0 	call	400037c <LCD_WriteReg>
 4000b54:	0130d414 	movui	r4,50000
 4000b58:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0023,0x0000);    delay_ms(50);
 4000b5c:	010008c4 	movi	r4,35
 4000b60:	000b883a 	mov	r5,zero
 4000b64:	400037c0 	call	400037c <LCD_WriteReg>
 4000b68:	0130d414 	movui	r4,50000
 4000b6c:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0024,0x0000);    delay_ms(50);
 4000b70:	01000904 	movi	r4,36
 4000b74:	000b883a 	mov	r5,zero
 4000b78:	400037c0 	call	400037c <LCD_WriteReg>
 4000b7c:	0130d414 	movui	r4,50000
 4000b80:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x0025,0x8000);    delay_ms(50);
 4000b84:	01000944 	movi	r4,37
 4000b88:	01600014 	movui	r5,32768
 4000b8c:	400037c0 	call	400037c <LCD_WriteReg>
 4000b90:	0130d414 	movui	r4,50000
 4000b94:	400d9500 	call	400d950 <usleep>
        LCD_WriteReg(0x004f,0);
 4000b98:	010013c4 	movi	r4,79
 4000b9c:	000b883a 	mov	r5,zero
 4000ba0:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x004e,0);
 4000ba4:	01001384 	movi	r4,78
 4000ba8:	000b883a 	mov	r5,zero
 4000bac:	400037c0 	call	400037c <LCD_WriteReg>
    }
     
    delay_ms(50);   /* delay 50 ms */       
 4000bb0:	0130d414 	movui	r4,50000
 4000bb4:	400d9500 	call	400d950 <usleep>
}
 4000bb8:	e037883a 	mov	sp,fp
 4000bbc:	dfc00117 	ldw	ra,4(sp)
 4000bc0:	df000017 	ldw	fp,0(sp)
 4000bc4:	dec00204 	addi	sp,sp,8
 4000bc8:	f800283a 	ret

04000bcc <LCD_Clear>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void LCD_Clear(alt_u16 Color)
{
 4000bcc:	defffc04 	addi	sp,sp,-16
 4000bd0:	dfc00315 	stw	ra,12(sp)
 4000bd4:	df000215 	stw	fp,8(sp)
 4000bd8:	df000204 	addi	fp,sp,8
 4000bdc:	e13fff0d 	sth	r4,-4(fp)
    alt_u32 index=0;
 4000be0:	e03ffe15 	stw	zero,-8(fp)
    
    if( LCD_Code == HX8347D || LCD_Code == HX8347A )
 4000be4:	d0a01203 	ldbu	r2,-32696(gp)
 4000be8:	10803fcc 	andi	r2,r2,255
 4000bec:	108002a0 	cmpeqi	r2,r2,10
 4000bf0:	1000041e 	bne	r2,zero,4000c04 <LCD_Clear+0x38>
 4000bf4:	d0a01203 	ldbu	r2,-32696(gp)
 4000bf8:	10803fcc 	andi	r2,r2,255
 4000bfc:	108002d8 	cmpnei	r2,r2,11
 4000c00:	1000191e 	bne	r2,zero,4000c68 <LCD_Clear+0x9c>
    {
        LCD_WriteReg(0x02,0x00);
 4000c04:	01000084 	movi	r4,2
 4000c08:	000b883a 	mov	r5,zero
 4000c0c:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x03,0x00);
 4000c10:	010000c4 	movi	r4,3
 4000c14:	000b883a 	mov	r5,zero
 4000c18:	400037c0 	call	400037c <LCD_WriteReg>

        LCD_WriteReg(0x04,0x00);
 4000c1c:	01000104 	movi	r4,4
 4000c20:	000b883a 	mov	r5,zero
 4000c24:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x05,0xEF);
 4000c28:	01000144 	movi	r4,5
 4000c2c:	01403bc4 	movi	r5,239
 4000c30:	400037c0 	call	400037c <LCD_WriteReg>

        LCD_WriteReg(0x06,0x00);
 4000c34:	01000184 	movi	r4,6
 4000c38:	000b883a 	mov	r5,zero
 4000c3c:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x07,0x00);
 4000c40:	010001c4 	movi	r4,7
 4000c44:	000b883a 	mov	r5,zero
 4000c48:	400037c0 	call	400037c <LCD_WriteReg>

        LCD_WriteReg(0x08,0x01);
 4000c4c:	01000204 	movi	r4,8
 4000c50:	01400044 	movi	r5,1
 4000c54:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x09,0x3F);
 4000c58:	01000244 	movi	r4,9
 4000c5c:	01400fc4 	movi	r5,63
 4000c60:	400037c0 	call	400037c <LCD_WriteReg>
*******************************************************************************/
void LCD_Clear(alt_u16 Color)
{
    alt_u32 index=0;
    
    if( LCD_Code == HX8347D || LCD_Code == HX8347A )
 4000c64:	00000306 	br	4000c74 <LCD_Clear+0xa8>
        LCD_WriteReg(0x08,0x01);
        LCD_WriteReg(0x09,0x3F);
    }
    else
    {
        LCD_SetCursor(0,0); 
 4000c68:	0009883a 	mov	r4,zero
 4000c6c:	000b883a 	mov	r5,zero
 4000c70:	400041c0 	call	400041c <LCD_SetCursor>
    }
    Clr_Cs; 
 4000c74:	00863404 	movi	r2,6352
 4000c78:	10000035 	stwio	zero,0(r2)
    LCD_WriteIndex(0x0022);
 4000c7c:	01000884 	movi	r4,34
 4000c80:	400024c0 	call	400024c <LCD_WriteIndex>
    for( index = 0; index < MAX_X * MAX_Y; index++ )
 4000c84:	e03ffe15 	stw	zero,-8(fp)
 4000c88:	00000506 	br	4000ca0 <LCD_Clear+0xd4>
    {
        LCD_WriteData(Color);
 4000c8c:	e13fff0b 	ldhu	r4,-4(fp)
 4000c90:	40002ac0 	call	40002ac <LCD_WriteData>
    {
        LCD_SetCursor(0,0); 
    }
    Clr_Cs; 
    LCD_WriteIndex(0x0022);
    for( index = 0; index < MAX_X * MAX_Y; index++ )
 4000c94:	e0bffe17 	ldw	r2,-8(fp)
 4000c98:	10800044 	addi	r2,r2,1
 4000c9c:	e0bffe15 	stw	r2,-8(fp)
 4000ca0:	e0fffe17 	ldw	r3,-8(fp)
 4000ca4:	00800074 	movhi	r2,1
 4000ca8:	108affc4 	addi	r2,r2,11263
 4000cac:	10fff72e 	bgeu	r2,r3,4000c8c <LCD_Clear+0xc0>
    {
        LCD_WriteData(Color);
    }
    Set_Cs;
 4000cb0:	00c63404 	movi	r3,6352
 4000cb4:	00800044 	movi	r2,1
 4000cb8:	18800035 	stwio	r2,0(r3)
}
 4000cbc:	e037883a 	mov	sp,fp
 4000cc0:	dfc00117 	ldw	ra,4(sp)
 4000cc4:	df000017 	ldw	fp,0(sp)
 4000cc8:	dec00204 	addi	sp,sp,8
 4000ccc:	f800283a 	ret

04000cd0 <LCD_show_test>:
void LCD_show_test()
{ alt_u32 index=0,i;
 4000cd0:	defffc04 	addi	sp,sp,-16
 4000cd4:	dfc00315 	stw	ra,12(sp)
 4000cd8:	df000215 	stw	fp,8(sp)
 4000cdc:	df000204 	addi	fp,sp,8
 4000ce0:	e03fff15 	stw	zero,-4(fp)
    if( LCD_Code == HX8347D || LCD_Code == HX8347A )
 4000ce4:	d0a01203 	ldbu	r2,-32696(gp)
 4000ce8:	10803fcc 	andi	r2,r2,255
 4000cec:	108002a0 	cmpeqi	r2,r2,10
 4000cf0:	1000041e 	bne	r2,zero,4000d04 <LCD_show_test+0x34>
 4000cf4:	d0a01203 	ldbu	r2,-32696(gp)
 4000cf8:	10803fcc 	andi	r2,r2,255
 4000cfc:	108002d8 	cmpnei	r2,r2,11
 4000d00:	1000191e 	bne	r2,zero,4000d68 <LCD_show_test+0x98>
    {
        LCD_WriteReg(0x02,0x00);
 4000d04:	01000084 	movi	r4,2
 4000d08:	000b883a 	mov	r5,zero
 4000d0c:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x03,0x00);
 4000d10:	010000c4 	movi	r4,3
 4000d14:	000b883a 	mov	r5,zero
 4000d18:	400037c0 	call	400037c <LCD_WriteReg>
                        
        LCD_WriteReg(0x04,0x00);
 4000d1c:	01000104 	movi	r4,4
 4000d20:	000b883a 	mov	r5,zero
 4000d24:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x05,0xEF);
 4000d28:	01000144 	movi	r4,5
 4000d2c:	01403bc4 	movi	r5,239
 4000d30:	400037c0 	call	400037c <LCD_WriteReg>
                         
        LCD_WriteReg(0x06,0x00);
 4000d34:	01000184 	movi	r4,6
 4000d38:	000b883a 	mov	r5,zero
 4000d3c:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x07,0x00);
 4000d40:	010001c4 	movi	r4,7
 4000d44:	000b883a 	mov	r5,zero
 4000d48:	400037c0 	call	400037c <LCD_WriteReg>
                       
        LCD_WriteReg(0x08,0x01);
 4000d4c:	01000204 	movi	r4,8
 4000d50:	01400044 	movi	r5,1
 4000d54:	400037c0 	call	400037c <LCD_WriteReg>
        LCD_WriteReg(0x09,0x3F);
 4000d58:	01000244 	movi	r4,9
 4000d5c:	01400fc4 	movi	r5,63
 4000d60:	400037c0 	call	400037c <LCD_WriteReg>
    }
    Set_Cs;
}
void LCD_show_test()
{ alt_u32 index=0,i;
    if( LCD_Code == HX8347D || LCD_Code == HX8347A )
 4000d64:	00000306 	br	4000d74 <LCD_show_test+0xa4>
        LCD_WriteReg(0x08,0x01);
        LCD_WriteReg(0x09,0x3F);
    }
    else
    {
        LCD_SetCursor(0,0); 
 4000d68:	0009883a 	mov	r4,zero
 4000d6c:	000b883a 	mov	r5,zero
 4000d70:	400041c0 	call	400041c <LCD_SetCursor>
    }
    Clr_Cs; 
 4000d74:	00863404 	movi	r2,6352
 4000d78:	10000035 	stwio	zero,0(r2)
    LCD_WriteIndex(0x0022);
 4000d7c:	01000884 	movi	r4,34
 4000d80:	400024c0 	call	400024c <LCD_WriteIndex>
  for( i = 0; i< 8; i++ )
 4000d84:	e03ffe15 	stw	zero,-8(fp)
 4000d88:	00001706 	br	4000de8 <LCD_show_test+0x118>
    for( index = i*40 * 240; index < (i+1)*40 * 240; index++ )
 4000d8c:	e0bffe17 	ldw	r2,-8(fp)
 4000d90:	10896024 	muli	r2,r2,9600
 4000d94:	e0bfff15 	stw	r2,-4(fp)
 4000d98:	00000b06 	br	4000dc8 <LCD_show_test+0xf8>
    {
        LCD_WriteData(colorfol1[i]);
 4000d9c:	e0bffe17 	ldw	r2,-8(fp)
 4000da0:	00c10074 	movhi	r3,1025
 4000da4:	18c43604 	addi	r3,r3,4312
 4000da8:	1085883a 	add	r2,r2,r2
 4000dac:	10c5883a 	add	r2,r2,r3
 4000db0:	1080000b 	ldhu	r2,0(r2)
 4000db4:	113fffcc 	andi	r4,r2,65535
 4000db8:	40002ac0 	call	40002ac <LCD_WriteData>
        LCD_SetCursor(0,0); 
    }
    Clr_Cs; 
    LCD_WriteIndex(0x0022);
  for( i = 0; i< 8; i++ )
    for( index = i*40 * 240; index < (i+1)*40 * 240; index++ )
 4000dbc:	e0bfff17 	ldw	r2,-4(fp)
 4000dc0:	10800044 	addi	r2,r2,1
 4000dc4:	e0bfff15 	stw	r2,-4(fp)
 4000dc8:	e0bffe17 	ldw	r2,-8(fp)
 4000dcc:	10896024 	muli	r2,r2,9600
 4000dd0:	10c96004 	addi	r3,r2,9600
 4000dd4:	e0bfff17 	ldw	r2,-4(fp)
 4000dd8:	10fff036 	bltu	r2,r3,4000d9c <LCD_show_test+0xcc>
    {
        LCD_SetCursor(0,0); 
    }
    Clr_Cs; 
    LCD_WriteIndex(0x0022);
  for( i = 0; i< 8; i++ )
 4000ddc:	e0bffe17 	ldw	r2,-8(fp)
 4000de0:	10800044 	addi	r2,r2,1
 4000de4:	e0bffe15 	stw	r2,-8(fp)
 4000de8:	e0bffe17 	ldw	r2,-8(fp)
 4000dec:	10800230 	cmpltui	r2,r2,8
 4000df0:	103fe61e 	bne	r2,zero,4000d8c <LCD_show_test+0xbc>
    for( index = i*40 * 240; index < (i+1)*40 * 240; index++ )
    {
        LCD_WriteData(colorfol1[i]);
    }
    while(1);
 4000df4:	003fff06 	br	4000df4 <LCD_show_test+0x124>

04000df8 <LCD_BGR2RGB>:
* Output         : None
* Return         : RGB color
* Attention      :
*******************************************************************************/
alt_u16 LCD_BGR2RGB(alt_u16 color)
{
 4000df8:	defffc04 	addi	sp,sp,-16
 4000dfc:	df000315 	stw	fp,12(sp)
 4000e00:	df000304 	addi	fp,sp,12
 4000e04:	e13fff0d 	sth	r4,-4(fp)
    alt_u16  r, g, b, rgb;

    b = ( color>>0 )  & 0x1f;
 4000e08:	e0bfff0b 	ldhu	r2,-4(fp)
 4000e0c:	108007cc 	andi	r2,r2,31
 4000e10:	e0bffd8d 	sth	r2,-10(fp)
    g = ( color>>5 )  & 0x3f;
 4000e14:	e0bfff0b 	ldhu	r2,-4(fp)
 4000e18:	1004d17a 	srli	r2,r2,5
 4000e1c:	10800fcc 	andi	r2,r2,63
 4000e20:	e0bffe0d 	sth	r2,-8(fp)
    r = ( color>>11 ) & 0x1f;
 4000e24:	e0bfff0b 	ldhu	r2,-4(fp)
 4000e28:	1004d2fa 	srli	r2,r2,11
 4000e2c:	108007cc 	andi	r2,r2,31
 4000e30:	e0bffe8d 	sth	r2,-6(fp)
    
    rgb =  (b<<11) + (g<<5) + (r<<0);
 4000e34:	e0bffd8b 	ldhu	r2,-10(fp)
 4000e38:	100492fa 	slli	r2,r2,11
 4000e3c:	1007883a 	mov	r3,r2
 4000e40:	e0bffe0b 	ldhu	r2,-8(fp)
 4000e44:	1004917a 	slli	r2,r2,5
 4000e48:	1885883a 	add	r2,r3,r2
 4000e4c:	1007883a 	mov	r3,r2
 4000e50:	e0bffe8b 	ldhu	r2,-6(fp)
 4000e54:	1885883a 	add	r2,r3,r2
 4000e58:	e0bffd0d 	sth	r2,-12(fp)

    return( rgb );
 4000e5c:	e0bffd0b 	ldhu	r2,-12(fp)
}
 4000e60:	e037883a 	mov	sp,fp
 4000e64:	df000017 	ldw	fp,0(sp)
 4000e68:	dec00104 	addi	sp,sp,4
 4000e6c:	f800283a 	ret

04000e70 <LCD_GetPoint>:
* Output         : None
* Return         : Screen Color
* Attention      : None
*******************************************************************************/
alt_u16 LCD_GetPoint(alt_u16 Xpos, alt_u16 Ypos)
{
 4000e70:	defff804 	addi	sp,sp,-32
 4000e74:	dfc00715 	stw	ra,28(sp)
 4000e78:	df000615 	stw	fp,24(sp)
 4000e7c:	df000604 	addi	fp,sp,24
 4000e80:	e13ffc0d 	sth	r4,-16(fp)
 4000e84:	e17ffd0d 	sth	r5,-12(fp)
    alt_u16 dummy;

    // Set the cursor position on the LCD
    LCD_SetCursor(Xpos, Ypos);
 4000e88:	e13ffc0b 	ldhu	r4,-16(fp)
 4000e8c:	e17ffd0b 	ldhu	r5,-12(fp)
 4000e90:	400041c0 	call	400041c <LCD_SetCursor>

    // Clear the chip select (CS) signal
    Clr_Cs;
 4000e94:	00863404 	movi	r2,6352
 4000e98:	10000035 	stwio	zero,0(r2)

    // Send the command to read the pixel color
    LCD_WriteIndex(0x0022);
 4000e9c:	01000884 	movi	r4,34
 4000ea0:	400024c0 	call	400024c <LCD_WriteIndex>

    // Switch statement based on the LCD controller code
    switch (LCD_Code)
 4000ea4:	d0a01203 	ldbu	r2,-32696(gp)
 4000ea8:	10803fcc 	andi	r2,r2,255
 4000eac:	10bfff04 	addi	r2,r2,-4
 4000eb0:	e0bfff15 	stw	r2,-4(fp)
 4000eb4:	e0ffff17 	ldw	r3,-4(fp)
 4000eb8:	18800268 	cmpgeui	r2,r3,9
 4000ebc:	1000381e 	bne	r2,zero,4000fa0 <LCD_GetPoint+0x130>
 4000ec0:	e13fff17 	ldw	r4,-4(fp)
 4000ec4:	e13fff17 	ldw	r4,-4(fp)
 4000ec8:	2105883a 	add	r2,r4,r4
 4000ecc:	1087883a 	add	r3,r2,r2
 4000ed0:	00810034 	movhi	r2,1024
 4000ed4:	1083b904 	addi	r2,r2,3812
 4000ed8:	1885883a 	add	r2,r3,r2
 4000edc:	10800017 	ldw	r2,0(r2)
 4000ee0:	1000683a 	jmp	r2
 4000ee4:	04000f08 	cmpgei	r16,zero,60
 4000ee8:	04000f08 	cmpgei	r16,zero,60
 4000eec:	04000f08 	cmpgei	r16,zero,60
 4000ef0:	04000f08 	cmpgei	r16,zero,60
 4000ef4:	04000fa0 	cmpeqi	r16,zero,62
 4000ef8:	04000fa0 	cmpeqi	r16,zero,62
 4000efc:	04000f30 	cmpltui	r16,zero,60
 4000f00:	04000f30 	cmpltui	r16,zero,60
 4000f04:	04000f08 	cmpgei	r16,zero,60
        case LGDP4531:
        case LGDP4535:
        case SSD1289:
        case SSD1298:
            // Read dummy data twice (the actual pixel color)
            dummy = LCD_ReadData();
 4000f08:	40003040 	call	4000304 <LCD_ReadData>
 4000f0c:	e0bffb0d 	sth	r2,-20(fp)
            dummy = LCD_ReadData();
 4000f10:	40003040 	call	4000304 <LCD_ReadData>
 4000f14:	e0bffb0d 	sth	r2,-20(fp)
            // Set the chip select (CS) signal
            Set_Cs;
 4000f18:	00c63404 	movi	r3,6352
 4000f1c:	00800044 	movi	r2,1
 4000f20:	18800035 	stwio	r2,0(r3)
            return dummy;
 4000f24:	e0bffb0b 	ldhu	r2,-20(fp)
 4000f28:	e0bffe15 	stw	r2,-8(fp)
 4000f2c:	00002706 	br	4000fcc <LCD_GetPoint+0x15c>
        case HX8347A:
        case HX8347D:
            // Read RGB components of the pixel color and combine them
            {
            	alt_u8 red, green, blue;
                red = LCD_ReadData() >> 3;
 4000f30:	40003040 	call	4000304 <LCD_ReadData>
 4000f34:	10bfffcc 	andi	r2,r2,65535
 4000f38:	1004d0fa 	srli	r2,r2,3
 4000f3c:	e0bffa85 	stb	r2,-22(fp)
                green = LCD_ReadData() >> 3;
 4000f40:	40003040 	call	4000304 <LCD_ReadData>
 4000f44:	10bfffcc 	andi	r2,r2,65535
 4000f48:	1004d0fa 	srli	r2,r2,3
 4000f4c:	e0bffa45 	stb	r2,-23(fp)
                blue = LCD_ReadData() >> 2;
 4000f50:	40003040 	call	4000304 <LCD_ReadData>
 4000f54:	10bfffcc 	andi	r2,r2,65535
 4000f58:	1004d0ba 	srli	r2,r2,2
 4000f5c:	e0bffa05 	stb	r2,-24(fp)
                dummy = (green << 11) | (blue << 5) | red;
 4000f60:	e0bffa43 	ldbu	r2,-23(fp)
 4000f64:	100492fa 	slli	r2,r2,11
 4000f68:	1007883a 	mov	r3,r2
 4000f6c:	e0bffa03 	ldbu	r2,-24(fp)
 4000f70:	1004917a 	slli	r2,r2,5
 4000f74:	1884b03a 	or	r2,r3,r2
 4000f78:	1007883a 	mov	r3,r2
 4000f7c:	e0bffa83 	ldbu	r2,-22(fp)
 4000f80:	1884b03a 	or	r2,r3,r2
 4000f84:	e0bffb0d 	sth	r2,-20(fp)
            }
            // Set the chip select (CS) signal
            Set_Cs;
 4000f88:	00c63404 	movi	r3,6352
 4000f8c:	00800044 	movi	r2,1
 4000f90:	18800035 	stwio	r2,0(r3)
            return dummy;
 4000f94:	e0fffb0b 	ldhu	r3,-20(fp)
 4000f98:	e0fffe15 	stw	r3,-8(fp)
 4000f9c:	00000b06 	br	4000fcc <LCD_GetPoint+0x15c>

        default:
            // Default case for other LCD controllers
            // Read dummy data twice and convert the color format
            dummy = LCD_ReadData();
 4000fa0:	40003040 	call	4000304 <LCD_ReadData>
 4000fa4:	e0bffb0d 	sth	r2,-20(fp)
            dummy = LCD_ReadData();
 4000fa8:	40003040 	call	4000304 <LCD_ReadData>
 4000fac:	e0bffb0d 	sth	r2,-20(fp)
            // Set the chip select (CS) signal
            Set_Cs;
 4000fb0:	00c63404 	movi	r3,6352
 4000fb4:	00800044 	movi	r2,1
 4000fb8:	18800035 	stwio	r2,0(r3)
            // Convert color format from BGR to RGB
            return LCD_BGR2RGB(dummy);
 4000fbc:	e13ffb0b 	ldhu	r4,-20(fp)
 4000fc0:	4000df80 	call	4000df8 <LCD_BGR2RGB>
 4000fc4:	10bfffcc 	andi	r2,r2,65535
 4000fc8:	e0bffe15 	stw	r2,-8(fp)
 4000fcc:	e0bffe17 	ldw	r2,-8(fp)
    }
}
 4000fd0:	e037883a 	mov	sp,fp
 4000fd4:	dfc00117 	ldw	ra,4(sp)
 4000fd8:	df000017 	ldw	fp,0(sp)
 4000fdc:	dec00204 	addi	sp,sp,8
 4000fe0:	f800283a 	ret

04000fe4 <LCD_SetPoint>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void LCD_SetPoint(alt_u16 Xpos,alt_u16 Ypos,alt_u16 point)
{
 4000fe4:	defffb04 	addi	sp,sp,-20
 4000fe8:	dfc00415 	stw	ra,16(sp)
 4000fec:	df000315 	stw	fp,12(sp)
 4000ff0:	df000304 	addi	fp,sp,12
 4000ff4:	e13ffd0d 	sth	r4,-12(fp)
 4000ff8:	e17ffe0d 	sth	r5,-8(fp)
 4000ffc:	e1bfff0d 	sth	r6,-4(fp)
    if( Xpos >= MAX_X || Ypos >= MAX_Y )
 4001000:	e0bffd0b 	ldhu	r2,-12(fp)
 4001004:	10805028 	cmpgeui	r2,r2,320
 4001008:	10000a1e 	bne	r2,zero,4001034 <LCD_SetPoint+0x50>
 400100c:	e0bffe0b 	ldhu	r2,-8(fp)
 4001010:	10803c30 	cmpltui	r2,r2,240
 4001014:	1000011e 	bne	r2,zero,400101c <LCD_SetPoint+0x38>
    {
        return;
 4001018:	00000606 	br	4001034 <LCD_SetPoint+0x50>
    }
    LCD_SetCursor(Xpos,Ypos);
 400101c:	e13ffd0b 	ldhu	r4,-12(fp)
 4001020:	e17ffe0b 	ldhu	r5,-8(fp)
 4001024:	400041c0 	call	400041c <LCD_SetCursor>
    LCD_WriteReg(0x0022,point);
 4001028:	e17fff0b 	ldhu	r5,-4(fp)
 400102c:	01000884 	movi	r4,34
 4001030:	400037c0 	call	400037c <LCD_WriteReg>
}
 4001034:	e037883a 	mov	sp,fp
 4001038:	dfc00117 	ldw	ra,4(sp)
 400103c:	df000017 	ldw	fp,0(sp)
 4001040:	dec00204 	addi	sp,sp,8
 4001044:	f800283a 	ret

04001048 <LCD_DrawLine>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void LCD_DrawLine(alt_u16 x0, alt_u16 y0, alt_u16 x1, alt_u16 y1, alt_u16 color)
{
 4001048:	defff604 	addi	sp,sp,-40
 400104c:	dfc00915 	stw	ra,36(sp)
 4001050:	df000815 	stw	fp,32(sp)
 4001054:	df000804 	addi	fp,sp,32
 4001058:	e0800217 	ldw	r2,8(fp)
 400105c:	e13ffb0d 	sth	r4,-20(fp)
 4001060:	e17ffc0d 	sth	r5,-16(fp)
 4001064:	e1bffd0d 	sth	r6,-12(fp)
 4001068:	e1fffe0d 	sth	r7,-8(fp)
 400106c:	e0bfff0d 	sth	r2,-4(fp)
    short dx, dy;
    short temp;

    // Swap coordinates if needed to ensure x0 <= x1 and y0 <= y1
    if (x0 > x1)
 4001070:	e0fffb0b 	ldhu	r3,-20(fp)
 4001074:	e0bffd0b 	ldhu	r2,-12(fp)
 4001078:	10c0062e 	bgeu	r2,r3,4001094 <LCD_DrawLine+0x4c>
    {
        short temp = x1;
 400107c:	e0bffd0b 	ldhu	r2,-12(fp)
 4001080:	e0bff88d 	sth	r2,-30(fp)
        x1 = x0;
 4001084:	e0bffb0b 	ldhu	r2,-20(fp)
 4001088:	e0bffd0d 	sth	r2,-12(fp)
        x0 = temp;
 400108c:	e0bff88b 	ldhu	r2,-30(fp)
 4001090:	e0bffb0d 	sth	r2,-20(fp)
    }
    if (y0 > y1)
 4001094:	e0fffc0b 	ldhu	r3,-16(fp)
 4001098:	e0bffe0b 	ldhu	r2,-8(fp)
 400109c:	10c0062e 	bgeu	r2,r3,40010b8 <LCD_DrawLine+0x70>
    {
        short temp = y1;
 40010a0:	e0bffe0b 	ldhu	r2,-8(fp)
 40010a4:	e0bff80d 	sth	r2,-32(fp)
        y1 = y0;
 40010a8:	e0bffc0b 	ldhu	r2,-16(fp)
 40010ac:	e0bffe0d 	sth	r2,-8(fp)
        y0 = temp;
 40010b0:	e0bff80b 	ldhu	r2,-32(fp)
 40010b4:	e0bffc0d 	sth	r2,-16(fp)
    }

    dx = x1 - x0;
 40010b8:	e0fffd0b 	ldhu	r3,-12(fp)
 40010bc:	e0bffb0b 	ldhu	r2,-20(fp)
 40010c0:	1885c83a 	sub	r2,r3,r2
 40010c4:	e0bffa0d 	sth	r2,-24(fp)
    dy = y1 - y0;
 40010c8:	e0fffe0b 	ldhu	r3,-8(fp)
 40010cc:	e0bffc0b 	ldhu	r2,-16(fp)
 40010d0:	1885c83a 	sub	r2,r3,r2
 40010d4:	e0bff98d 	sth	r2,-26(fp)

    // Handle special cases for lines with zero slope
    if (dx == 0)
 40010d8:	e0bffa0f 	ldh	r2,-24(fp)
 40010dc:	1004c03a 	cmpne	r2,r2,zero
 40010e0:	10000b1e 	bne	r2,zero,4001110 <LCD_DrawLine+0xc8>
    {
        do
        {
            LCD_SetPoint(x0, y0, color);
 40010e4:	e13ffb0b 	ldhu	r4,-20(fp)
 40010e8:	e17ffc0b 	ldhu	r5,-16(fp)
 40010ec:	e1bfff0b 	ldhu	r6,-4(fp)
 40010f0:	4000fe40 	call	4000fe4 <LCD_SetPoint>
            y0++;
 40010f4:	e0bffc0b 	ldhu	r2,-16(fp)
 40010f8:	10800044 	addi	r2,r2,1
 40010fc:	e0bffc0d 	sth	r2,-16(fp)
        } while (y1 >= y0);
 4001100:	e0fffe0b 	ldhu	r3,-8(fp)
 4001104:	e0bffc0b 	ldhu	r2,-16(fp)
 4001108:	18bff62e 	bgeu	r3,r2,40010e4 <LCD_DrawLine+0x9c>
        return;
 400110c:	00006606 	br	40012a8 <LCD_DrawLine+0x260>
    }
    if (dy == 0)
 4001110:	e0bff98f 	ldh	r2,-26(fp)
 4001114:	1004c03a 	cmpne	r2,r2,zero
 4001118:	10000b1e 	bne	r2,zero,4001148 <LCD_DrawLine+0x100>
    {
        do
        {
            LCD_SetPoint(x0, y0, color);
 400111c:	e13ffb0b 	ldhu	r4,-20(fp)
 4001120:	e17ffc0b 	ldhu	r5,-16(fp)
 4001124:	e1bfff0b 	ldhu	r6,-4(fp)
 4001128:	4000fe40 	call	4000fe4 <LCD_SetPoint>
            x0++;
 400112c:	e0bffb0b 	ldhu	r2,-20(fp)
 4001130:	10800044 	addi	r2,r2,1
 4001134:	e0bffb0d 	sth	r2,-20(fp)
        } while (x1 >= x0);
 4001138:	e0fffd0b 	ldhu	r3,-12(fp)
 400113c:	e0bffb0b 	ldhu	r2,-20(fp)
 4001140:	18bff62e 	bgeu	r3,r2,400111c <LCD_DrawLine+0xd4>
        return;
 4001144:	00005806 	br	40012a8 <LCD_DrawLine+0x260>
    }

    // Bresenham's line algorithm
    if (dx > dy)
 4001148:	e0fffa0f 	ldh	r3,-24(fp)
 400114c:	e0bff98f 	ldh	r2,-26(fp)
 4001150:	10c02b0e 	bge	r2,r3,4001200 <LCD_DrawLine+0x1b8>
    {
        temp = 2 * dy - dx;
 4001154:	e0bff98f 	ldh	r2,-26(fp)
 4001158:	1085883a 	add	r2,r2,r2
 400115c:	1007883a 	mov	r3,r2
 4001160:	e0bffa0b 	ldhu	r2,-24(fp)
 4001164:	1885c83a 	sub	r2,r3,r2
 4001168:	e0bff90d 	sth	r2,-28(fp)
        while (x0 != x1)
 400116c:	00001c06 	br	40011e0 <LCD_DrawLine+0x198>
        {
            LCD_SetPoint(x0, y0, color);
 4001170:	e13ffb0b 	ldhu	r4,-20(fp)
 4001174:	e17ffc0b 	ldhu	r5,-16(fp)
 4001178:	e1bfff0b 	ldhu	r6,-4(fp)
 400117c:	4000fe40 	call	4000fe4 <LCD_SetPoint>
            x0++;
 4001180:	e0bffb0b 	ldhu	r2,-20(fp)
 4001184:	10800044 	addi	r2,r2,1
 4001188:	e0bffb0d 	sth	r2,-20(fp)
            if (temp > 0)
 400118c:	e0bff90f 	ldh	r2,-28(fp)
 4001190:	10800050 	cmplti	r2,r2,1
 4001194:	10000c1e 	bne	r2,zero,40011c8 <LCD_DrawLine+0x180>
            {
                y0++;
 4001198:	e0bffc0b 	ldhu	r2,-16(fp)
 400119c:	10800044 	addi	r2,r2,1
 40011a0:	e0bffc0d 	sth	r2,-16(fp)
                temp += 2 * dy - 2 * dx;
 40011a4:	e0fff98f 	ldh	r3,-26(fp)
 40011a8:	e0bffa0f 	ldh	r2,-24(fp)
 40011ac:	1885c83a 	sub	r2,r3,r2
 40011b0:	1085883a 	add	r2,r2,r2
 40011b4:	1007883a 	mov	r3,r2
 40011b8:	e0bff90b 	ldhu	r2,-28(fp)
 40011bc:	1885883a 	add	r2,r3,r2
 40011c0:	e0bff90d 	sth	r2,-28(fp)
 40011c4:	00000606 	br	40011e0 <LCD_DrawLine+0x198>
            }
            else
            {
                temp += 2 * dy;
 40011c8:	e0bff98f 	ldh	r2,-26(fp)
 40011cc:	1085883a 	add	r2,r2,r2
 40011d0:	1007883a 	mov	r3,r2
 40011d4:	e0bff90b 	ldhu	r2,-28(fp)
 40011d8:	1885883a 	add	r2,r3,r2
 40011dc:	e0bff90d 	sth	r2,-28(fp)

    // Bresenham's line algorithm
    if (dx > dy)
    {
        temp = 2 * dy - dx;
        while (x0 != x1)
 40011e0:	e0fffb0b 	ldhu	r3,-20(fp)
 40011e4:	e0bffd0b 	ldhu	r2,-12(fp)
 40011e8:	18bfe11e 	bne	r3,r2,4001170 <LCD_DrawLine+0x128>
            else
            {
                temp += 2 * dy;
            }
        }
        LCD_SetPoint(x0, y0, color);
 40011ec:	e13ffb0b 	ldhu	r4,-20(fp)
 40011f0:	e17ffc0b 	ldhu	r5,-16(fp)
 40011f4:	e1bfff0b 	ldhu	r6,-4(fp)
 40011f8:	4000fe40 	call	4000fe4 <LCD_SetPoint>
 40011fc:	00002a06 	br	40012a8 <LCD_DrawLine+0x260>
    }
    else
    {
        temp = 2 * dx - dy;
 4001200:	e0bffa0f 	ldh	r2,-24(fp)
 4001204:	1085883a 	add	r2,r2,r2
 4001208:	1007883a 	mov	r3,r2
 400120c:	e0bff98b 	ldhu	r2,-26(fp)
 4001210:	1885c83a 	sub	r2,r3,r2
 4001214:	e0bff90d 	sth	r2,-28(fp)
        while (y0 != y1)
 4001218:	00001c06 	br	400128c <LCD_DrawLine+0x244>
        {
            LCD_SetPoint(x0, y0, color);
 400121c:	e13ffb0b 	ldhu	r4,-20(fp)
 4001220:	e17ffc0b 	ldhu	r5,-16(fp)
 4001224:	e1bfff0b 	ldhu	r6,-4(fp)
 4001228:	4000fe40 	call	4000fe4 <LCD_SetPoint>
            y0++;
 400122c:	e0bffc0b 	ldhu	r2,-16(fp)
 4001230:	10800044 	addi	r2,r2,1
 4001234:	e0bffc0d 	sth	r2,-16(fp)
            if (temp > 0)
 4001238:	e0bff90f 	ldh	r2,-28(fp)
 400123c:	10800050 	cmplti	r2,r2,1
 4001240:	10000c1e 	bne	r2,zero,4001274 <LCD_DrawLine+0x22c>
            {
                x0++;
 4001244:	e0bffb0b 	ldhu	r2,-20(fp)
 4001248:	10800044 	addi	r2,r2,1
 400124c:	e0bffb0d 	sth	r2,-20(fp)
                temp += 2 * dy - 2 * dx;
 4001250:	e0fff98f 	ldh	r3,-26(fp)
 4001254:	e0bffa0f 	ldh	r2,-24(fp)
 4001258:	1885c83a 	sub	r2,r3,r2
 400125c:	1085883a 	add	r2,r2,r2
 4001260:	1007883a 	mov	r3,r2
 4001264:	e0bff90b 	ldhu	r2,-28(fp)
 4001268:	1885883a 	add	r2,r3,r2
 400126c:	e0bff90d 	sth	r2,-28(fp)
 4001270:	00000606 	br	400128c <LCD_DrawLine+0x244>
            }
            else
            {
                temp += 2 * dy;
 4001274:	e0bff98f 	ldh	r2,-26(fp)
 4001278:	1085883a 	add	r2,r2,r2
 400127c:	1007883a 	mov	r3,r2
 4001280:	e0bff90b 	ldhu	r2,-28(fp)
 4001284:	1885883a 	add	r2,r3,r2
 4001288:	e0bff90d 	sth	r2,-28(fp)
        LCD_SetPoint(x0, y0, color);
    }
    else
    {
        temp = 2 * dx - dy;
        while (y0 != y1)
 400128c:	e0fffc0b 	ldhu	r3,-16(fp)
 4001290:	e0bffe0b 	ldhu	r2,-8(fp)
 4001294:	18bfe11e 	bne	r3,r2,400121c <LCD_DrawLine+0x1d4>
            else
            {
                temp += 2 * dy;
            }
        }
        LCD_SetPoint(x0, y0, color);
 4001298:	e13ffb0b 	ldhu	r4,-20(fp)
 400129c:	e17ffc0b 	ldhu	r5,-16(fp)
 40012a0:	e1bfff0b 	ldhu	r6,-4(fp)
 40012a4:	4000fe40 	call	4000fe4 <LCD_SetPoint>
    }
}
 40012a8:	e037883a 	mov	sp,fp
 40012ac:	dfc00117 	ldw	ra,4(sp)
 40012b0:	df000017 	ldw	fp,0(sp)
 40012b4:	dec00204 	addi	sp,sp,8
 40012b8:	f800283a 	ret

040012bc <PutChar>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void PutChar( alt_u16 Xpos, alt_u16 Ypos, alt_u8 ASCI, alt_u16 charColor, alt_u16 bkColor )
{
 40012bc:	defff304 	addi	sp,sp,-52
 40012c0:	dfc00c15 	stw	ra,48(sp)
 40012c4:	df000b15 	stw	fp,44(sp)
 40012c8:	df000b04 	addi	fp,sp,44
 40012cc:	e0800217 	ldw	r2,8(fp)
 40012d0:	e13ffb0d 	sth	r4,-20(fp)
 40012d4:	e17ffc0d 	sth	r5,-16(fp)
 40012d8:	e1bffd05 	stb	r6,-12(fp)
 40012dc:	e1fffe0d 	sth	r7,-8(fp)
 40012e0:	e0bfff0d 	sth	r2,-4(fp)
    alt_u16 i, j;
    alt_u8 buffer[16], tmp_char;
    GetASCIICode(buffer,ASCI);
 40012e4:	e17ffd03 	ldbu	r5,-12(fp)
 40012e8:	e13ff684 	addi	r4,fp,-38
 40012ec:	40001ec0 	call	40001ec <GetASCIICode>
    for( i=0; i<16; i++ )
 40012f0:	e03ff60d 	sth	zero,-40(fp)
 40012f4:	00002e06 	br	40013b0 <PutChar+0xf4>
    {
        tmp_char = buffer[i];
 40012f8:	e0fff60b 	ldhu	r3,-40(fp)
 40012fc:	e0bff684 	addi	r2,fp,-38
 4001300:	10c5883a 	add	r2,r2,r3
 4001304:	10800003 	ldbu	r2,0(r2)
 4001308:	e0bff505 	stb	r2,-44(fp)
        for( j=0; j<8; j++ )
 400130c:	e03ff58d 	sth	zero,-42(fp)
 4001310:	00002106 	br	4001398 <PutChar+0xdc>
        {
            if( (tmp_char >> 7 - j) & 0x01 == 0x01 )
 4001314:	e13ff503 	ldbu	r4,-44(fp)
 4001318:	e0fff58b 	ldhu	r3,-42(fp)
 400131c:	008001c4 	movi	r2,7
 4001320:	10c5c83a 	sub	r2,r2,r3
 4001324:	2085d83a 	sra	r2,r4,r2
 4001328:	1080004c 	andi	r2,r2,1
 400132c:	10803fcc 	andi	r2,r2,255
 4001330:	1005003a 	cmpeq	r2,r2,zero
 4001334:	10000b1e 	bne	r2,zero,4001364 <PutChar+0xa8>
            {
                LCD_SetPoint( Xpos + j, Ypos + i, charColor );
 4001338:	e0fffb0b 	ldhu	r3,-20(fp)
 400133c:	e0bff58b 	ldhu	r2,-42(fp)
 4001340:	1885883a 	add	r2,r3,r2
 4001344:	113fffcc 	andi	r4,r2,65535
 4001348:	e0fffc0b 	ldhu	r3,-16(fp)
 400134c:	e0bff60b 	ldhu	r2,-40(fp)
 4001350:	1885883a 	add	r2,r3,r2
 4001354:	117fffcc 	andi	r5,r2,65535
 4001358:	e1bffe0b 	ldhu	r6,-8(fp)
 400135c:	4000fe40 	call	4000fe4 <LCD_SetPoint>
 4001360:	00000a06 	br	400138c <PutChar+0xd0>
            }
            else
            {
                LCD_SetPoint( Xpos + j, Ypos + i, bkColor );
 4001364:	e0fffb0b 	ldhu	r3,-20(fp)
 4001368:	e0bff58b 	ldhu	r2,-42(fp)
 400136c:	1885883a 	add	r2,r3,r2
 4001370:	113fffcc 	andi	r4,r2,65535
 4001374:	e0fffc0b 	ldhu	r3,-16(fp)
 4001378:	e0bff60b 	ldhu	r2,-40(fp)
 400137c:	1885883a 	add	r2,r3,r2
 4001380:	117fffcc 	andi	r5,r2,65535
 4001384:	e1bfff0b 	ldhu	r6,-4(fp)
 4001388:	4000fe40 	call	4000fe4 <LCD_SetPoint>
    alt_u8 buffer[16], tmp_char;
    GetASCIICode(buffer,ASCI);
    for( i=0; i<16; i++ )
    {
        tmp_char = buffer[i];
        for( j=0; j<8; j++ )
 400138c:	e0bff58b 	ldhu	r2,-42(fp)
 4001390:	10800044 	addi	r2,r2,1
 4001394:	e0bff58d 	sth	r2,-42(fp)
 4001398:	e0bff58b 	ldhu	r2,-42(fp)
 400139c:	10800230 	cmpltui	r2,r2,8
 40013a0:	103fdc1e 	bne	r2,zero,4001314 <PutChar+0x58>
void PutChar( alt_u16 Xpos, alt_u16 Ypos, alt_u8 ASCI, alt_u16 charColor, alt_u16 bkColor )
{
    alt_u16 i, j;
    alt_u8 buffer[16], tmp_char;
    GetASCIICode(buffer,ASCI);
    for( i=0; i<16; i++ )
 40013a4:	e0bff60b 	ldhu	r2,-40(fp)
 40013a8:	10800044 	addi	r2,r2,1
 40013ac:	e0bff60d 	sth	r2,-40(fp)
 40013b0:	e0bff60b 	ldhu	r2,-40(fp)
 40013b4:	10800430 	cmpltui	r2,r2,16
 40013b8:	103fcf1e 	bne	r2,zero,40012f8 <PutChar+0x3c>
            {
                LCD_SetPoint( Xpos + j, Ypos + i, bkColor );
            }
        }
    }
}
 40013bc:	e037883a 	mov	sp,fp
 40013c0:	dfc00117 	ldw	ra,4(sp)
 40013c4:	df000017 	ldw	fp,0(sp)
 40013c8:	dec00204 	addi	sp,sp,8
 40013cc:	f800283a 	ret

040013d0 <GUI_Text>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void GUI_Text(alt_u16 Xpos, alt_u16 Ypos, alt_u8 *str,alt_u16 Color, alt_u16 bkColor)
{
 40013d0:	defff704 	addi	sp,sp,-36
 40013d4:	dfc00815 	stw	ra,32(sp)
 40013d8:	df000715 	stw	fp,28(sp)
 40013dc:	df000704 	addi	fp,sp,28
 40013e0:	e1bffd15 	stw	r6,-12(fp)
 40013e4:	e0800217 	ldw	r2,8(fp)
 40013e8:	e13ffb0d 	sth	r4,-20(fp)
 40013ec:	e17ffc0d 	sth	r5,-16(fp)
 40013f0:	e1fffe0d 	sth	r7,-8(fp)
 40013f4:	e0bfff0d 	sth	r2,-4(fp)
    alt_u8 TempChar;
    do
    {
        TempChar = *str++;  
 40013f8:	e0bffd17 	ldw	r2,-12(fp)
 40013fc:	10800003 	ldbu	r2,0(r2)
 4001400:	e0bffa05 	stb	r2,-24(fp)
 4001404:	e0bffd17 	ldw	r2,-12(fp)
 4001408:	10800044 	addi	r2,r2,1
 400140c:	e0bffd15 	stw	r2,-12(fp)
        PutChar( Xpos, Ypos, TempChar, Color, bkColor );    
 4001410:	e13ffb0b 	ldhu	r4,-20(fp)
 4001414:	e17ffc0b 	ldhu	r5,-16(fp)
 4001418:	e1bffa03 	ldbu	r6,-24(fp)
 400141c:	e1fffe0b 	ldhu	r7,-8(fp)
 4001420:	e0bfff0b 	ldhu	r2,-4(fp)
 4001424:	d8800015 	stw	r2,0(sp)
 4001428:	40012bc0 	call	40012bc <PutChar>
        if( Xpos < MAX_X - 8 )
 400142c:	e0bffb0b 	ldhu	r2,-20(fp)
 4001430:	10804e28 	cmpgeui	r2,r2,312
 4001434:	1000041e 	bne	r2,zero,4001448 <GUI_Text+0x78>
        {
            Xpos += 8;
 4001438:	e0bffb0b 	ldhu	r2,-20(fp)
 400143c:	10800204 	addi	r2,r2,8
 4001440:	e0bffb0d 	sth	r2,-20(fp)
 4001444:	00000a06 	br	4001470 <GUI_Text+0xa0>
        } 
        else if ( Ypos < MAX_Y - 16 )
 4001448:	e0bffc0b 	ldhu	r2,-16(fp)
 400144c:	10803828 	cmpgeui	r2,r2,224
 4001450:	1000051e 	bne	r2,zero,4001468 <GUI_Text+0x98>
        {
            Xpos = 0;
 4001454:	e03ffb0d 	sth	zero,-20(fp)
            Ypos += 16;
 4001458:	e0bffc0b 	ldhu	r2,-16(fp)
 400145c:	10800404 	addi	r2,r2,16
 4001460:	e0bffc0d 	sth	r2,-16(fp)
 4001464:	00000206 	br	4001470 <GUI_Text+0xa0>
        }   
        else
        {
            Xpos = 0;
 4001468:	e03ffb0d 	sth	zero,-20(fp)
            Ypos = 0;
 400146c:	e03ffc0d 	sth	zero,-16(fp)
        }    
    }
    while ( *str != 0 );
 4001470:	e0bffd17 	ldw	r2,-12(fp)
 4001474:	10800003 	ldbu	r2,0(r2)
 4001478:	10803fcc 	andi	r2,r2,255
 400147c:	1004c03a 	cmpne	r2,r2,zero
 4001480:	103fdd1e 	bne	r2,zero,40013f8 <GUI_Text+0x28>
}
 4001484:	e037883a 	mov	sp,fp
 4001488:	dfc00117 	ldw	ra,4(sp)
 400148c:	df000017 	ldw	fp,0(sp)
 4001490:	dec00204 	addi	sp,sp,8
 4001494:	f800283a 	ret

04001498 <saveCoordinatesToCSV>:
* Input          : None
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void saveCoordinatesToCSV(const alt_u32 *pointsBuffer, alt_u32 pointsCount) {
 4001498:	defff904 	addi	sp,sp,-28
 400149c:	dfc00615 	stw	ra,24(sp)
 40014a0:	df000515 	stw	fp,20(sp)
 40014a4:	df000504 	addi	fp,sp,20
 40014a8:	e13ffe15 	stw	r4,-8(fp)
 40014ac:	e17fff15 	stw	r5,-4(fp)
    //FILE *file = fopen(filename, "w");
    FILE *file = fopen("coordinates.csv", "w");
 40014b0:	01010074 	movhi	r4,1025
 40014b4:	21043a04 	addi	r4,r4,4328
 40014b8:	01410074 	movhi	r5,1025
 40014bc:	29443e04 	addi	r5,r5,4344
 40014c0:	40048f40 	call	40048f4 <fopen>
 40014c4:	e0bffd15 	stw	r2,-12(fp)
    alt_u32 i;
    if (file != NULL) {
 40014c8:	e0bffd17 	ldw	r2,-12(fp)
 40014cc:	1005003a 	cmpeq	r2,r2,zero
 40014d0:	1000251e 	bne	r2,zero,4001568 <saveCoordinatesToCSV+0xd0>
        // Write header if needed
        // fprintf(file, "X,Y\n");

        // Write coordinates
        for (i = 0; i < pointsCount; i++) {
 40014d4:	e03ffc15 	stw	zero,-16(fp)
 40014d8:	00001a06 	br	4001544 <saveCoordinatesToCSV+0xac>
            alt_u16 x = (alt_u16)(pointsBuffer[i] >> 16);
 40014dc:	e0bffc17 	ldw	r2,-16(fp)
 40014e0:	1085883a 	add	r2,r2,r2
 40014e4:	1085883a 	add	r2,r2,r2
 40014e8:	1007883a 	mov	r3,r2
 40014ec:	e0bffe17 	ldw	r2,-8(fp)
 40014f0:	1885883a 	add	r2,r3,r2
 40014f4:	10800017 	ldw	r2,0(r2)
 40014f8:	1004d43a 	srli	r2,r2,16
 40014fc:	e0bffb8d 	sth	r2,-18(fp)
            alt_u16 y = (alt_u16)(pointsBuffer[i] & 0xFFFF);
 4001500:	e0bffc17 	ldw	r2,-16(fp)
 4001504:	1085883a 	add	r2,r2,r2
 4001508:	1085883a 	add	r2,r2,r2
 400150c:	1007883a 	mov	r3,r2
 4001510:	e0bffe17 	ldw	r2,-8(fp)
 4001514:	1885883a 	add	r2,r3,r2
 4001518:	10800017 	ldw	r2,0(r2)
 400151c:	e0bffb0d 	sth	r2,-20(fp)
            fprintf(file, "%u,%u\n", x, y);
 4001520:	e1bffb8b 	ldhu	r6,-18(fp)
 4001524:	e1fffb0b 	ldhu	r7,-20(fp)
 4001528:	e13ffd17 	ldw	r4,-12(fp)
 400152c:	01410074 	movhi	r5,1025
 4001530:	29443f04 	addi	r5,r5,4348
 4001534:	40049100 	call	4004910 <fprintf>
    if (file != NULL) {
        // Write header if needed
        // fprintf(file, "X,Y\n");

        // Write coordinates
        for (i = 0; i < pointsCount; i++) {
 4001538:	e0bffc17 	ldw	r2,-16(fp)
 400153c:	10800044 	addi	r2,r2,1
 4001540:	e0bffc15 	stw	r2,-16(fp)
 4001544:	e0fffc17 	ldw	r3,-16(fp)
 4001548:	e0bfff17 	ldw	r2,-4(fp)
 400154c:	18bfe336 	bltu	r3,r2,40014dc <saveCoordinatesToCSV+0x44>
            alt_u16 x = (alt_u16)(pointsBuffer[i] >> 16);
            alt_u16 y = (alt_u16)(pointsBuffer[i] & 0xFFFF);
            fprintf(file, "%u,%u\n", x, y);
        }

        fclose(file);
 4001550:	e13ffd17 	ldw	r4,-12(fp)
 4001554:	40042fc0 	call	40042fc <fclose>
        printf("Coordinates saved\n");
 4001558:	01010074 	movhi	r4,1025
 400155c:	21044104 	addi	r4,r4,4356
 4001560:	4005fa00 	call	4005fa0 <puts>
 4001564:	00000306 	br	4001574 <saveCoordinatesToCSV+0xdc>
    } else {
        printf("Error opening the file for writing.\n");
 4001568:	01010074 	movhi	r4,1025
 400156c:	21044604 	addi	r4,r4,4376
 4001570:	4005fa00 	call	4005fa0 <puts>
    }
}
 4001574:	e037883a 	mov	sp,fp
 4001578:	dfc00117 	ldw	ra,4(sp)
 400157c:	df000017 	ldw	fp,0(sp)
 4001580:	dec00204 	addi	sp,sp,8
 4001584:	f800283a 	ret

04001588 <DrawOnLCDAndStore>:
* Input          : None
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DrawOnLCDAndStore() {
 4001588:	deffe704 	addi	sp,sp,-100
 400158c:	dfc01815 	stw	ra,96(sp)
 4001590:	df001715 	stw	fp,92(sp)
 4001594:	df001704 	addi	fp,sp,92
    Coordinate* touchPoint;

    alt_u32 pointsCount = 0;
 4001598:	e03fea15 	stw	zero,-88(fp)
    while (1) {
        // Wait for touch input
        //while (!TP_INT_IN);

        // Get touch coordinates
        touchPoint = Read_Ads7846();
 400159c:	4001e800 	call	4001e80 <Read_Ads7846>
 40015a0:	e0bfeb15 	stw	r2,-84(fp)

        if (touchPoint != 0) {
 40015a4:	e0bfeb17 	ldw	r2,-84(fp)
 40015a8:	1005003a 	cmpeq	r2,r2,zero
 40015ac:	1000191e 	bne	r2,zero,4001614 <DrawOnLCDAndStore+0x8c>
            pointsCount++;
 40015b0:	e0bfea17 	ldw	r2,-88(fp)
 40015b4:	10800044 	addi	r2,r2,1
 40015b8:	e0bfea15 	stw	r2,-88(fp)
            pointsBuffer[pointsCount] = ((alt_u32)touchPoint->x << 16) | touchPoint->y;
 40015bc:	e13fea17 	ldw	r4,-88(fp)
 40015c0:	e0bfeb17 	ldw	r2,-84(fp)
 40015c4:	1080000b 	ldhu	r2,0(r2)
 40015c8:	10bfffcc 	andi	r2,r2,65535
 40015cc:	1006943a 	slli	r3,r2,16
 40015d0:	e0bfeb17 	ldw	r2,-84(fp)
 40015d4:	1080008b 	ldhu	r2,2(r2)
 40015d8:	10bfffcc 	andi	r2,r2,65535
 40015dc:	1886b03a 	or	r3,r3,r2
 40015e0:	2105883a 	add	r2,r4,r4
 40015e4:	1085883a 	add	r2,r2,r2
 40015e8:	e13fe904 	addi	r4,fp,-92
 40015ec:	1105883a 	add	r2,r2,r4
 40015f0:	10800304 	addi	r2,r2,12
 40015f4:	10c00015 	stw	r3,0(r2)
            // Save coordinates to CSV
            saveCoordinatesToCSV(pointsBuffer, pointsCount);
 40015f8:	e13fec04 	addi	r4,fp,-80
 40015fc:	e17fea17 	ldw	r5,-88(fp)
 4001600:	40014980 	call	4001498 <saveCoordinatesToCSV>
            printf("Number of touches: %lu\n", pointsCount);
 4001604:	01010074 	movhi	r4,1025
 4001608:	21044f04 	addi	r4,r4,4412
 400160c:	e17fea17 	ldw	r5,-88(fp)
 4001610:	4005e880 	call	4005e88 <printf>
        }

        getDisplayPoint(&display, touchPoint, &matrix ) ;
 4001614:	01010074 	movhi	r4,1025
 4001618:	210c0684 	addi	r4,r4,12314
 400161c:	e17feb17 	ldw	r5,-84(fp)
 4001620:	01810074 	movhi	r6,1025
 4001624:	318c2204 	addi	r6,r6,12424
 4001628:	40028680 	call	4002868 <getDisplayPoint>
        TP_DrawPoint(display.x,display.y);
 400162c:	00810074 	movhi	r2,1025
 4001630:	108c0684 	addi	r2,r2,12314
 4001634:	1080000b 	ldhu	r2,0(r2)
 4001638:	113fffcc 	andi	r4,r2,65535
 400163c:	00810074 	movhi	r2,1025
 4001640:	108c0684 	addi	r2,r2,12314
 4001644:	1080008b 	ldhu	r2,2(r2)
 4001648:	117fffcc 	andi	r5,r2,65535
 400164c:	4001b080 	call	4001b08 <TP_DrawPoint>

        // Draw a point on the LCD
        //LCD_SetPoint(touchPoint->x, touchPoint->y, Red);

        // Store the touched point in SDRAM
        alt_u32 address = SDRAM_BASE + pointsCount * 2;  // Each coordinate is 2 bytes
 4001650:	e0bfea17 	ldw	r2,-88(fp)
 4001654:	1085883a 	add	r2,r2,r2
 4001658:	1007883a 	mov	r3,r2
 400165c:	00810034 	movhi	r2,1024
 4001660:	1885883a 	add	r2,r3,r2
 4001664:	e0bfe915 	stw	r2,-92(fp)
        //IOWR_16DIRECT(address, 0, (touchPoint->x << 8) | touchPoint->y);
        IOWR_16DIRECT(address, 0, (display.x << 8) | display.y);
 4001668:	e13fe917 	ldw	r4,-92(fp)
 400166c:	00810074 	movhi	r2,1025
 4001670:	108c0684 	addi	r2,r2,12314
 4001674:	1080000b 	ldhu	r2,0(r2)
 4001678:	10bfffcc 	andi	r2,r2,65535
 400167c:	1006923a 	slli	r3,r2,8
 4001680:	00810074 	movhi	r2,1025
 4001684:	108c0684 	addi	r2,r2,12314
 4001688:	1080008b 	ldhu	r2,2(r2)
 400168c:	10bfffcc 	andi	r2,r2,65535
 4001690:	1886b03a 	or	r3,r3,r2
 4001694:	2005883a 	mov	r2,r4
 4001698:	10c0002d 	sthio	r3,0(r2)

        //printf("Limited touches: %i\n", MAX_POINTS);

        if (pointsCount >= MAX_POINTS){
 400169c:	e0bfea17 	ldw	r2,-88(fp)
 40016a0:	10800530 	cmpltui	r2,r2,20
 40016a4:	103fbd1e 	bne	r2,zero,400159c <DrawOnLCDAndStore+0x14>
            printf("Breaking out of the loop\n");
 40016a8:	01010074 	movhi	r4,1025
 40016ac:	21045504 	addi	r4,r4,4436
 40016b0:	4005fa00 	call	4005fa0 <puts>
            break;
        }
    }
}
 40016b4:	e037883a 	mov	sp,fp
 40016b8:	dfc00117 	ldw	ra,4(sp)
 40016bc:	df000017 	ldw	fp,0(sp)
 40016c0:	dec00204 	addi	sp,sp,8
 40016c4:	f800283a 	ret

040016c8 <DisplayNumber>:
* Input          : None
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DisplayNumber(int number) {
 40016c8:	defff904 	addi	sp,sp,-28
 40016cc:	dfc00615 	stw	ra,24(sp)
 40016d0:	df000515 	stw	fp,20(sp)
 40016d4:	df000504 	addi	fp,sp,20
 40016d8:	e13fff15 	stw	r4,-4(fp)

    LCD_Clear(RGB565CONVERT(200,200,120));
 40016dc:	013393d4 	movui	r4,52815
 40016e0:	4000bcc0 	call	4000bcc <LCD_Clear>
    // Convert the number to a string (assuming a reasonable range)
    char numberStr[10];
    sprintf(numberStr, "%d", number);
 40016e4:	e13ffc04 	addi	r4,fp,-16
 40016e8:	01410074 	movhi	r5,1025
 40016ec:	29445c04 	addi	r5,r5,4464
 40016f0:	e1bfff17 	ldw	r6,-4(fp)
 40016f4:	40062040 	call	4006204 <sprintf>

    // Display the number on the LCD
    GUI_Text(50, 50, numberStr, White, Black);
 40016f8:	e1bffc04 	addi	r6,fp,-16
 40016fc:	d8000015 	stw	zero,0(sp)
 4001700:	01000c84 	movi	r4,50
 4001704:	01400c84 	movi	r5,50
 4001708:	01ffffd4 	movui	r7,65535
 400170c:	40013d00 	call	40013d0 <GUI_Text>
}
 4001710:	e037883a 	mov	sp,fp
 4001714:	dfc00117 	ldw	ra,4(sp)
 4001718:	df000017 	ldw	fp,0(sp)
 400171c:	dec00204 	addi	sp,sp,8
 4001720:	f800283a 	ret

04001724 <DisplayStoredImage>:
* Input          : None
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DisplayStoredImage() {
 4001724:	defffa04 	addi	sp,sp,-24
 4001728:	dfc00515 	stw	ra,20(sp)
 400172c:	df000415 	stw	fp,16(sp)
 4001730:	df000404 	addi	fp,sp,16
    LCD_Clear(RGB565CONVERT(200,200,120));
 4001734:	013393d4 	movui	r4,52815
 4001738:	4000bcc0 	call	4000bcc <LCD_Clear>
    alt_u32 i;
    // Iterate through SDRAM and draw each stored point on the LCD
    for (i = 0; i < MAX_POINTS; i++) {
 400173c:	e03fff15 	stw	zero,-4(fp)
 4001740:	00001706 	br	40017a0 <DisplayStoredImage+0x7c>
        alt_u32 address = SDRAM_BASE + i * 2;
 4001744:	e0bfff17 	ldw	r2,-4(fp)
 4001748:	1085883a 	add	r2,r2,r2
 400174c:	1007883a 	mov	r3,r2
 4001750:	00810034 	movhi	r2,1024
 4001754:	1885883a 	add	r2,r3,r2
 4001758:	e0bffe15 	stw	r2,-8(fp)
        alt_u32 point = IORD_16DIRECT(address, 0);
 400175c:	e0bffe17 	ldw	r2,-8(fp)
 4001760:	1080002b 	ldhuio	r2,0(r2)
 4001764:	e0bffd15 	stw	r2,-12(fp)

        alt_u16 x = (point >> 8) & 0xFF;
 4001768:	e0bffd17 	ldw	r2,-12(fp)
 400176c:	1004d23a 	srli	r2,r2,8
 4001770:	10803fcc 	andi	r2,r2,255
 4001774:	e0bffc8d 	sth	r2,-14(fp)
        alt_u16 y = point & 0xFF;
 4001778:	e0bffd17 	ldw	r2,-12(fp)
 400177c:	10803fcc 	andi	r2,r2,255
 4001780:	e0bffc0d 	sth	r2,-16(fp)

        LCD_SetPoint(x, y, Red);
 4001784:	e13ffc8b 	ldhu	r4,-14(fp)
 4001788:	e17ffc0b 	ldhu	r5,-16(fp)
 400178c:	01be0014 	movui	r6,63488
 4001790:	4000fe40 	call	4000fe4 <LCD_SetPoint>
*******************************************************************************/
void DisplayStoredImage() {
    LCD_Clear(RGB565CONVERT(200,200,120));
    alt_u32 i;
    // Iterate through SDRAM and draw each stored point on the LCD
    for (i = 0; i < MAX_POINTS; i++) {
 4001794:	e0bfff17 	ldw	r2,-4(fp)
 4001798:	10800044 	addi	r2,r2,1
 400179c:	e0bfff15 	stw	r2,-4(fp)
 40017a0:	e0bfff17 	ldw	r2,-4(fp)
 40017a4:	10800530 	cmpltui	r2,r2,20
 40017a8:	103fe61e 	bne	r2,zero,4001744 <DisplayStoredImage+0x20>
        alt_u16 x = (point >> 8) & 0xFF;
        alt_u16 y = point & 0xFF;

        LCD_SetPoint(x, y, Red);
    }
}
 40017ac:	e037883a 	mov	sp,fp
 40017b0:	dfc00117 	ldw	ra,4(sp)
 40017b4:	df000017 	ldw	fp,0(sp)
 40017b8:	dec00204 	addi	sp,sp,8
 40017bc:	f800283a 	ret

040017c0 <main>:
#include "game.h"
#define msleep(ms)  usleep(1000*ms)
#define DIRECTION_PA(data)  IOWR_ALTERA_AVALON_PIO_DIRECTION(PA_BASE, data)
#define DATA_PA(data)  IOWR_ALTERA_AVALON_PIO_DATA(PA_BASE, data)
int main(void)
{     
 40017c0:	defffe04 	addi	sp,sp,-8
 40017c4:	dfc00115 	stw	ra,4(sp)
 40017c8:	df000015 	stw	fp,0(sp)
 40017cc:	d839883a 	mov	fp,sp
       //IOWR_ALTERA_AVALON_PIO_DATA(VCC_BASE, 1);
       //IOWR_ALTERA_AVALON_PIO_DATA(GND_BASE, 0);
       IOWR_ALTERA_AVALON_PIO_DATA(BL_P_BASE, 1);
 40017d0:	00c61404 	movi	r3,6224
 40017d4:	00800044 	movi	r2,1
 40017d8:	18800035 	stwio	r2,0(r3)
       IOWR_ALTERA_AVALON_PIO_DATA(BL_N_BASE, 0);
 40017dc:	00861004 	movi	r2,6208
 40017e0:	10000035 	stwio	zero,0(r2)
       
       TP_Init(); 
 40017e4:	40018840 	call	4001884 <TP_Init>
	   LCD_Initializtion();
 40017e8:	40005480 	call	4000548 <LCD_Initializtion>
       
       LCD_Clear(Blue);
 40017ec:	010007c4 	movi	r4,31
 40017f0:	4000bcc0 	call	4000bcc <LCD_Clear>
       LCD_Clear(Yellow);
 40017f4:	013ff814 	movui	r4,65504
 40017f8:	4000bcc0 	call	4000bcc <LCD_Clear>
       LCD_Clear(White);
 40017fc:	013fffd4 	movui	r4,65535
 4001800:	4000bcc0 	call	4000bcc <LCD_Clear>
       LCD_Clear(Black);
 4001804:	0009883a 	mov	r4,zero
 4001808:	4000bcc0 	call	4000bcc <LCD_Clear>
       LCD_Clear(Magenta);
 400180c:	013e07d4 	movui	r4,63519
 4001810:	4000bcc0 	call	4000bcc <LCD_Clear>
       LCD_Clear(Red);
 4001814:	013e0014 	movui	r4,63488
 4001818:	4000bcc0 	call	4000bcc <LCD_Clear>
       LCD_Clear(Green);
 400181c:	0101f804 	movi	r4,2016
 4001820:	4000bcc0 	call	4000bcc <LCD_Clear>
       LCD_Clear(Cyan);
 4001824:	011fffc4 	movi	r4,32767
 4001828:	4000bcc0 	call	4000bcc <LCD_Clear>
        
     // LCD_show_test();
         
        TouchPanel_Calibrate(); 
 400182c:	4002b500 	call	4002b50 <TouchPanel_Calibrate>
    /*while (1)
	{
    	getDisplayPoint(&display, Read_Ads7846(), &matrix ) ;
    	TP_DrawPoint(display.x,display.y);
	}*/
        DrawOnLCDAndStore();
 4001830:	40015880 	call	4001588 <DrawOnLCDAndStore>
        delay_ms(500);
 4001834:	01000234 	movhi	r4,8
 4001838:	21284804 	addi	r4,r4,-24288
 400183c:	400d9500 	call	400d950 <usleep>
        DisplayNumber(42);
 4001840:	01000a84 	movi	r4,42
 4001844:	40016c80 	call	40016c8 <DisplayNumber>
        delay_ms(500);
 4001848:	01000234 	movhi	r4,8
 400184c:	21284804 	addi	r4,r4,-24288
 4001850:	400d9500 	call	400d950 <usleep>
        DisplayNumber(9999);
 4001854:	0109c3c4 	movi	r4,9999
 4001858:	40016c80 	call	40016c8 <DisplayNumber>
        delay_ms(500);
 400185c:	01000234 	movhi	r4,8
 4001860:	21284804 	addi	r4,r4,-24288
 4001864:	400d9500 	call	400d950 <usleep>
        DisplayStoredImage();
 4001868:	40017240 	call	4001724 <DisplayStoredImage>
   

	return 0;
 400186c:	0005883a 	mov	r2,zero
}
 4001870:	e037883a 	mov	sp,fp
 4001874:	dfc00117 	ldw	ra,4(sp)
 4001878:	df000017 	ldw	fp,0(sp)
 400187c:	dec00204 	addi	sp,sp,8
 4001880:	f800283a 	ret

04001884 <TP_Init>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void TP_Init(void) 
{
 4001884:	deffff04 	addi	sp,sp,-4
 4001888:	df000015 	stw	fp,0(sp)
 400188c:	d839883a 	mov	fp,sp
    TP_CS(1); 
 4001890:	00863004 	movi	r2,6336
 4001894:	00c00044 	movi	r3,1
 4001898:	10c00035 	stwio	r3,0(r2)
    TOUCH_SPI_INIT; 
 400189c:	00860304 	movi	r2,6156
 40018a0:	10000035 	stwio	zero,0(r2)
} 
 40018a4:	e037883a 	mov	sp,fp
 40018a8:	df000017 	ldw	fp,0(sp)
 40018ac:	dec00104 	addi	sp,sp,4
 40018b0:	f800283a 	ret

040018b4 <DelayUS>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DelayUS(alt_u32 cnt)
{
 40018b4:	defffd04 	addi	sp,sp,-12
 40018b8:	dfc00215 	stw	ra,8(sp)
 40018bc:	df000115 	stw	fp,4(sp)
 40018c0:	df000104 	addi	fp,sp,4
 40018c4:	e13fff15 	stw	r4,-4(fp)
    usleep(cnt);
 40018c8:	e13fff17 	ldw	r4,-4(fp)
 40018cc:	400d9500 	call	400d950 <usleep>
}
 40018d0:	e037883a 	mov	sp,fp
 40018d4:	dfc00117 	ldw	ra,4(sp)
 40018d8:	df000017 	ldw	fp,0(sp)
 40018dc:	dec00204 	addi	sp,sp,8
 40018e0:	f800283a 	ret

040018e4 <WR_CMD>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void WR_CMD (alt_u8 cmd)  
{
 40018e4:	defffa04 	addi	sp,sp,-24
 40018e8:	dfc00515 	stw	ra,20(sp)
 40018ec:	df000415 	stw	fp,16(sp)
 40018f0:	df000404 	addi	fp,sp,16
 40018f4:	e13fff05 	stb	r4,-4(fp)
    alt_avalon_spi_command(SPI_TOUCH_BASE,0,1,&cmd,0,NULL,ALT_AVALON_SPI_COMMAND_MERGE);
 40018f8:	d8000015 	stw	zero,0(sp)
 40018fc:	d8000115 	stw	zero,4(sp)
 4001900:	00800044 	movi	r2,1
 4001904:	d8800215 	stw	r2,8(sp)
 4001908:	01060004 	movi	r4,6144
 400190c:	000b883a 	mov	r5,zero
 4001910:	01800044 	movi	r6,1
 4001914:	e1ffff04 	addi	r7,fp,-4
 4001918:	400f04c0 	call	400f04c <alt_avalon_spi_command>
}
 400191c:	e037883a 	mov	sp,fp
 4001920:	dfc00117 	ldw	ra,4(sp)
 4001924:	df000017 	ldw	fp,0(sp)
 4001928:	dec00204 	addi	sp,sp,8
 400192c:	f800283a 	ret

04001930 <RD_AD>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
int RD_AD(void)  
{ 
 4001930:	defffa04 	addi	sp,sp,-24
 4001934:	dfc00515 	stw	ra,20(sp)
 4001938:	df000415 	stw	fp,16(sp)
 400193c:	df000404 	addi	fp,sp,16
    unsigned short buf; 
    alt_u8 temp;
    alt_avalon_spi_command(SPI_TOUCH_BASE,0,0,NULL,1,&temp,ALT_AVALON_SPI_COMMAND_MERGE);
 4001940:	00800044 	movi	r2,1
 4001944:	d8800015 	stw	r2,0(sp)
 4001948:	e0bfff84 	addi	r2,fp,-2
 400194c:	d8800115 	stw	r2,4(sp)
 4001950:	00800044 	movi	r2,1
 4001954:	d8800215 	stw	r2,8(sp)
 4001958:	01060004 	movi	r4,6144
 400195c:	000b883a 	mov	r5,zero
 4001960:	000d883a 	mov	r6,zero
 4001964:	000f883a 	mov	r7,zero
 4001968:	400f04c0 	call	400f04c <alt_avalon_spi_command>

    buf=((alt_u16)temp)<<8; 
 400196c:	e0bfff83 	ldbu	r2,-2(fp)
 4001970:	10803fcc 	andi	r2,r2,255
 4001974:	1004923a 	slli	r2,r2,8
 4001978:	e0bfff0d 	sth	r2,-4(fp)
    DelayUS(1);
 400197c:	01000044 	movi	r4,1
 4001980:	40018b40 	call	40018b4 <DelayUS>

    alt_avalon_spi_command(SPI_TOUCH_BASE,0,0,NULL,1,&temp,ALT_AVALON_SPI_COMMAND_MERGE);
 4001984:	00800044 	movi	r2,1
 4001988:	d8800015 	stw	r2,0(sp)
 400198c:	e0bfff84 	addi	r2,fp,-2
 4001990:	d8800115 	stw	r2,4(sp)
 4001994:	00800044 	movi	r2,1
 4001998:	d8800215 	stw	r2,8(sp)
 400199c:	01060004 	movi	r4,6144
 40019a0:	000b883a 	mov	r5,zero
 40019a4:	000d883a 	mov	r6,zero
 40019a8:	000f883a 	mov	r7,zero
 40019ac:	400f04c0 	call	400f04c <alt_avalon_spi_command>

    buf |=(alt_u16)temp; 
 40019b0:	e0bfff83 	ldbu	r2,-2(fp)
 40019b4:	10c03fcc 	andi	r3,r2,255
 40019b8:	e0bfff0b 	ldhu	r2,-4(fp)
 40019bc:	10c4b03a 	or	r2,r2,r3
 40019c0:	e0bfff0d 	sth	r2,-4(fp)

    buf>>=3; 
 40019c4:	e0bfff0b 	ldhu	r2,-4(fp)
 40019c8:	1004d0fa 	srli	r2,r2,3
 40019cc:	e0bfff0d 	sth	r2,-4(fp)
    buf&=0xfff; 
 40019d0:	e0bfff0b 	ldhu	r2,-4(fp)
 40019d4:	1083ffcc 	andi	r2,r2,4095
 40019d8:	e0bfff0d 	sth	r2,-4(fp)
    return buf; 
 40019dc:	e0bfff0b 	ldhu	r2,-4(fp)
} 
 40019e0:	e037883a 	mov	sp,fp
 40019e4:	dfc00117 	ldw	ra,4(sp)
 40019e8:	df000017 	ldw	fp,0(sp)
 40019ec:	dec00204 	addi	sp,sp,8
 40019f0:	f800283a 	ret

040019f4 <Read_X>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
int Read_X(void)
{
 40019f4:	defffd04 	addi	sp,sp,-12
 40019f8:	dfc00215 	stw	ra,8(sp)
 40019fc:	df000115 	stw	fp,4(sp)
 4001a00:	df000104 	addi	fp,sp,4
    int i;
    TP_CS(0);
 4001a04:	00863004 	movi	r2,6336
 4001a08:	10000035 	stwio	zero,0(r2)
    DelayUS(1);
 4001a0c:	01000044 	movi	r4,1
 4001a10:	40018b40 	call	40018b4 <DelayUS>
    WR_CMD(CHX);
 4001a14:	01002404 	movi	r4,144
 4001a18:	40018e40 	call	40018e4 <WR_CMD>
    DelayUS(1);
 4001a1c:	01000044 	movi	r4,1
 4001a20:	40018b40 	call	40018b4 <DelayUS>
    i=RD_AD();
 4001a24:	40019300 	call	4001930 <RD_AD>
 4001a28:	e0bfff15 	stw	r2,-4(fp)
    TP_CS(1);
 4001a2c:	00c63004 	movi	r3,6336
 4001a30:	00800044 	movi	r2,1
 4001a34:	18800035 	stwio	r2,0(r3)
    return i;
 4001a38:	e0bfff17 	ldw	r2,-4(fp)
}
 4001a3c:	e037883a 	mov	sp,fp
 4001a40:	dfc00117 	ldw	ra,4(sp)
 4001a44:	df000017 	ldw	fp,0(sp)
 4001a48:	dec00204 	addi	sp,sp,8
 4001a4c:	f800283a 	ret

04001a50 <Read_Y>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
int Read_Y(void)  
{
 4001a50:	defffd04 	addi	sp,sp,-12
 4001a54:	dfc00215 	stw	ra,8(sp)
 4001a58:	df000115 	stw	fp,4(sp)
 4001a5c:	df000104 	addi	fp,sp,4
    int i;
    TP_CS(0);
 4001a60:	00863004 	movi	r2,6336
 4001a64:	10000035 	stwio	zero,0(r2)
    DelayUS(1);
 4001a68:	01000044 	movi	r4,1
 4001a6c:	40018b40 	call	40018b4 <DelayUS>
    WR_CMD(CHY);
 4001a70:	01003404 	movi	r4,208
 4001a74:	40018e40 	call	40018e4 <WR_CMD>
    DelayUS(1);
 4001a78:	01000044 	movi	r4,1
 4001a7c:	40018b40 	call	40018b4 <DelayUS>
    i=RD_AD();
 4001a80:	40019300 	call	4001930 <RD_AD>
 4001a84:	e0bfff15 	stw	r2,-4(fp)
    TP_CS(1);
 4001a88:	00c63004 	movi	r3,6336
 4001a8c:	00800044 	movi	r2,1
 4001a90:	18800035 	stwio	r2,0(r3)
    return i;
 4001a94:	e0bfff17 	ldw	r2,-4(fp)
}
 4001a98:	e037883a 	mov	sp,fp
 4001a9c:	dfc00117 	ldw	ra,4(sp)
 4001aa0:	df000017 	ldw	fp,0(sp)
 4001aa4:	dec00204 	addi	sp,sp,8
 4001aa8:	f800283a 	ret

04001aac <TP_GetAdXY>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
void TP_GetAdXY(int *x,int *y)  
{ 
 4001aac:	defffa04 	addi	sp,sp,-24
 4001ab0:	dfc00515 	stw	ra,20(sp)
 4001ab4:	df000415 	stw	fp,16(sp)
 4001ab8:	df000404 	addi	fp,sp,16
 4001abc:	e13ffe15 	stw	r4,-8(fp)
 4001ac0:	e17fff15 	stw	r5,-4(fp)
    int adx,ady;
    adx=Read_X();
 4001ac4:	40019f40 	call	40019f4 <Read_X>
 4001ac8:	e0bffd15 	stw	r2,-12(fp)
    DelayUS(1);
 4001acc:	01000044 	movi	r4,1
 4001ad0:	40018b40 	call	40018b4 <DelayUS>
    ady=Read_Y();
 4001ad4:	4001a500 	call	4001a50 <Read_Y>
 4001ad8:	e0bffc15 	stw	r2,-16(fp)
    *x=adx;
 4001adc:	e0fffe17 	ldw	r3,-8(fp)
 4001ae0:	e0bffd17 	ldw	r2,-12(fp)
 4001ae4:	18800015 	stw	r2,0(r3)
    *y=ady;
 4001ae8:	e0ffff17 	ldw	r3,-4(fp)
 4001aec:	e0bffc17 	ldw	r2,-16(fp)
 4001af0:	18800015 	stw	r2,0(r3)
} 
 4001af4:	e037883a 	mov	sp,fp
 4001af8:	dfc00117 	ldw	ra,4(sp)
 4001afc:	df000017 	ldw	fp,0(sp)
 4001b00:	dec00204 	addi	sp,sp,8
 4001b04:	f800283a 	ret

04001b08 <TP_DrawPoint>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void TP_DrawPoint(alt_u32 Xpos,alt_u32 Ypos)
{
 4001b08:	defffc04 	addi	sp,sp,-16
 4001b0c:	dfc00315 	stw	ra,12(sp)
 4001b10:	df000215 	stw	fp,8(sp)
 4001b14:	df000204 	addi	fp,sp,8
 4001b18:	e13ffe15 	stw	r4,-8(fp)
 4001b1c:	e17fff15 	stw	r5,-4(fp)
    LCD_SetPoint(Xpos,Ypos,Blue);     /* Center point */
 4001b20:	e0bffe17 	ldw	r2,-8(fp)
 4001b24:	113fffcc 	andi	r4,r2,65535
 4001b28:	e0bfff17 	ldw	r2,-4(fp)
 4001b2c:	117fffcc 	andi	r5,r2,65535
 4001b30:	018007c4 	movi	r6,31
 4001b34:	4000fe40 	call	4000fe4 <LCD_SetPoint>
    LCD_SetPoint(Xpos+1,Ypos,Blue);
 4001b38:	e0bffe17 	ldw	r2,-8(fp)
 4001b3c:	10800044 	addi	r2,r2,1
 4001b40:	113fffcc 	andi	r4,r2,65535
 4001b44:	e0bfff17 	ldw	r2,-4(fp)
 4001b48:	117fffcc 	andi	r5,r2,65535
 4001b4c:	018007c4 	movi	r6,31
 4001b50:	4000fe40 	call	4000fe4 <LCD_SetPoint>
    LCD_SetPoint(Xpos,Ypos+1,Blue);
 4001b54:	e0bffe17 	ldw	r2,-8(fp)
 4001b58:	113fffcc 	andi	r4,r2,65535
 4001b5c:	e0bfff17 	ldw	r2,-4(fp)
 4001b60:	10800044 	addi	r2,r2,1
 4001b64:	117fffcc 	andi	r5,r2,65535
 4001b68:	018007c4 	movi	r6,31
 4001b6c:	4000fe40 	call	4000fe4 <LCD_SetPoint>
    LCD_SetPoint(Xpos+1,Ypos+1,Blue);
 4001b70:	e0bffe17 	ldw	r2,-8(fp)
 4001b74:	10800044 	addi	r2,r2,1
 4001b78:	113fffcc 	andi	r4,r2,65535
 4001b7c:	e0bfff17 	ldw	r2,-4(fp)
 4001b80:	10800044 	addi	r2,r2,1
 4001b84:	117fffcc 	andi	r5,r2,65535
 4001b88:	018007c4 	movi	r6,31
 4001b8c:	4000fe40 	call	4000fe4 <LCD_SetPoint>
}
 4001b90:	e037883a 	mov	sp,fp
 4001b94:	dfc00117 	ldw	ra,4(sp)
 4001b98:	df000017 	ldw	fp,0(sp)
 4001b9c:	dec00204 	addi	sp,sp,8
 4001ba0:	f800283a 	ret

04001ba4 <DrawCross>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DrawCross(alt_u32 Xpos,alt_u32 Ypos)
{
 4001ba4:	defffb04 	addi	sp,sp,-20
 4001ba8:	dfc00415 	stw	ra,16(sp)
 4001bac:	df000315 	stw	fp,12(sp)
 4001bb0:	df000304 	addi	fp,sp,12
 4001bb4:	e13ffe15 	stw	r4,-8(fp)
 4001bb8:	e17fff15 	stw	r5,-4(fp)
    LCD_DrawLine(Xpos-15,Ypos,Xpos-2,Ypos,Red);
 4001bbc:	e0bffe17 	ldw	r2,-8(fp)
 4001bc0:	10bffc44 	addi	r2,r2,-15
 4001bc4:	113fffcc 	andi	r4,r2,65535
 4001bc8:	e0bfff17 	ldw	r2,-4(fp)
 4001bcc:	117fffcc 	andi	r5,r2,65535
 4001bd0:	e0bffe17 	ldw	r2,-8(fp)
 4001bd4:	10bfff84 	addi	r2,r2,-2
 4001bd8:	11bfffcc 	andi	r6,r2,65535
 4001bdc:	e0bfff17 	ldw	r2,-4(fp)
 4001be0:	11ffffcc 	andi	r7,r2,65535
 4001be4:	00be0014 	movui	r2,63488
 4001be8:	d8800015 	stw	r2,0(sp)
 4001bec:	40010480 	call	4001048 <LCD_DrawLine>
    LCD_DrawLine(Xpos+2,Ypos,Xpos+15,Ypos,Red);
 4001bf0:	e0bffe17 	ldw	r2,-8(fp)
 4001bf4:	10800084 	addi	r2,r2,2
 4001bf8:	113fffcc 	andi	r4,r2,65535
 4001bfc:	e0bfff17 	ldw	r2,-4(fp)
 4001c00:	117fffcc 	andi	r5,r2,65535
 4001c04:	e0bffe17 	ldw	r2,-8(fp)
 4001c08:	108003c4 	addi	r2,r2,15
 4001c0c:	11bfffcc 	andi	r6,r2,65535
 4001c10:	e0bfff17 	ldw	r2,-4(fp)
 4001c14:	11ffffcc 	andi	r7,r2,65535
 4001c18:	00be0014 	movui	r2,63488
 4001c1c:	d8800015 	stw	r2,0(sp)
 4001c20:	40010480 	call	4001048 <LCD_DrawLine>
    LCD_DrawLine(Xpos,Ypos-15,Xpos,Ypos-2,Red);
 4001c24:	e0bffe17 	ldw	r2,-8(fp)
 4001c28:	113fffcc 	andi	r4,r2,65535
 4001c2c:	e0bfff17 	ldw	r2,-4(fp)
 4001c30:	10bffc44 	addi	r2,r2,-15
 4001c34:	117fffcc 	andi	r5,r2,65535
 4001c38:	e0bffe17 	ldw	r2,-8(fp)
 4001c3c:	11bfffcc 	andi	r6,r2,65535
 4001c40:	e0bfff17 	ldw	r2,-4(fp)
 4001c44:	10bfff84 	addi	r2,r2,-2
 4001c48:	11ffffcc 	andi	r7,r2,65535
 4001c4c:	00be0014 	movui	r2,63488
 4001c50:	d8800015 	stw	r2,0(sp)
 4001c54:	40010480 	call	4001048 <LCD_DrawLine>
    LCD_DrawLine(Xpos,Ypos+2,Xpos,Ypos+15,Red);
 4001c58:	e0bffe17 	ldw	r2,-8(fp)
 4001c5c:	113fffcc 	andi	r4,r2,65535
 4001c60:	e0bfff17 	ldw	r2,-4(fp)
 4001c64:	10800084 	addi	r2,r2,2
 4001c68:	117fffcc 	andi	r5,r2,65535
 4001c6c:	e0bffe17 	ldw	r2,-8(fp)
 4001c70:	11bfffcc 	andi	r6,r2,65535
 4001c74:	e0bfff17 	ldw	r2,-4(fp)
 4001c78:	108003c4 	addi	r2,r2,15
 4001c7c:	11ffffcc 	andi	r7,r2,65535
 4001c80:	00be0014 	movui	r2,63488
 4001c84:	d8800015 	stw	r2,0(sp)
 4001c88:	40010480 	call	4001048 <LCD_DrawLine>

    LCD_DrawLine(Xpos-15,Ypos+15,Xpos-7,Ypos+15,RGB565CONVERT(184,158,131));
 4001c8c:	e0bffe17 	ldw	r2,-8(fp)
 4001c90:	10bffc44 	addi	r2,r2,-15
 4001c94:	113fffcc 	andi	r4,r2,65535
 4001c98:	e0bfff17 	ldw	r2,-4(fp)
 4001c9c:	108003c4 	addi	r2,r2,15
 4001ca0:	117fffcc 	andi	r5,r2,65535
 4001ca4:	e0bffe17 	ldw	r2,-8(fp)
 4001ca8:	10bffe44 	addi	r2,r2,-7
 4001cac:	11bfffcc 	andi	r6,r2,65535
 4001cb0:	e0bfff17 	ldw	r2,-4(fp)
 4001cb4:	108003c4 	addi	r2,r2,15
 4001cb8:	11ffffcc 	andi	r7,r2,65535
 4001cbc:	00af3c14 	movui	r2,48368
 4001cc0:	d8800015 	stw	r2,0(sp)
 4001cc4:	40010480 	call	4001048 <LCD_DrawLine>
    LCD_DrawLine(Xpos-15,Ypos+7,Xpos-15,Ypos+15,RGB565CONVERT(184,158,131));
 4001cc8:	e0bffe17 	ldw	r2,-8(fp)
 4001ccc:	10bffc44 	addi	r2,r2,-15
 4001cd0:	113fffcc 	andi	r4,r2,65535
 4001cd4:	e0bfff17 	ldw	r2,-4(fp)
 4001cd8:	108001c4 	addi	r2,r2,7
 4001cdc:	117fffcc 	andi	r5,r2,65535
 4001ce0:	e0bffe17 	ldw	r2,-8(fp)
 4001ce4:	10bffc44 	addi	r2,r2,-15
 4001ce8:	11bfffcc 	andi	r6,r2,65535
 4001cec:	e0bfff17 	ldw	r2,-4(fp)
 4001cf0:	108003c4 	addi	r2,r2,15
 4001cf4:	11ffffcc 	andi	r7,r2,65535
 4001cf8:	00af3c14 	movui	r2,48368
 4001cfc:	d8800015 	stw	r2,0(sp)
 4001d00:	40010480 	call	4001048 <LCD_DrawLine>

    LCD_DrawLine(Xpos-15,Ypos-15,Xpos-7,Ypos-15,RGB565CONVERT(184,158,131));
 4001d04:	e0bffe17 	ldw	r2,-8(fp)
 4001d08:	10bffc44 	addi	r2,r2,-15
 4001d0c:	113fffcc 	andi	r4,r2,65535
 4001d10:	e0bfff17 	ldw	r2,-4(fp)
 4001d14:	10bffc44 	addi	r2,r2,-15
 4001d18:	117fffcc 	andi	r5,r2,65535
 4001d1c:	e0bffe17 	ldw	r2,-8(fp)
 4001d20:	10bffe44 	addi	r2,r2,-7
 4001d24:	11bfffcc 	andi	r6,r2,65535
 4001d28:	e0bfff17 	ldw	r2,-4(fp)
 4001d2c:	10bffc44 	addi	r2,r2,-15
 4001d30:	11ffffcc 	andi	r7,r2,65535
 4001d34:	00af3c14 	movui	r2,48368
 4001d38:	d8800015 	stw	r2,0(sp)
 4001d3c:	40010480 	call	4001048 <LCD_DrawLine>
    LCD_DrawLine(Xpos-15,Ypos-7,Xpos-15,Ypos-15,RGB565CONVERT(184,158,131));
 4001d40:	e0bffe17 	ldw	r2,-8(fp)
 4001d44:	10bffc44 	addi	r2,r2,-15
 4001d48:	113fffcc 	andi	r4,r2,65535
 4001d4c:	e0bfff17 	ldw	r2,-4(fp)
 4001d50:	10bffe44 	addi	r2,r2,-7
 4001d54:	117fffcc 	andi	r5,r2,65535
 4001d58:	e0bffe17 	ldw	r2,-8(fp)
 4001d5c:	10bffc44 	addi	r2,r2,-15
 4001d60:	11bfffcc 	andi	r6,r2,65535
 4001d64:	e0bfff17 	ldw	r2,-4(fp)
 4001d68:	10bffc44 	addi	r2,r2,-15
 4001d6c:	11ffffcc 	andi	r7,r2,65535
 4001d70:	00af3c14 	movui	r2,48368
 4001d74:	d8800015 	stw	r2,0(sp)
 4001d78:	40010480 	call	4001048 <LCD_DrawLine>

    LCD_DrawLine(Xpos+7,Ypos+15,Xpos+15,Ypos+15,RGB565CONVERT(184,158,131));
 4001d7c:	e0bffe17 	ldw	r2,-8(fp)
 4001d80:	108001c4 	addi	r2,r2,7
 4001d84:	113fffcc 	andi	r4,r2,65535
 4001d88:	e0bfff17 	ldw	r2,-4(fp)
 4001d8c:	108003c4 	addi	r2,r2,15
 4001d90:	117fffcc 	andi	r5,r2,65535
 4001d94:	e0bffe17 	ldw	r2,-8(fp)
 4001d98:	108003c4 	addi	r2,r2,15
 4001d9c:	11bfffcc 	andi	r6,r2,65535
 4001da0:	e0bfff17 	ldw	r2,-4(fp)
 4001da4:	108003c4 	addi	r2,r2,15
 4001da8:	11ffffcc 	andi	r7,r2,65535
 4001dac:	00af3c14 	movui	r2,48368
 4001db0:	d8800015 	stw	r2,0(sp)
 4001db4:	40010480 	call	4001048 <LCD_DrawLine>
    LCD_DrawLine(Xpos+15,Ypos+7,Xpos+15,Ypos+15,RGB565CONVERT(184,158,131));
 4001db8:	e0bffe17 	ldw	r2,-8(fp)
 4001dbc:	108003c4 	addi	r2,r2,15
 4001dc0:	113fffcc 	andi	r4,r2,65535
 4001dc4:	e0bfff17 	ldw	r2,-4(fp)
 4001dc8:	108001c4 	addi	r2,r2,7
 4001dcc:	117fffcc 	andi	r5,r2,65535
 4001dd0:	e0bffe17 	ldw	r2,-8(fp)
 4001dd4:	108003c4 	addi	r2,r2,15
 4001dd8:	11bfffcc 	andi	r6,r2,65535
 4001ddc:	e0bfff17 	ldw	r2,-4(fp)
 4001de0:	108003c4 	addi	r2,r2,15
 4001de4:	11ffffcc 	andi	r7,r2,65535
 4001de8:	00af3c14 	movui	r2,48368
 4001dec:	d8800015 	stw	r2,0(sp)
 4001df0:	40010480 	call	4001048 <LCD_DrawLine>

    LCD_DrawLine(Xpos+7,Ypos-15,Xpos+15,Ypos-15,RGB565CONVERT(184,158,131));
 4001df4:	e0bffe17 	ldw	r2,-8(fp)
 4001df8:	108001c4 	addi	r2,r2,7
 4001dfc:	113fffcc 	andi	r4,r2,65535
 4001e00:	e0bfff17 	ldw	r2,-4(fp)
 4001e04:	10bffc44 	addi	r2,r2,-15
 4001e08:	117fffcc 	andi	r5,r2,65535
 4001e0c:	e0bffe17 	ldw	r2,-8(fp)
 4001e10:	108003c4 	addi	r2,r2,15
 4001e14:	11bfffcc 	andi	r6,r2,65535
 4001e18:	e0bfff17 	ldw	r2,-4(fp)
 4001e1c:	10bffc44 	addi	r2,r2,-15
 4001e20:	11ffffcc 	andi	r7,r2,65535
 4001e24:	00af3c14 	movui	r2,48368
 4001e28:	d8800015 	stw	r2,0(sp)
 4001e2c:	40010480 	call	4001048 <LCD_DrawLine>
    LCD_DrawLine(Xpos+15,Ypos-15,Xpos+15,Ypos-7,RGB565CONVERT(184,158,131));
 4001e30:	e0bffe17 	ldw	r2,-8(fp)
 4001e34:	108003c4 	addi	r2,r2,15
 4001e38:	113fffcc 	andi	r4,r2,65535
 4001e3c:	e0bfff17 	ldw	r2,-4(fp)
 4001e40:	10bffc44 	addi	r2,r2,-15
 4001e44:	117fffcc 	andi	r5,r2,65535
 4001e48:	e0bffe17 	ldw	r2,-8(fp)
 4001e4c:	108003c4 	addi	r2,r2,15
 4001e50:	11bfffcc 	andi	r6,r2,65535
 4001e54:	e0bfff17 	ldw	r2,-4(fp)
 4001e58:	10bffe44 	addi	r2,r2,-7
 4001e5c:	11ffffcc 	andi	r7,r2,65535
 4001e60:	00af3c14 	movui	r2,48368
 4001e64:	d8800015 	stw	r2,0(sp)
 4001e68:	40010480 	call	4001048 <LCD_DrawLine>
}
 4001e6c:	e037883a 	mov	sp,fp
 4001e70:	dfc00117 	ldw	ra,4(sp)
 4001e74:	df000017 	ldw	fp,0(sp)
 4001e78:	dec00204 	addi	sp,sp,8
 4001e7c:	f800283a 	ret

04001e80 <Read_Ads7846>:
* Output         : None
* Return         : Coordinate *
* Attention      : None
*******************************************************************************/
Coordinate *Read_Ads7846(void)
{
 4001e80:	deffe804 	addi	sp,sp,-96
 4001e84:	dfc01715 	stw	ra,92(sp)
 4001e88:	df001615 	stw	fp,88(sp)
 4001e8c:	df001604 	addi	fp,sp,88
    static Coordinate screen;  // Static variable to store the result
    int m0, m1, m2, TP_X[1], TP_Y[1], temp[3];
    alt_u8 count = 0;
 4001e90:	e03fea05 	stb	zero,-88(fp)
    int buffer[2][3] = {{0}, {0}};  // Buffer to store multiple readings
 4001e94:	e03ff315 	stw	zero,-52(fp)
 4001e98:	e03ff415 	stw	zero,-48(fp)
 4001e9c:	e03ff515 	stw	zero,-44(fp)
 4001ea0:	e03ff615 	stw	zero,-40(fp)
 4001ea4:	e03ff715 	stw	zero,-36(fp)
 4001ea8:	e03ff815 	stw	zero,-32(fp)

    do
    {
        TP_GetAdXY(TP_X, TP_Y);  // Function to get raw touch panel coordinates
 4001eac:	e13fee04 	addi	r4,fp,-72
 4001eb0:	e17fef04 	addi	r5,fp,-68
 4001eb4:	4001aac0 	call	4001aac <TP_GetAdXY>
        buffer[0][count] = TP_X[0];
 4001eb8:	e0bfea03 	ldbu	r2,-88(fp)
 4001ebc:	e0ffee17 	ldw	r3,-72(fp)
 4001ec0:	1085883a 	add	r2,r2,r2
 4001ec4:	1085883a 	add	r2,r2,r2
 4001ec8:	e13fea04 	addi	r4,fp,-88
 4001ecc:	1105883a 	add	r2,r2,r4
 4001ed0:	10800904 	addi	r2,r2,36
 4001ed4:	10c00015 	stw	r3,0(r2)
        buffer[1][count] = TP_Y[0];
 4001ed8:	e0bfea03 	ldbu	r2,-88(fp)
 4001edc:	e0ffef17 	ldw	r3,-68(fp)
 4001ee0:	1085883a 	add	r2,r2,r2
 4001ee4:	1085883a 	add	r2,r2,r2
 4001ee8:	e13fea04 	addi	r4,fp,-88
 4001eec:	1105883a 	add	r2,r2,r4
 4001ef0:	10800c04 	addi	r2,r2,48
 4001ef4:	10c00015 	stw	r3,0(r2)
        count++;
 4001ef8:	e0bfea03 	ldbu	r2,-88(fp)
 4001efc:	10800044 	addi	r2,r2,1
 4001f00:	e0bfea05 	stb	r2,-88(fp)
    } while (!TP_INT_IN && count < 3);  // Continue reading until the interrupt occurs or three readings are obtained
 4001f04:	00862804 	movi	r2,6304
 4001f08:	10800037 	ldwio	r2,0(r2)
 4001f0c:	1004c03a 	cmpne	r2,r2,zero
 4001f10:	1000031e 	bne	r2,zero,4001f20 <Read_Ads7846+0xa0>
 4001f14:	e0bfea03 	ldbu	r2,-88(fp)
 4001f18:	108000f0 	cmpltui	r2,r2,3
 4001f1c:	103fe31e 	bne	r2,zero,4001eac <Read_Ads7846+0x2c>

    if (count == 3)  // If three readings are obtained
 4001f20:	e0bfea03 	ldbu	r2,-88(fp)
 4001f24:	108000d8 	cmpnei	r2,r2,3
 4001f28:	1000bf1e 	bne	r2,zero,4002228 <Read_Ads7846+0x3a8>
    {
        // Average X
        temp[0] = buffer[0][0];
 4001f2c:	e0bff317 	ldw	r2,-52(fp)
 4001f30:	e0bff015 	stw	r2,-64(fp)
        temp[1] = buffer[0][1];
 4001f34:	e0bff417 	ldw	r2,-48(fp)
 4001f38:	e0bff115 	stw	r2,-60(fp)
        temp[2] = buffer[0][2];
 4001f3c:	e0bff517 	ldw	r2,-44(fp)
 4001f40:	e0bff215 	stw	r2,-56(fp)

        m0 = temp[0] - temp[1];
 4001f44:	e0fff017 	ldw	r3,-64(fp)
 4001f48:	e0bff117 	ldw	r2,-60(fp)
 4001f4c:	1885c83a 	sub	r2,r3,r2
 4001f50:	e0bfed15 	stw	r2,-76(fp)
        m1 = temp[1] - temp[2];
 4001f54:	e0fff117 	ldw	r3,-60(fp)
 4001f58:	e0bff217 	ldw	r2,-56(fp)
 4001f5c:	1885c83a 	sub	r2,r3,r2
 4001f60:	e0bfec15 	stw	r2,-80(fp)
        m2 = temp[2] - temp[0];
 4001f64:	e0fff217 	ldw	r3,-56(fp)
 4001f68:	e0bff017 	ldw	r2,-64(fp)
 4001f6c:	1885c83a 	sub	r2,r3,r2
 4001f70:	e0bfeb15 	stw	r2,-84(fp)

        m0 = m0 > 0 ? m0 : (-m0);
 4001f74:	e0bfed17 	ldw	r2,-76(fp)
 4001f78:	e0bffa15 	stw	r2,-24(fp)
 4001f7c:	e0fffa17 	ldw	r3,-24(fp)
 4001f80:	1804403a 	cmpge	r2,r3,zero
 4001f84:	1000031e 	bne	r2,zero,4001f94 <Read_Ads7846+0x114>
 4001f88:	e13ffa17 	ldw	r4,-24(fp)
 4001f8c:	0109c83a 	sub	r4,zero,r4
 4001f90:	e13ffa15 	stw	r4,-24(fp)
 4001f94:	e0bffa17 	ldw	r2,-24(fp)
 4001f98:	e0bfed15 	stw	r2,-76(fp)
        m1 = m1 > 0 ? m1 : (-m1);
 4001f9c:	e0ffec17 	ldw	r3,-80(fp)
 4001fa0:	e0fffb15 	stw	r3,-20(fp)
 4001fa4:	e13ffb17 	ldw	r4,-20(fp)
 4001fa8:	2004403a 	cmpge	r2,r4,zero
 4001fac:	1000031e 	bne	r2,zero,4001fbc <Read_Ads7846+0x13c>
 4001fb0:	e0bffb17 	ldw	r2,-20(fp)
 4001fb4:	0085c83a 	sub	r2,zero,r2
 4001fb8:	e0bffb15 	stw	r2,-20(fp)
 4001fbc:	e0fffb17 	ldw	r3,-20(fp)
 4001fc0:	e0ffec15 	stw	r3,-80(fp)
        m2 = m2 > 0 ? m2 : (-m2);
 4001fc4:	e13feb17 	ldw	r4,-84(fp)
 4001fc8:	e13ffc15 	stw	r4,-16(fp)
 4001fcc:	e0fffc17 	ldw	r3,-16(fp)
 4001fd0:	1804403a 	cmpge	r2,r3,zero
 4001fd4:	1000031e 	bne	r2,zero,4001fe4 <Read_Ads7846+0x164>
 4001fd8:	e13ffc17 	ldw	r4,-16(fp)
 4001fdc:	0109c83a 	sub	r4,zero,r4
 4001fe0:	e13ffc15 	stw	r4,-16(fp)
 4001fe4:	e0bffc17 	ldw	r2,-16(fp)
 4001fe8:	e0bfeb15 	stw	r2,-84(fp)

        if (m0 < m1)
 4001fec:	e0ffed17 	ldw	r3,-76(fp)
 4001ff0:	e0bfec17 	ldw	r2,-80(fp)
 4001ff4:	1880130e 	bge	r3,r2,4002044 <Read_Ads7846+0x1c4>
        {
            if (m2 < m0)
 4001ff8:	e0ffeb17 	ldw	r3,-84(fp)
 4001ffc:	e0bfed17 	ldw	r2,-76(fp)
 4002000:	1880080e 	bge	r3,r2,4002024 <Read_Ads7846+0x1a4>
                screen.x = (temp[0] + temp[2]) / 2;
 4002004:	e0fff017 	ldw	r3,-64(fp)
 4002008:	e0bff217 	ldw	r2,-56(fp)
 400200c:	1887883a 	add	r3,r3,r2
 4002010:	1804d7fa 	srli	r2,r3,31
 4002014:	10c5883a 	add	r2,r2,r3
 4002018:	1005d07a 	srai	r2,r2,1
 400201c:	d0a0128d 	sth	r2,-32694(gp)
 4002020:	00001a06 	br	400208c <Read_Ads7846+0x20c>
            else
                screen.x = (temp[0] + temp[1]) / 2;
 4002024:	e0fff017 	ldw	r3,-64(fp)
 4002028:	e0bff117 	ldw	r2,-60(fp)
 400202c:	1887883a 	add	r3,r3,r2
 4002030:	1804d7fa 	srli	r2,r3,31
 4002034:	10c5883a 	add	r2,r2,r3
 4002038:	1005d07a 	srai	r2,r2,1
 400203c:	d0a0128d 	sth	r2,-32694(gp)
 4002040:	00001206 	br	400208c <Read_Ads7846+0x20c>
        }
        else if (m2 < m1)
 4002044:	e0ffeb17 	ldw	r3,-84(fp)
 4002048:	e0bfec17 	ldw	r2,-80(fp)
 400204c:	1880080e 	bge	r3,r2,4002070 <Read_Ads7846+0x1f0>
            screen.x = (temp[0] + temp[2]) / 2;
 4002050:	e0fff017 	ldw	r3,-64(fp)
 4002054:	e0bff217 	ldw	r2,-56(fp)
 4002058:	1887883a 	add	r3,r3,r2
 400205c:	1804d7fa 	srli	r2,r3,31
 4002060:	10c5883a 	add	r2,r2,r3
 4002064:	1005d07a 	srai	r2,r2,1
 4002068:	d0a0128d 	sth	r2,-32694(gp)
 400206c:	00000706 	br	400208c <Read_Ads7846+0x20c>
        else
            screen.x = (temp[1] + temp[2]) / 2;
 4002070:	e0fff117 	ldw	r3,-60(fp)
 4002074:	e0bff217 	ldw	r2,-56(fp)
 4002078:	1887883a 	add	r3,r3,r2
 400207c:	1804d7fa 	srli	r2,r3,31
 4002080:	10c5883a 	add	r2,r2,r3
 4002084:	1005d07a 	srai	r2,r2,1
 4002088:	d0a0128d 	sth	r2,-32694(gp)

        // Average Y
        temp[0] = buffer[1][0];
 400208c:	e0bff617 	ldw	r2,-40(fp)
 4002090:	e0bff015 	stw	r2,-64(fp)
        temp[1] = buffer[1][1];
 4002094:	e0bff717 	ldw	r2,-36(fp)
 4002098:	e0bff115 	stw	r2,-60(fp)
        temp[2] = buffer[1][2];
 400209c:	e0bff817 	ldw	r2,-32(fp)
 40020a0:	e0bff215 	stw	r2,-56(fp)
        m0 = temp[0] - temp[1];
 40020a4:	e0fff017 	ldw	r3,-64(fp)
 40020a8:	e0bff117 	ldw	r2,-60(fp)
 40020ac:	1885c83a 	sub	r2,r3,r2
 40020b0:	e0bfed15 	stw	r2,-76(fp)
        m1 = temp[1] - temp[2];
 40020b4:	e0fff117 	ldw	r3,-60(fp)
 40020b8:	e0bff217 	ldw	r2,-56(fp)
 40020bc:	1885c83a 	sub	r2,r3,r2
 40020c0:	e0bfec15 	stw	r2,-80(fp)
        m2 = temp[2] - temp[0];
 40020c4:	e0fff217 	ldw	r3,-56(fp)
 40020c8:	e0bff017 	ldw	r2,-64(fp)
 40020cc:	1885c83a 	sub	r2,r3,r2
 40020d0:	e0bfeb15 	stw	r2,-84(fp)
        m0 = m0 > 0 ? m0 : (-m0);
 40020d4:	e0ffed17 	ldw	r3,-76(fp)
 40020d8:	e0fffd15 	stw	r3,-12(fp)
 40020dc:	e13ffd17 	ldw	r4,-12(fp)
 40020e0:	2004403a 	cmpge	r2,r4,zero
 40020e4:	1000031e 	bne	r2,zero,40020f4 <Read_Ads7846+0x274>
 40020e8:	e0bffd17 	ldw	r2,-12(fp)
 40020ec:	0085c83a 	sub	r2,zero,r2
 40020f0:	e0bffd15 	stw	r2,-12(fp)
 40020f4:	e0fffd17 	ldw	r3,-12(fp)
 40020f8:	e0ffed15 	stw	r3,-76(fp)
        m1 = m1 > 0 ? m1 : (-m1);
 40020fc:	e13fec17 	ldw	r4,-80(fp)
 4002100:	e13ffe15 	stw	r4,-8(fp)
 4002104:	e0fffe17 	ldw	r3,-8(fp)
 4002108:	1804403a 	cmpge	r2,r3,zero
 400210c:	1000031e 	bne	r2,zero,400211c <Read_Ads7846+0x29c>
 4002110:	e13ffe17 	ldw	r4,-8(fp)
 4002114:	0109c83a 	sub	r4,zero,r4
 4002118:	e13ffe15 	stw	r4,-8(fp)
 400211c:	e0bffe17 	ldw	r2,-8(fp)
 4002120:	e0bfec15 	stw	r2,-80(fp)
        m2 = m2 > 0 ? m2 : (-m2);
 4002124:	e0ffeb17 	ldw	r3,-84(fp)
 4002128:	e0ffff15 	stw	r3,-4(fp)
 400212c:	e13fff17 	ldw	r4,-4(fp)
 4002130:	2004403a 	cmpge	r2,r4,zero
 4002134:	1000031e 	bne	r2,zero,4002144 <Read_Ads7846+0x2c4>
 4002138:	e0bfff17 	ldw	r2,-4(fp)
 400213c:	0085c83a 	sub	r2,zero,r2
 4002140:	e0bfff15 	stw	r2,-4(fp)
 4002144:	e0ffff17 	ldw	r3,-4(fp)
 4002148:	e0ffeb15 	stw	r3,-84(fp)

        if (m0 < m1)
 400214c:	e0ffed17 	ldw	r3,-76(fp)
 4002150:	e0bfec17 	ldw	r2,-80(fp)
 4002154:	1880190e 	bge	r3,r2,40021bc <Read_Ads7846+0x33c>
        {
            if (m2 < m0)
 4002158:	e0ffeb17 	ldw	r3,-84(fp)
 400215c:	e0bfed17 	ldw	r2,-76(fp)
 4002160:	18800b0e 	bge	r3,r2,4002190 <Read_Ads7846+0x310>
                screen.y = (temp[0] + temp[2]) / 2;
 4002164:	e0fff017 	ldw	r3,-64(fp)
 4002168:	e0bff217 	ldw	r2,-56(fp)
 400216c:	1887883a 	add	r3,r3,r2
 4002170:	1804d7fa 	srli	r2,r3,31
 4002174:	10c5883a 	add	r2,r2,r3
 4002178:	1005d07a 	srai	r2,r2,1
 400217c:	1007883a 	mov	r3,r2
 4002180:	00810074 	movhi	r2,1025
 4002184:	108c0604 	addi	r2,r2,12312
 4002188:	10c0000d 	sth	r3,0(r2)
 400218c:	00002306 	br	400221c <Read_Ads7846+0x39c>
            else
                screen.y = (temp[0] + temp[1]) / 2;
 4002190:	e0fff017 	ldw	r3,-64(fp)
 4002194:	e0bff117 	ldw	r2,-60(fp)
 4002198:	1887883a 	add	r3,r3,r2
 400219c:	1804d7fa 	srli	r2,r3,31
 40021a0:	10c5883a 	add	r2,r2,r3
 40021a4:	1005d07a 	srai	r2,r2,1
 40021a8:	1007883a 	mov	r3,r2
 40021ac:	00810074 	movhi	r2,1025
 40021b0:	108c0604 	addi	r2,r2,12312
 40021b4:	10c0000d 	sth	r3,0(r2)
 40021b8:	00001806 	br	400221c <Read_Ads7846+0x39c>
        }
        else if (m2 < m1)
 40021bc:	e0ffeb17 	ldw	r3,-84(fp)
 40021c0:	e0bfec17 	ldw	r2,-80(fp)
 40021c4:	18800b0e 	bge	r3,r2,40021f4 <Read_Ads7846+0x374>
            screen.y = (temp[0] + temp[2]) / 2;
 40021c8:	e0fff017 	ldw	r3,-64(fp)
 40021cc:	e0bff217 	ldw	r2,-56(fp)
 40021d0:	1887883a 	add	r3,r3,r2
 40021d4:	1804d7fa 	srli	r2,r3,31
 40021d8:	10c5883a 	add	r2,r2,r3
 40021dc:	1005d07a 	srai	r2,r2,1
 40021e0:	1007883a 	mov	r3,r2
 40021e4:	00810074 	movhi	r2,1025
 40021e8:	108c0604 	addi	r2,r2,12312
 40021ec:	10c0000d 	sth	r3,0(r2)
 40021f0:	00000a06 	br	400221c <Read_Ads7846+0x39c>
        else
            screen.y = (temp[1] + temp[2]) / 2;
 40021f4:	e0fff117 	ldw	r3,-60(fp)
 40021f8:	e0bff217 	ldw	r2,-56(fp)
 40021fc:	1887883a 	add	r3,r3,r2
 4002200:	1804d7fa 	srli	r2,r3,31
 4002204:	10c5883a 	add	r2,r2,r3
 4002208:	1005d07a 	srai	r2,r2,1
 400220c:	1007883a 	mov	r3,r2
 4002210:	00810074 	movhi	r2,1025
 4002214:	108c0604 	addi	r2,r2,12312
 4002218:	10c0000d 	sth	r3,0(r2)

        return &screen;  // Return the averaged coordinates
 400221c:	d1201284 	addi	r4,gp,-32694
 4002220:	e13ff915 	stw	r4,-28(fp)
 4002224:	00000106 	br	400222c <Read_Ads7846+0x3ac>
    }

    return 0;  // Return NULL if less than three readings are obtained
 4002228:	e03ff915 	stw	zero,-28(fp)
 400222c:	e0bff917 	ldw	r2,-28(fp)
}
 4002230:	e037883a 	mov	sp,fp
 4002234:	dfc00117 	ldw	ra,4(sp)
 4002238:	df000017 	ldw	fp,0(sp)
 400223c:	dec00204 	addi	sp,sp,8
 4002240:	f800283a 	ret

04002244 <setCalibrationMatrix>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
alt_u8 setCalibrationMatrix(Coordinate *displayPtr, Coordinate *screenPtr, Matrix *matrixPtr)
{
 4002244:	defffa04 	addi	sp,sp,-24
 4002248:	dfc00515 	stw	ra,20(sp)
 400224c:	df000415 	stw	fp,16(sp)
 4002250:	df000404 	addi	fp,sp,16
 4002254:	e13ffd15 	stw	r4,-12(fp)
 4002258:	e17ffe15 	stw	r5,-8(fp)
 400225c:	e1bfff15 	stw	r6,-4(fp)
    alt_u8 retTHRESHOLD = 1; // Default return value, set to 1 if successful
 4002260:	00800044 	movi	r2,1
 4002264:	e0bffc05 	stb	r2,-16(fp)
    matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 4002268:	e0bffe17 	ldw	r2,-8(fp)
 400226c:	1080000b 	ldhu	r2,0(r2)
 4002270:	10ffffcc 	andi	r3,r2,65535
 4002274:	e0bffe17 	ldw	r2,-8(fp)
 4002278:	10800204 	addi	r2,r2,8
 400227c:	1080000b 	ldhu	r2,0(r2)
 4002280:	10bfffcc 	andi	r2,r2,65535
 4002284:	1889c83a 	sub	r4,r3,r2
 4002288:	e0bffe17 	ldw	r2,-8(fp)
 400228c:	10800104 	addi	r2,r2,4
 4002290:	1080008b 	ldhu	r2,2(r2)
 4002294:	10ffffcc 	andi	r3,r2,65535
 4002298:	e0bffe17 	ldw	r2,-8(fp)
 400229c:	10800204 	addi	r2,r2,8
 40022a0:	1080008b 	ldhu	r2,2(r2)
 40022a4:	10bfffcc 	andi	r2,r2,65535
 40022a8:	1885c83a 	sub	r2,r3,r2
 40022ac:	208b383a 	mul	r5,r4,r2
 40022b0:	e0bffe17 	ldw	r2,-8(fp)
 40022b4:	10800104 	addi	r2,r2,4
 40022b8:	1080000b 	ldhu	r2,0(r2)
 40022bc:	10ffffcc 	andi	r3,r2,65535
 40022c0:	e0bffe17 	ldw	r2,-8(fp)
 40022c4:	10800204 	addi	r2,r2,8
 40022c8:	1080000b 	ldhu	r2,0(r2)
 40022cc:	10bfffcc 	andi	r2,r2,65535
 40022d0:	1889c83a 	sub	r4,r3,r2
 40022d4:	e0bffe17 	ldw	r2,-8(fp)
 40022d8:	1080008b 	ldhu	r2,2(r2)
 40022dc:	10ffffcc 	andi	r3,r2,65535
 40022e0:	e0bffe17 	ldw	r2,-8(fp)
 40022e4:	10800204 	addi	r2,r2,8
 40022e8:	1080008b 	ldhu	r2,2(r2)
 40022ec:	10bfffcc 	andi	r2,r2,65535
 40022f0:	1885c83a 	sub	r2,r3,r2
 40022f4:	2085383a 	mul	r2,r4,r2
 40022f8:	2889c83a 	sub	r4,r5,r2
 40022fc:	40039f00 	call	40039f0 <__floatsidf>
 4002300:	1009883a 	mov	r4,r2
 4002304:	180b883a 	mov	r5,r3
 4002308:	e0bfff17 	ldw	r2,-4(fp)
 400230c:	11000c15 	stw	r4,48(r2)
 4002310:	11400d15 	stw	r5,52(r2)
                         ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y));

    if (matrixPtr->Divider == 0)
 4002314:	e13fff17 	ldw	r4,-4(fp)
 4002318:	20800c17 	ldw	r2,48(r4)
 400231c:	20c00d17 	ldw	r3,52(r4)
 4002320:	1009883a 	mov	r4,r2
 4002324:	180b883a 	mov	r5,r3
 4002328:	000d883a 	mov	r6,zero
 400232c:	000f883a 	mov	r7,zero
 4002330:	40038580 	call	4003858 <__eqdf2>
 4002334:	1005003a 	cmpeq	r2,r2,zero
 4002338:	1000011e 	bne	r2,zero,4002340 <setCalibrationMatrix+0xfc>
 400233c:	00000206 	br	4002348 <setCalibrationMatrix+0x104>
    {
        retTHRESHOLD = 0; // Set return value to 0 if the division is not possible
 4002340:	e03ffc05 	stb	zero,-16(fp)
 4002344:	00014206 	br	4002850 <setCalibrationMatrix+0x60c>
    }
    else
    {
        // Calculate calibration matrix coefficients
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 4002348:	e0bffd17 	ldw	r2,-12(fp)
 400234c:	1080000b 	ldhu	r2,0(r2)
 4002350:	10ffffcc 	andi	r3,r2,65535
 4002354:	e0bffd17 	ldw	r2,-12(fp)
 4002358:	10800204 	addi	r2,r2,8
 400235c:	1080000b 	ldhu	r2,0(r2)
 4002360:	10bfffcc 	andi	r2,r2,65535
 4002364:	1889c83a 	sub	r4,r3,r2
 4002368:	e0bffe17 	ldw	r2,-8(fp)
 400236c:	10800104 	addi	r2,r2,4
 4002370:	1080008b 	ldhu	r2,2(r2)
 4002374:	10ffffcc 	andi	r3,r2,65535
 4002378:	e0bffe17 	ldw	r2,-8(fp)
 400237c:	10800204 	addi	r2,r2,8
 4002380:	1080008b 	ldhu	r2,2(r2)
 4002384:	10bfffcc 	andi	r2,r2,65535
 4002388:	1885c83a 	sub	r2,r3,r2
 400238c:	208b383a 	mul	r5,r4,r2
 4002390:	e0bffd17 	ldw	r2,-12(fp)
 4002394:	10800104 	addi	r2,r2,4
 4002398:	1080000b 	ldhu	r2,0(r2)
 400239c:	10ffffcc 	andi	r3,r2,65535
 40023a0:	e0bffd17 	ldw	r2,-12(fp)
 40023a4:	10800204 	addi	r2,r2,8
 40023a8:	1080000b 	ldhu	r2,0(r2)
 40023ac:	10bfffcc 	andi	r2,r2,65535
 40023b0:	1889c83a 	sub	r4,r3,r2
 40023b4:	e0bffe17 	ldw	r2,-8(fp)
 40023b8:	1080008b 	ldhu	r2,2(r2)
 40023bc:	10ffffcc 	andi	r3,r2,65535
 40023c0:	e0bffe17 	ldw	r2,-8(fp)
 40023c4:	10800204 	addi	r2,r2,8
 40023c8:	1080008b 	ldhu	r2,2(r2)
 40023cc:	10bfffcc 	andi	r2,r2,65535
 40023d0:	1885c83a 	sub	r2,r3,r2
 40023d4:	2085383a 	mul	r2,r4,r2
 40023d8:	2889c83a 	sub	r4,r5,r2
 40023dc:	40039f00 	call	40039f0 <__floatsidf>
 40023e0:	1009883a 	mov	r4,r2
 40023e4:	180b883a 	mov	r5,r3
 40023e8:	e0bfff17 	ldw	r2,-4(fp)
 40023ec:	11000015 	stw	r4,0(r2)
 40023f0:	11400115 	stw	r5,4(r2)
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
 40023f4:	e0bffe17 	ldw	r2,-8(fp)
 40023f8:	1080000b 	ldhu	r2,0(r2)
 40023fc:	10ffffcc 	andi	r3,r2,65535
 4002400:	e0bffe17 	ldw	r2,-8(fp)
 4002404:	10800204 	addi	r2,r2,8
 4002408:	1080000b 	ldhu	r2,0(r2)
 400240c:	10bfffcc 	andi	r2,r2,65535
 4002410:	1889c83a 	sub	r4,r3,r2
 4002414:	e0bffd17 	ldw	r2,-12(fp)
 4002418:	10800104 	addi	r2,r2,4
 400241c:	1080000b 	ldhu	r2,0(r2)
 4002420:	10ffffcc 	andi	r3,r2,65535
 4002424:	e0bffd17 	ldw	r2,-12(fp)
 4002428:	10800204 	addi	r2,r2,8
 400242c:	1080000b 	ldhu	r2,0(r2)
 4002430:	10bfffcc 	andi	r2,r2,65535
 4002434:	1885c83a 	sub	r2,r3,r2
 4002438:	208b383a 	mul	r5,r4,r2
 400243c:	e0bffd17 	ldw	r2,-12(fp)
 4002440:	1080000b 	ldhu	r2,0(r2)
 4002444:	10ffffcc 	andi	r3,r2,65535
 4002448:	e0bffd17 	ldw	r2,-12(fp)
 400244c:	10800204 	addi	r2,r2,8
 4002450:	1080000b 	ldhu	r2,0(r2)
 4002454:	10bfffcc 	andi	r2,r2,65535
 4002458:	1889c83a 	sub	r4,r3,r2
 400245c:	e0bffe17 	ldw	r2,-8(fp)
 4002460:	10800104 	addi	r2,r2,4
 4002464:	1080000b 	ldhu	r2,0(r2)
 4002468:	10ffffcc 	andi	r3,r2,65535
 400246c:	e0bffe17 	ldw	r2,-8(fp)
 4002470:	10800204 	addi	r2,r2,8
 4002474:	1080000b 	ldhu	r2,0(r2)
 4002478:	10bfffcc 	andi	r2,r2,65535
 400247c:	1885c83a 	sub	r2,r3,r2
 4002480:	2085383a 	mul	r2,r4,r2
 4002484:	2889c83a 	sub	r4,r5,r2
 4002488:	40039f00 	call	40039f0 <__floatsidf>
 400248c:	1009883a 	mov	r4,r2
 4002490:	180b883a 	mov	r5,r3
 4002494:	e0bfff17 	ldw	r2,-4(fp)
 4002498:	11000215 	stw	r4,8(r2)
 400249c:	11400315 	stw	r5,12(r2)
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 40024a0:	e0bffe17 	ldw	r2,-8(fp)
 40024a4:	10800204 	addi	r2,r2,8
 40024a8:	1080000b 	ldhu	r2,0(r2)
 40024ac:	10ffffcc 	andi	r3,r2,65535
 40024b0:	e0bffd17 	ldw	r2,-12(fp)
 40024b4:	10800104 	addi	r2,r2,4
 40024b8:	1080000b 	ldhu	r2,0(r2)
 40024bc:	10bfffcc 	andi	r2,r2,65535
 40024c0:	1889383a 	mul	r4,r3,r2
 40024c4:	e0bffe17 	ldw	r2,-8(fp)
 40024c8:	10800104 	addi	r2,r2,4
 40024cc:	1080000b 	ldhu	r2,0(r2)
 40024d0:	10ffffcc 	andi	r3,r2,65535
 40024d4:	e0bffd17 	ldw	r2,-12(fp)
 40024d8:	10800204 	addi	r2,r2,8
 40024dc:	1080000b 	ldhu	r2,0(r2)
 40024e0:	10bfffcc 	andi	r2,r2,65535
 40024e4:	1885383a 	mul	r2,r3,r2
 40024e8:	2087c83a 	sub	r3,r4,r2
 40024ec:	e0bffe17 	ldw	r2,-8(fp)
 40024f0:	1080008b 	ldhu	r2,2(r2)
 40024f4:	10bfffcc 	andi	r2,r2,65535
 40024f8:	188b383a 	mul	r5,r3,r2
 40024fc:	e0bffe17 	ldw	r2,-8(fp)
 4002500:	1080000b 	ldhu	r2,0(r2)
 4002504:	10ffffcc 	andi	r3,r2,65535
 4002508:	e0bffd17 	ldw	r2,-12(fp)
 400250c:	10800204 	addi	r2,r2,8
 4002510:	1080000b 	ldhu	r2,0(r2)
 4002514:	10bfffcc 	andi	r2,r2,65535
 4002518:	1889383a 	mul	r4,r3,r2
 400251c:	e0bffe17 	ldw	r2,-8(fp)
 4002520:	10800204 	addi	r2,r2,8
 4002524:	1080000b 	ldhu	r2,0(r2)
 4002528:	10ffffcc 	andi	r3,r2,65535
 400252c:	e0bffd17 	ldw	r2,-12(fp)
 4002530:	1080000b 	ldhu	r2,0(r2)
 4002534:	10bfffcc 	andi	r2,r2,65535
 4002538:	1885383a 	mul	r2,r3,r2
 400253c:	2087c83a 	sub	r3,r4,r2
 4002540:	e0bffe17 	ldw	r2,-8(fp)
 4002544:	10800104 	addi	r2,r2,4
 4002548:	1080008b 	ldhu	r2,2(r2)
 400254c:	10bfffcc 	andi	r2,r2,65535
 4002550:	1885383a 	mul	r2,r3,r2
 4002554:	288b883a 	add	r5,r5,r2
 4002558:	e0bffe17 	ldw	r2,-8(fp)
 400255c:	10800104 	addi	r2,r2,4
 4002560:	1080000b 	ldhu	r2,0(r2)
 4002564:	10ffffcc 	andi	r3,r2,65535
 4002568:	e0bffd17 	ldw	r2,-12(fp)
 400256c:	1080000b 	ldhu	r2,0(r2)
 4002570:	10bfffcc 	andi	r2,r2,65535
 4002574:	1889383a 	mul	r4,r3,r2
 4002578:	e0bffe17 	ldw	r2,-8(fp)
 400257c:	1080000b 	ldhu	r2,0(r2)
 4002580:	10ffffcc 	andi	r3,r2,65535
 4002584:	e0bffd17 	ldw	r2,-12(fp)
 4002588:	10800104 	addi	r2,r2,4
 400258c:	1080000b 	ldhu	r2,0(r2)
 4002590:	10bfffcc 	andi	r2,r2,65535
 4002594:	1885383a 	mul	r2,r3,r2
 4002598:	2087c83a 	sub	r3,r4,r2
 400259c:	e0bffe17 	ldw	r2,-8(fp)
 40025a0:	10800204 	addi	r2,r2,8
 40025a4:	1080008b 	ldhu	r2,2(r2)
 40025a8:	10bfffcc 	andi	r2,r2,65535
 40025ac:	1885383a 	mul	r2,r3,r2
 40025b0:	2889883a 	add	r4,r5,r2
 40025b4:	40039f00 	call	40039f0 <__floatsidf>
 40025b8:	1009883a 	mov	r4,r2
 40025bc:	180b883a 	mov	r5,r3
 40025c0:	e0bfff17 	ldw	r2,-4(fp)
 40025c4:	11000415 	stw	r4,16(r2)
 40025c8:	11400515 	stw	r5,20(r2)
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y;

        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
 40025cc:	e0bffd17 	ldw	r2,-12(fp)
 40025d0:	1080008b 	ldhu	r2,2(r2)
 40025d4:	10ffffcc 	andi	r3,r2,65535
 40025d8:	e0bffd17 	ldw	r2,-12(fp)
 40025dc:	10800204 	addi	r2,r2,8
 40025e0:	1080008b 	ldhu	r2,2(r2)
 40025e4:	10bfffcc 	andi	r2,r2,65535
 40025e8:	1889c83a 	sub	r4,r3,r2
 40025ec:	e0bffe17 	ldw	r2,-8(fp)
 40025f0:	10800104 	addi	r2,r2,4
 40025f4:	1080008b 	ldhu	r2,2(r2)
 40025f8:	10ffffcc 	andi	r3,r2,65535
 40025fc:	e0bffe17 	ldw	r2,-8(fp)
 4002600:	10800204 	addi	r2,r2,8
 4002604:	1080008b 	ldhu	r2,2(r2)
 4002608:	10bfffcc 	andi	r2,r2,65535
 400260c:	1885c83a 	sub	r2,r3,r2
 4002610:	208b383a 	mul	r5,r4,r2
 4002614:	e0bffd17 	ldw	r2,-12(fp)
 4002618:	10800104 	addi	r2,r2,4
 400261c:	1080008b 	ldhu	r2,2(r2)
 4002620:	10ffffcc 	andi	r3,r2,65535
 4002624:	e0bffd17 	ldw	r2,-12(fp)
 4002628:	10800204 	addi	r2,r2,8
 400262c:	1080008b 	ldhu	r2,2(r2)
 4002630:	10bfffcc 	andi	r2,r2,65535
 4002634:	1889c83a 	sub	r4,r3,r2
 4002638:	e0bffe17 	ldw	r2,-8(fp)
 400263c:	1080008b 	ldhu	r2,2(r2)
 4002640:	10ffffcc 	andi	r3,r2,65535
 4002644:	e0bffe17 	ldw	r2,-8(fp)
 4002648:	10800204 	addi	r2,r2,8
 400264c:	1080008b 	ldhu	r2,2(r2)
 4002650:	10bfffcc 	andi	r2,r2,65535
 4002654:	1885c83a 	sub	r2,r3,r2
 4002658:	2085383a 	mul	r2,r4,r2
 400265c:	2889c83a 	sub	r4,r5,r2
 4002660:	40039f00 	call	40039f0 <__floatsidf>
 4002664:	1009883a 	mov	r4,r2
 4002668:	180b883a 	mov	r5,r3
 400266c:	e0bfff17 	ldw	r2,-4(fp)
 4002670:	11000615 	stw	r4,24(r2)
 4002674:	11400715 	stw	r5,28(r2)
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
 4002678:	e0bffe17 	ldw	r2,-8(fp)
 400267c:	1080000b 	ldhu	r2,0(r2)
 4002680:	10ffffcc 	andi	r3,r2,65535
 4002684:	e0bffe17 	ldw	r2,-8(fp)
 4002688:	10800204 	addi	r2,r2,8
 400268c:	1080000b 	ldhu	r2,0(r2)
 4002690:	10bfffcc 	andi	r2,r2,65535
 4002694:	1889c83a 	sub	r4,r3,r2
 4002698:	e0bffd17 	ldw	r2,-12(fp)
 400269c:	10800104 	addi	r2,r2,4
 40026a0:	1080008b 	ldhu	r2,2(r2)
 40026a4:	10ffffcc 	andi	r3,r2,65535
 40026a8:	e0bffd17 	ldw	r2,-12(fp)
 40026ac:	10800204 	addi	r2,r2,8
 40026b0:	1080008b 	ldhu	r2,2(r2)
 40026b4:	10bfffcc 	andi	r2,r2,65535
 40026b8:	1885c83a 	sub	r2,r3,r2
 40026bc:	208b383a 	mul	r5,r4,r2
 40026c0:	e0bffd17 	ldw	r2,-12(fp)
 40026c4:	1080008b 	ldhu	r2,2(r2)
 40026c8:	10ffffcc 	andi	r3,r2,65535
 40026cc:	e0bffd17 	ldw	r2,-12(fp)
 40026d0:	10800204 	addi	r2,r2,8
 40026d4:	1080008b 	ldhu	r2,2(r2)
 40026d8:	10bfffcc 	andi	r2,r2,65535
 40026dc:	1889c83a 	sub	r4,r3,r2
 40026e0:	e0bffe17 	ldw	r2,-8(fp)
 40026e4:	10800104 	addi	r2,r2,4
 40026e8:	1080000b 	ldhu	r2,0(r2)
 40026ec:	10ffffcc 	andi	r3,r2,65535
 40026f0:	e0bffe17 	ldw	r2,-8(fp)
 40026f4:	10800204 	addi	r2,r2,8
 40026f8:	1080000b 	ldhu	r2,0(r2)
 40026fc:	10bfffcc 	andi	r2,r2,65535
 4002700:	1885c83a 	sub	r2,r3,r2
 4002704:	2085383a 	mul	r2,r4,r2
 4002708:	2889c83a 	sub	r4,r5,r2
 400270c:	40039f00 	call	40039f0 <__floatsidf>
 4002710:	1009883a 	mov	r4,r2
 4002714:	180b883a 	mov	r5,r3
 4002718:	e0bfff17 	ldw	r2,-4(fp)
 400271c:	11000815 	stw	r4,32(r2)
 4002720:	11400915 	stw	r5,36(r2)
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 4002724:	e0bffe17 	ldw	r2,-8(fp)
 4002728:	10800204 	addi	r2,r2,8
 400272c:	1080000b 	ldhu	r2,0(r2)
 4002730:	10ffffcc 	andi	r3,r2,65535
 4002734:	e0bffd17 	ldw	r2,-12(fp)
 4002738:	10800104 	addi	r2,r2,4
 400273c:	1080008b 	ldhu	r2,2(r2)
 4002740:	10bfffcc 	andi	r2,r2,65535
 4002744:	1889383a 	mul	r4,r3,r2
 4002748:	e0bffe17 	ldw	r2,-8(fp)
 400274c:	10800104 	addi	r2,r2,4
 4002750:	1080000b 	ldhu	r2,0(r2)
 4002754:	10ffffcc 	andi	r3,r2,65535
 4002758:	e0bffd17 	ldw	r2,-12(fp)
 400275c:	10800204 	addi	r2,r2,8
 4002760:	1080008b 	ldhu	r2,2(r2)
 4002764:	10bfffcc 	andi	r2,r2,65535
 4002768:	1885383a 	mul	r2,r3,r2
 400276c:	2087c83a 	sub	r3,r4,r2
 4002770:	e0bffe17 	ldw	r2,-8(fp)
 4002774:	1080008b 	ldhu	r2,2(r2)
 4002778:	10bfffcc 	andi	r2,r2,65535
 400277c:	188b383a 	mul	r5,r3,r2
 4002780:	e0bffe17 	ldw	r2,-8(fp)
 4002784:	1080000b 	ldhu	r2,0(r2)
 4002788:	10ffffcc 	andi	r3,r2,65535
 400278c:	e0bffd17 	ldw	r2,-12(fp)
 4002790:	10800204 	addi	r2,r2,8
 4002794:	1080008b 	ldhu	r2,2(r2)
 4002798:	10bfffcc 	andi	r2,r2,65535
 400279c:	1889383a 	mul	r4,r3,r2
 40027a0:	e0bffe17 	ldw	r2,-8(fp)
 40027a4:	10800204 	addi	r2,r2,8
 40027a8:	1080000b 	ldhu	r2,0(r2)
 40027ac:	10ffffcc 	andi	r3,r2,65535
 40027b0:	e0bffd17 	ldw	r2,-12(fp)
 40027b4:	1080008b 	ldhu	r2,2(r2)
 40027b8:	10bfffcc 	andi	r2,r2,65535
 40027bc:	1885383a 	mul	r2,r3,r2
 40027c0:	2087c83a 	sub	r3,r4,r2
 40027c4:	e0bffe17 	ldw	r2,-8(fp)
 40027c8:	10800104 	addi	r2,r2,4
 40027cc:	1080008b 	ldhu	r2,2(r2)
 40027d0:	10bfffcc 	andi	r2,r2,65535
 40027d4:	1885383a 	mul	r2,r3,r2
 40027d8:	288b883a 	add	r5,r5,r2
 40027dc:	e0bffe17 	ldw	r2,-8(fp)
 40027e0:	10800104 	addi	r2,r2,4
 40027e4:	1080000b 	ldhu	r2,0(r2)
 40027e8:	10ffffcc 	andi	r3,r2,65535
 40027ec:	e0bffd17 	ldw	r2,-12(fp)
 40027f0:	1080008b 	ldhu	r2,2(r2)
 40027f4:	10bfffcc 	andi	r2,r2,65535
 40027f8:	1889383a 	mul	r4,r3,r2
 40027fc:	e0bffe17 	ldw	r2,-8(fp)
 4002800:	1080000b 	ldhu	r2,0(r2)
 4002804:	10ffffcc 	andi	r3,r2,65535
 4002808:	e0bffd17 	ldw	r2,-12(fp)
 400280c:	10800104 	addi	r2,r2,4
 4002810:	1080008b 	ldhu	r2,2(r2)
 4002814:	10bfffcc 	andi	r2,r2,65535
 4002818:	1885383a 	mul	r2,r3,r2
 400281c:	2087c83a 	sub	r3,r4,r2
 4002820:	e0bffe17 	ldw	r2,-8(fp)
 4002824:	10800204 	addi	r2,r2,8
 4002828:	1080008b 	ldhu	r2,2(r2)
 400282c:	10bfffcc 	andi	r2,r2,65535
 4002830:	1885383a 	mul	r2,r3,r2
 4002834:	2889883a 	add	r4,r5,r2
 4002838:	40039f00 	call	40039f0 <__floatsidf>
 400283c:	1009883a 	mov	r4,r2
 4002840:	180b883a 	mov	r5,r3
 4002844:	e0bfff17 	ldw	r2,-4(fp)
 4002848:	11000a15 	stw	r4,40(r2)
 400284c:	11400b15 	stw	r5,44(r2)
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
                        (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y;
    }
    return (retTHRESHOLD);
 4002850:	e0bffc03 	ldbu	r2,-16(fp)
}
 4002854:	e037883a 	mov	sp,fp
 4002858:	dfc00117 	ldw	ra,4(sp)
 400285c:	df000017 	ldw	fp,0(sp)
 4002860:	dec00204 	addi	sp,sp,8
 4002864:	f800283a 	ret

04002868 <getDisplayPoint>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
alt_u8 getDisplayPoint(Coordinate *displayPtr, Coordinate *screenPtr, Matrix *matrixPtr)
{
 4002868:	defff604 	addi	sp,sp,-40
 400286c:	dfc00915 	stw	ra,36(sp)
 4002870:	df000815 	stw	fp,32(sp)
 4002874:	dcc00715 	stw	r19,28(sp)
 4002878:	dc800615 	stw	r18,24(sp)
 400287c:	dc400515 	stw	r17,20(sp)
 4002880:	dc000415 	stw	r16,16(sp)
 4002884:	df000404 	addi	fp,sp,16
 4002888:	e13ffd15 	stw	r4,-12(fp)
 400288c:	e17ffe15 	stw	r5,-8(fp)
 4002890:	e1bfff15 	stw	r6,-4(fp)
    alt_u8 retTHRESHOLD = 1; // Default return value, set to 1 if successful
 4002894:	00800044 	movi	r2,1
 4002898:	e0bffc05 	stb	r2,-16(fp)

    if (matrixPtr->Divider != 0)
 400289c:	e13fff17 	ldw	r4,-4(fp)
 40028a0:	20800c17 	ldw	r2,48(r4)
 40028a4:	20c00d17 	ldw	r3,52(r4)
 40028a8:	1009883a 	mov	r4,r2
 40028ac:	180b883a 	mov	r5,r3
 40028b0:	000d883a 	mov	r6,zero
 40028b4:	000f883a 	mov	r7,zero
 40028b8:	40038e00 	call	40038e0 <__nedf2>
 40028bc:	1004c03a 	cmpne	r2,r2,zero
 40028c0:	1000011e 	bne	r2,zero,40028c8 <getDisplayPoint+0x60>
 40028c4:	00009706 	br	4002b24 <getDisplayPoint+0x2bc>
    {
        // XD = AX + BY + C
        displayPtr->x = ((matrixPtr->An * screenPtr->x) +
 40028c8:	e0bfff17 	ldw	r2,-4(fp)
 40028cc:	14000017 	ldw	r16,0(r2)
 40028d0:	14400117 	ldw	r17,4(r2)
 40028d4:	e0bffe17 	ldw	r2,-8(fp)
 40028d8:	1080000b 	ldhu	r2,0(r2)
 40028dc:	113fffcc 	andi	r4,r2,65535
 40028e0:	40039f00 	call	40039f0 <__floatsidf>
 40028e4:	100f883a 	mov	r7,r2
 40028e8:	1811883a 	mov	r8,r3
 40028ec:	8009883a 	mov	r4,r16
 40028f0:	880b883a 	mov	r5,r17
 40028f4:	380d883a 	mov	r6,r7
 40028f8:	400f883a 	mov	r7,r8
 40028fc:	400323c0 	call	400323c <__muldf3>
 4002900:	1009883a 	mov	r4,r2
 4002904:	180b883a 	mov	r5,r3
 4002908:	2025883a 	mov	r18,r4
 400290c:	2827883a 	mov	r19,r5
 4002910:	e0bfff17 	ldw	r2,-4(fp)
 4002914:	14000217 	ldw	r16,8(r2)
 4002918:	14400317 	ldw	r17,12(r2)
 400291c:	e0bffe17 	ldw	r2,-8(fp)
 4002920:	1080008b 	ldhu	r2,2(r2)
 4002924:	113fffcc 	andi	r4,r2,65535
 4002928:	40039f00 	call	40039f0 <__floatsidf>
 400292c:	100f883a 	mov	r7,r2
 4002930:	1811883a 	mov	r8,r3
 4002934:	8009883a 	mov	r4,r16
 4002938:	880b883a 	mov	r5,r17
 400293c:	380d883a 	mov	r6,r7
 4002940:	400f883a 	mov	r7,r8
 4002944:	400323c0 	call	400323c <__muldf3>
 4002948:	1009883a 	mov	r4,r2
 400294c:	180b883a 	mov	r5,r3
 4002950:	2005883a 	mov	r2,r4
 4002954:	2807883a 	mov	r3,r5
 4002958:	9009883a 	mov	r4,r18
 400295c:	980b883a 	mov	r5,r19
 4002960:	100d883a 	mov	r6,r2
 4002964:	180f883a 	mov	r7,r3
 4002968:	40031c80 	call	40031c8 <__adddf3>
 400296c:	1009883a 	mov	r4,r2
 4002970:	180b883a 	mov	r5,r3
 4002974:	200d883a 	mov	r6,r4
 4002978:	280f883a 	mov	r7,r5
 400297c:	e13fff17 	ldw	r4,-4(fp)
 4002980:	20800417 	ldw	r2,16(r4)
 4002984:	20c00517 	ldw	r3,20(r4)
 4002988:	3009883a 	mov	r4,r6
 400298c:	380b883a 	mov	r5,r7
 4002990:	100d883a 	mov	r6,r2
 4002994:	180f883a 	mov	r7,r3
 4002998:	40031c80 	call	40031c8 <__adddf3>
 400299c:	1009883a 	mov	r4,r2
 40029a0:	180b883a 	mov	r5,r3
 40029a4:	200d883a 	mov	r6,r4
 40029a8:	280f883a 	mov	r7,r5
 40029ac:	e13fff17 	ldw	r4,-4(fp)
 40029b0:	20800c17 	ldw	r2,48(r4)
 40029b4:	20c00d17 	ldw	r3,52(r4)
 40029b8:	3009883a 	mov	r4,r6
 40029bc:	380b883a 	mov	r5,r7
 40029c0:	100d883a 	mov	r6,r2
 40029c4:	180f883a 	mov	r7,r3
 40029c8:	40036000 	call	4003600 <__divdf3>
 40029cc:	1009883a 	mov	r4,r2
 40029d0:	180b883a 	mov	r5,r3
 40029d4:	2005883a 	mov	r2,r4
 40029d8:	2807883a 	mov	r3,r5
 40029dc:	1009883a 	mov	r4,r2
 40029e0:	180b883a 	mov	r5,r3
 40029e4:	4002c940 	call	4002c94 <__fixunsdfsi>
 40029e8:	1007883a 	mov	r3,r2
 40029ec:	e0bffd17 	ldw	r2,-12(fp)
 40029f0:	10c0000d 	sth	r3,0(r2)
                         (matrixPtr->Bn * screenPtr->y) +
                         matrixPtr->Cn) / matrixPtr->Divider;

        // YD = DX + EY + F
        displayPtr->y = ((matrixPtr->Dn * screenPtr->x) +
 40029f4:	e0bfff17 	ldw	r2,-4(fp)
 40029f8:	14000617 	ldw	r16,24(r2)
 40029fc:	14400717 	ldw	r17,28(r2)
 4002a00:	e0bffe17 	ldw	r2,-8(fp)
 4002a04:	1080000b 	ldhu	r2,0(r2)
 4002a08:	113fffcc 	andi	r4,r2,65535
 4002a0c:	40039f00 	call	40039f0 <__floatsidf>
 4002a10:	100f883a 	mov	r7,r2
 4002a14:	1811883a 	mov	r8,r3
 4002a18:	8009883a 	mov	r4,r16
 4002a1c:	880b883a 	mov	r5,r17
 4002a20:	380d883a 	mov	r6,r7
 4002a24:	400f883a 	mov	r7,r8
 4002a28:	400323c0 	call	400323c <__muldf3>
 4002a2c:	1009883a 	mov	r4,r2
 4002a30:	180b883a 	mov	r5,r3
 4002a34:	2025883a 	mov	r18,r4
 4002a38:	2827883a 	mov	r19,r5
 4002a3c:	e0bfff17 	ldw	r2,-4(fp)
 4002a40:	14000817 	ldw	r16,32(r2)
 4002a44:	14400917 	ldw	r17,36(r2)
 4002a48:	e0bffe17 	ldw	r2,-8(fp)
 4002a4c:	1080008b 	ldhu	r2,2(r2)
 4002a50:	113fffcc 	andi	r4,r2,65535
 4002a54:	40039f00 	call	40039f0 <__floatsidf>
 4002a58:	100f883a 	mov	r7,r2
 4002a5c:	1811883a 	mov	r8,r3
 4002a60:	8009883a 	mov	r4,r16
 4002a64:	880b883a 	mov	r5,r17
 4002a68:	380d883a 	mov	r6,r7
 4002a6c:	400f883a 	mov	r7,r8
 4002a70:	400323c0 	call	400323c <__muldf3>
 4002a74:	1009883a 	mov	r4,r2
 4002a78:	180b883a 	mov	r5,r3
 4002a7c:	2005883a 	mov	r2,r4
 4002a80:	2807883a 	mov	r3,r5
 4002a84:	9009883a 	mov	r4,r18
 4002a88:	980b883a 	mov	r5,r19
 4002a8c:	100d883a 	mov	r6,r2
 4002a90:	180f883a 	mov	r7,r3
 4002a94:	40031c80 	call	40031c8 <__adddf3>
 4002a98:	1009883a 	mov	r4,r2
 4002a9c:	180b883a 	mov	r5,r3
 4002aa0:	200d883a 	mov	r6,r4
 4002aa4:	280f883a 	mov	r7,r5
 4002aa8:	e13fff17 	ldw	r4,-4(fp)
 4002aac:	20800a17 	ldw	r2,40(r4)
 4002ab0:	20c00b17 	ldw	r3,44(r4)
 4002ab4:	3009883a 	mov	r4,r6
 4002ab8:	380b883a 	mov	r5,r7
 4002abc:	100d883a 	mov	r6,r2
 4002ac0:	180f883a 	mov	r7,r3
 4002ac4:	40031c80 	call	40031c8 <__adddf3>
 4002ac8:	1009883a 	mov	r4,r2
 4002acc:	180b883a 	mov	r5,r3
 4002ad0:	200d883a 	mov	r6,r4
 4002ad4:	280f883a 	mov	r7,r5
 4002ad8:	e13fff17 	ldw	r4,-4(fp)
 4002adc:	20800c17 	ldw	r2,48(r4)
 4002ae0:	20c00d17 	ldw	r3,52(r4)
 4002ae4:	3009883a 	mov	r4,r6
 4002ae8:	380b883a 	mov	r5,r7
 4002aec:	100d883a 	mov	r6,r2
 4002af0:	180f883a 	mov	r7,r3
 4002af4:	40036000 	call	4003600 <__divdf3>
 4002af8:	1009883a 	mov	r4,r2
 4002afc:	180b883a 	mov	r5,r3
 4002b00:	2005883a 	mov	r2,r4
 4002b04:	2807883a 	mov	r3,r5
 4002b08:	1009883a 	mov	r4,r2
 4002b0c:	180b883a 	mov	r5,r3
 4002b10:	4002c940 	call	4002c94 <__fixunsdfsi>
 4002b14:	1007883a 	mov	r3,r2
 4002b18:	e0bffd17 	ldw	r2,-12(fp)
 4002b1c:	10c0008d 	sth	r3,2(r2)
 4002b20:	00000106 	br	4002b28 <getDisplayPoint+0x2c0>
                         (matrixPtr->En * screenPtr->y) +
                         matrixPtr->Fn) / matrixPtr->Divider;
    }
    else
    {
        retTHRESHOLD = 0; // Set return value to 0 if the division is not possible (Divider is 0)
 4002b24:	e03ffc05 	stb	zero,-16(fp)
    }

    return retTHRESHOLD;
 4002b28:	e0bffc03 	ldbu	r2,-16(fp)
}
 4002b2c:	e037883a 	mov	sp,fp
 4002b30:	dfc00517 	ldw	ra,20(sp)
 4002b34:	df000417 	ldw	fp,16(sp)
 4002b38:	dcc00317 	ldw	r19,12(sp)
 4002b3c:	dc800217 	ldw	r18,8(sp)
 4002b40:	dc400117 	ldw	r17,4(sp)
 4002b44:	dc000017 	ldw	r16,0(sp)
 4002b48:	dec00604 	addi	sp,sp,24
 4002b4c:	f800283a 	ret

04002b50 <TouchPanel_Calibrate>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void TouchPanel_Calibrate(void)
{
 4002b50:	defffb04 	addi	sp,sp,-20
 4002b54:	dfc00415 	stw	ra,16(sp)
 4002b58:	df000315 	stw	fp,12(sp)
 4002b5c:	df000304 	addi	fp,sp,12
    alt_u8 i;
    Coordinate *Ptr;

    for (i = 0; i < 3; i++)
 4002b60:	e03fff05 	stb	zero,-4(fp)
 4002b64:	00003a06 	br	4002c50 <TouchPanel_Calibrate+0x100>
    {
        LCD_Clear(Cyan);  // Clear the LCD with Cyan color
 4002b68:	011fffc4 	movi	r4,32767
 4002b6c:	4000bcc0 	call	4000bcc <LCD_Clear>
        GUI_Text(44, 10, "Touch crosshair to calibrate", Red, White);  // Display calibration instructions
 4002b70:	01810074 	movhi	r6,1025
 4002b74:	31845d04 	addi	r6,r6,4468
 4002b78:	00bfffd4 	movui	r2,65535
 4002b7c:	d8800015 	stw	r2,0(sp)
 4002b80:	01000b04 	movi	r4,44
 4002b84:	01400284 	movi	r5,10
 4002b88:	01fe0014 	movui	r7,63488
 4002b8c:	40013d00 	call	40013d0 <GUI_Text>
        delay_ms(500);  // Wait for 500 milliseconds
 4002b90:	01000234 	movhi	r4,8
 4002b94:	21284804 	addi	r4,r4,-24288
 4002b98:	400d9500 	call	400d950 <usleep>
        DrawCross(DisplaySample[i].x, DisplaySample[i].y);  // Draw a crosshair at a specific location on the screen
 4002b9c:	e0bfff03 	ldbu	r2,-4(fp)
 4002ba0:	00c10074 	movhi	r3,1025
 4002ba4:	18c53704 	addi	r3,r3,5340
 4002ba8:	1085883a 	add	r2,r2,r2
 4002bac:	1085883a 	add	r2,r2,r2
 4002bb0:	10c5883a 	add	r2,r2,r3
 4002bb4:	1080000b 	ldhu	r2,0(r2)
 4002bb8:	113fffcc 	andi	r4,r2,65535
 4002bbc:	e0bfff03 	ldbu	r2,-4(fp)
 4002bc0:	00c10074 	movhi	r3,1025
 4002bc4:	18c53704 	addi	r3,r3,5340
 4002bc8:	1085883a 	add	r2,r2,r2
 4002bcc:	1085883a 	add	r2,r2,r2
 4002bd0:	10c5883a 	add	r2,r2,r3
 4002bd4:	10800084 	addi	r2,r2,2
 4002bd8:	1080000b 	ldhu	r2,0(r2)
 4002bdc:	117fffcc 	andi	r5,r2,65535
 4002be0:	4001ba40 	call	4001ba4 <DrawCross>

        do
        {
            Ptr = Read_Ads7846();  // Read raw touch coordinates
 4002be4:	4001e800 	call	4001e80 <Read_Ads7846>
 4002be8:	e0bffe15 	stw	r2,-8(fp)
        } while (Ptr == (void *)0);  // Repeat until valid touch data is obtained
 4002bec:	e0bffe17 	ldw	r2,-8(fp)
 4002bf0:	1005003a 	cmpeq	r2,r2,zero
 4002bf4:	103ffb1e 	bne	r2,zero,4002be4 <TouchPanel_Calibrate+0x94>

        ScreenSample[i].x = Ptr->x;  // Store the raw touch x-coordinate
 4002bf8:	e0ffff03 	ldbu	r3,-4(fp)
 4002bfc:	e0bffe17 	ldw	r2,-8(fp)
 4002c00:	1140000b 	ldhu	r5,0(r2)
 4002c04:	01010074 	movhi	r4,1025
 4002c08:	210c1f04 	addi	r4,r4,12412
 4002c0c:	18c5883a 	add	r2,r3,r3
 4002c10:	1085883a 	add	r2,r2,r2
 4002c14:	1105883a 	add	r2,r2,r4
 4002c18:	1140000d 	sth	r5,0(r2)
        ScreenSample[i].y = Ptr->y;  // Store the raw touch y-coordinate
 4002c1c:	e0ffff03 	ldbu	r3,-4(fp)
 4002c20:	e0bffe17 	ldw	r2,-8(fp)
 4002c24:	1140008b 	ldhu	r5,2(r2)
 4002c28:	01010074 	movhi	r4,1025
 4002c2c:	210c1f04 	addi	r4,r4,12412
 4002c30:	18c5883a 	add	r2,r3,r3
 4002c34:	1085883a 	add	r2,r2,r2
 4002c38:	1105883a 	add	r2,r2,r4
 4002c3c:	10800084 	addi	r2,r2,2
 4002c40:	1140000d 	sth	r5,0(r2)
void TouchPanel_Calibrate(void)
{
    alt_u8 i;
    Coordinate *Ptr;

    for (i = 0; i < 3; i++)
 4002c44:	e0bfff03 	ldbu	r2,-4(fp)
 4002c48:	10800044 	addi	r2,r2,1
 4002c4c:	e0bfff05 	stb	r2,-4(fp)
 4002c50:	e0bfff03 	ldbu	r2,-4(fp)
 4002c54:	108000f0 	cmpltui	r2,r2,3
 4002c58:	103fc31e 	bne	r2,zero,4002b68 <TouchPanel_Calibrate+0x18>
        ScreenSample[i].x = Ptr->x;  // Store the raw touch x-coordinate
        ScreenSample[i].y = Ptr->y;  // Store the raw touch y-coordinate
    }

    // Calculate the calibration matrix using the collected samples
    setCalibrationMatrix(&DisplaySample[0], &ScreenSample[0], &matrix);
 4002c5c:	01010074 	movhi	r4,1025
 4002c60:	21053704 	addi	r4,r4,5340
 4002c64:	01410074 	movhi	r5,1025
 4002c68:	294c1f04 	addi	r5,r5,12412
 4002c6c:	01810074 	movhi	r6,1025
 4002c70:	318c2204 	addi	r6,r6,12424
 4002c74:	40022440 	call	4002244 <setCalibrationMatrix>

    // Clear the LCD with a custom color (RGB565CONVERT(200, 200, 120))
    LCD_Clear(RGB565CONVERT(200, 200, 120));
 4002c78:	013393d4 	movui	r4,52815
 4002c7c:	4000bcc0 	call	4000bcc <LCD_Clear>
}
 4002c80:	e037883a 	mov	sp,fp
 4002c84:	dfc00117 	ldw	ra,4(sp)
 4002c88:	df000017 	ldw	fp,0(sp)
 4002c8c:	dec00204 	addi	sp,sp,8
 4002c90:	f800283a 	ret

04002c94 <__fixunsdfsi>:
 4002c94:	defffb04 	addi	sp,sp,-20
 4002c98:	dc400115 	stw	r17,4(sp)
 4002c9c:	dc000015 	stw	r16,0(sp)
 4002ca0:	04507834 	movhi	r17,16864
 4002ca4:	0021883a 	mov	r16,zero
 4002ca8:	800d883a 	mov	r6,r16
 4002cac:	880f883a 	mov	r7,r17
 4002cb0:	dcc00315 	stw	r19,12(sp)
 4002cb4:	dc800215 	stw	r18,8(sp)
 4002cb8:	2827883a 	mov	r19,r5
 4002cbc:	2025883a 	mov	r18,r4
 4002cc0:	dfc00415 	stw	ra,16(sp)
 4002cc4:	40039680 	call	4003968 <__gedf2>
 4002cc8:	000d883a 	mov	r6,zero
 4002ccc:	880f883a 	mov	r7,r17
 4002cd0:	980b883a 	mov	r5,r19
 4002cd4:	9009883a 	mov	r4,r18
 4002cd8:	10000d16 	blt	r2,zero,4002d10 <__fixunsdfsi+0x7c>
 4002cdc:	40031480 	call	4003148 <__subdf3>
 4002ce0:	180b883a 	mov	r5,r3
 4002ce4:	1009883a 	mov	r4,r2
 4002ce8:	4003ae80 	call	4003ae8 <__fixdfsi>
 4002cec:	00e00034 	movhi	r3,32768
 4002cf0:	10c5883a 	add	r2,r2,r3
 4002cf4:	dfc00417 	ldw	ra,16(sp)
 4002cf8:	dcc00317 	ldw	r19,12(sp)
 4002cfc:	dc800217 	ldw	r18,8(sp)
 4002d00:	dc400117 	ldw	r17,4(sp)
 4002d04:	dc000017 	ldw	r16,0(sp)
 4002d08:	dec00504 	addi	sp,sp,20
 4002d0c:	f800283a 	ret
 4002d10:	980b883a 	mov	r5,r19
 4002d14:	9009883a 	mov	r4,r18
 4002d18:	4003ae80 	call	4003ae8 <__fixdfsi>
 4002d1c:	dfc00417 	ldw	ra,16(sp)
 4002d20:	dcc00317 	ldw	r19,12(sp)
 4002d24:	dc800217 	ldw	r18,8(sp)
 4002d28:	dc400117 	ldw	r17,4(sp)
 4002d2c:	dc000017 	ldw	r16,0(sp)
 4002d30:	dec00504 	addi	sp,sp,20
 4002d34:	f800283a 	ret

04002d38 <_fpadd_parts>:
 4002d38:	defff804 	addi	sp,sp,-32
 4002d3c:	dcc00315 	stw	r19,12(sp)
 4002d40:	2027883a 	mov	r19,r4
 4002d44:	21000017 	ldw	r4,0(r4)
 4002d48:	00c00044 	movi	r3,1
 4002d4c:	dd400515 	stw	r21,20(sp)
 4002d50:	dd000415 	stw	r20,16(sp)
 4002d54:	ddc00715 	stw	r23,28(sp)
 4002d58:	dd800615 	stw	r22,24(sp)
 4002d5c:	dc800215 	stw	r18,8(sp)
 4002d60:	dc400115 	stw	r17,4(sp)
 4002d64:	dc000015 	stw	r16,0(sp)
 4002d68:	282b883a 	mov	r21,r5
 4002d6c:	3029883a 	mov	r20,r6
 4002d70:	1900632e 	bgeu	r3,r4,4002f00 <_fpadd_parts+0x1c8>
 4002d74:	28800017 	ldw	r2,0(r5)
 4002d78:	1880812e 	bgeu	r3,r2,4002f80 <_fpadd_parts+0x248>
 4002d7c:	00c00104 	movi	r3,4
 4002d80:	20c0dc26 	beq	r4,r3,40030f4 <_fpadd_parts+0x3bc>
 4002d84:	10c07e26 	beq	r2,r3,4002f80 <_fpadd_parts+0x248>
 4002d88:	00c00084 	movi	r3,2
 4002d8c:	10c06726 	beq	r2,r3,4002f2c <_fpadd_parts+0x1f4>
 4002d90:	20c07b26 	beq	r4,r3,4002f80 <_fpadd_parts+0x248>
 4002d94:	9dc00217 	ldw	r23,8(r19)
 4002d98:	28c00217 	ldw	r3,8(r5)
 4002d9c:	9c400317 	ldw	r17,12(r19)
 4002da0:	2bc00317 	ldw	r15,12(r5)
 4002da4:	b8cdc83a 	sub	r6,r23,r3
 4002da8:	9c800417 	ldw	r18,16(r19)
 4002dac:	2c000417 	ldw	r16,16(r5)
 4002db0:	3009883a 	mov	r4,r6
 4002db4:	30009716 	blt	r6,zero,4003014 <_fpadd_parts+0x2dc>
 4002db8:	00800fc4 	movi	r2,63
 4002dbc:	11806b16 	blt	r2,r6,4002f6c <_fpadd_parts+0x234>
 4002dc0:	0100a40e 	bge	zero,r4,4003054 <_fpadd_parts+0x31c>
 4002dc4:	35bff804 	addi	r22,r6,-32
 4002dc8:	b000bc16 	blt	r22,zero,40030bc <_fpadd_parts+0x384>
 4002dcc:	8596d83a 	srl	r11,r16,r22
 4002dd0:	0019883a 	mov	r12,zero
 4002dd4:	0013883a 	mov	r9,zero
 4002dd8:	01000044 	movi	r4,1
 4002ddc:	0015883a 	mov	r10,zero
 4002de0:	b000be16 	blt	r22,zero,40030dc <_fpadd_parts+0x3a4>
 4002de4:	2590983a 	sll	r8,r4,r22
 4002de8:	000f883a 	mov	r7,zero
 4002dec:	00bfffc4 	movi	r2,-1
 4002df0:	3889883a 	add	r4,r7,r2
 4002df4:	408b883a 	add	r5,r8,r2
 4002df8:	21cd803a 	cmpltu	r6,r4,r7
 4002dfc:	314b883a 	add	r5,r6,r5
 4002e00:	7904703a 	and	r2,r15,r4
 4002e04:	8146703a 	and	r3,r16,r5
 4002e08:	10c4b03a 	or	r2,r2,r3
 4002e0c:	10000226 	beq	r2,zero,4002e18 <_fpadd_parts+0xe0>
 4002e10:	02400044 	movi	r9,1
 4002e14:	0015883a 	mov	r10,zero
 4002e18:	5a5eb03a 	or	r15,r11,r9
 4002e1c:	62a0b03a 	or	r16,r12,r10
 4002e20:	99400117 	ldw	r5,4(r19)
 4002e24:	a8800117 	ldw	r2,4(r21)
 4002e28:	28806e26 	beq	r5,r2,4002fe4 <_fpadd_parts+0x2ac>
 4002e2c:	28006626 	beq	r5,zero,4002fc8 <_fpadd_parts+0x290>
 4002e30:	7c45c83a 	sub	r2,r15,r17
 4002e34:	7889803a 	cmpltu	r4,r15,r2
 4002e38:	8487c83a 	sub	r3,r16,r18
 4002e3c:	1909c83a 	sub	r4,r3,r4
 4002e40:	100d883a 	mov	r6,r2
 4002e44:	200f883a 	mov	r7,r4
 4002e48:	38007716 	blt	r7,zero,4003028 <_fpadd_parts+0x2f0>
 4002e4c:	a5c00215 	stw	r23,8(r20)
 4002e50:	a1c00415 	stw	r7,16(r20)
 4002e54:	a0000115 	stw	zero,4(r20)
 4002e58:	a1800315 	stw	r6,12(r20)
 4002e5c:	a2000317 	ldw	r8,12(r20)
 4002e60:	a2400417 	ldw	r9,16(r20)
 4002e64:	00bfffc4 	movi	r2,-1
 4002e68:	408b883a 	add	r5,r8,r2
 4002e6c:	2a09803a 	cmpltu	r4,r5,r8
 4002e70:	488d883a 	add	r6,r9,r2
 4002e74:	01c40034 	movhi	r7,4096
 4002e78:	39ffffc4 	addi	r7,r7,-1
 4002e7c:	218d883a 	add	r6,r4,r6
 4002e80:	39801736 	bltu	r7,r6,4002ee0 <_fpadd_parts+0x1a8>
 4002e84:	31c06526 	beq	r6,r7,400301c <_fpadd_parts+0x2e4>
 4002e88:	a3000217 	ldw	r12,8(r20)
 4002e8c:	4209883a 	add	r4,r8,r8
 4002e90:	00bfffc4 	movi	r2,-1
 4002e94:	220f803a 	cmpltu	r7,r4,r8
 4002e98:	4a4b883a 	add	r5,r9,r9
 4002e9c:	394f883a 	add	r7,r7,r5
 4002ea0:	2095883a 	add	r10,r4,r2
 4002ea4:	3897883a 	add	r11,r7,r2
 4002ea8:	510d803a 	cmpltu	r6,r10,r4
 4002eac:	6099883a 	add	r12,r12,r2
 4002eb0:	32d7883a 	add	r11,r6,r11
 4002eb4:	00840034 	movhi	r2,4096
 4002eb8:	10bfffc4 	addi	r2,r2,-1
 4002ebc:	2011883a 	mov	r8,r4
 4002ec0:	3813883a 	mov	r9,r7
 4002ec4:	a1000315 	stw	r4,12(r20)
 4002ec8:	a1c00415 	stw	r7,16(r20)
 4002ecc:	a3000215 	stw	r12,8(r20)
 4002ed0:	12c00336 	bltu	r2,r11,4002ee0 <_fpadd_parts+0x1a8>
 4002ed4:	58bfed1e 	bne	r11,r2,4002e8c <_fpadd_parts+0x154>
 4002ed8:	00bfff84 	movi	r2,-2
 4002edc:	12bfeb2e 	bgeu	r2,r10,4002e8c <_fpadd_parts+0x154>
 4002ee0:	a2800417 	ldw	r10,16(r20)
 4002ee4:	008000c4 	movi	r2,3
 4002ee8:	00c80034 	movhi	r3,8192
 4002eec:	18ffffc4 	addi	r3,r3,-1
 4002ef0:	a2400317 	ldw	r9,12(r20)
 4002ef4:	a0800015 	stw	r2,0(r20)
 4002ef8:	1a802336 	bltu	r3,r10,4002f88 <_fpadd_parts+0x250>
 4002efc:	a027883a 	mov	r19,r20
 4002f00:	9805883a 	mov	r2,r19
 4002f04:	ddc00717 	ldw	r23,28(sp)
 4002f08:	dd800617 	ldw	r22,24(sp)
 4002f0c:	dd400517 	ldw	r21,20(sp)
 4002f10:	dd000417 	ldw	r20,16(sp)
 4002f14:	dcc00317 	ldw	r19,12(sp)
 4002f18:	dc800217 	ldw	r18,8(sp)
 4002f1c:	dc400117 	ldw	r17,4(sp)
 4002f20:	dc000017 	ldw	r16,0(sp)
 4002f24:	dec00804 	addi	sp,sp,32
 4002f28:	f800283a 	ret
 4002f2c:	20fff41e 	bne	r4,r3,4002f00 <_fpadd_parts+0x1c8>
 4002f30:	31000015 	stw	r4,0(r6)
 4002f34:	98800117 	ldw	r2,4(r19)
 4002f38:	30800115 	stw	r2,4(r6)
 4002f3c:	98c00217 	ldw	r3,8(r19)
 4002f40:	30c00215 	stw	r3,8(r6)
 4002f44:	98800317 	ldw	r2,12(r19)
 4002f48:	30800315 	stw	r2,12(r6)
 4002f4c:	98c00417 	ldw	r3,16(r19)
 4002f50:	30c00415 	stw	r3,16(r6)
 4002f54:	98800117 	ldw	r2,4(r19)
 4002f58:	28c00117 	ldw	r3,4(r5)
 4002f5c:	3027883a 	mov	r19,r6
 4002f60:	10c4703a 	and	r2,r2,r3
 4002f64:	30800115 	stw	r2,4(r6)
 4002f68:	003fe506 	br	4002f00 <_fpadd_parts+0x1c8>
 4002f6c:	1dc02616 	blt	r3,r23,4003008 <_fpadd_parts+0x2d0>
 4002f70:	0023883a 	mov	r17,zero
 4002f74:	182f883a 	mov	r23,r3
 4002f78:	0025883a 	mov	r18,zero
 4002f7c:	003fa806 	br	4002e20 <_fpadd_parts+0xe8>
 4002f80:	a827883a 	mov	r19,r21
 4002f84:	003fde06 	br	4002f00 <_fpadd_parts+0x1c8>
 4002f88:	01800044 	movi	r6,1
 4002f8c:	500497fa 	slli	r2,r10,31
 4002f90:	4808d07a 	srli	r4,r9,1
 4002f94:	518ad83a 	srl	r5,r10,r6
 4002f98:	a2000217 	ldw	r8,8(r20)
 4002f9c:	1108b03a 	or	r4,r2,r4
 4002fa0:	0007883a 	mov	r3,zero
 4002fa4:	4984703a 	and	r2,r9,r6
 4002fa8:	208cb03a 	or	r6,r4,r2
 4002fac:	28ceb03a 	or	r7,r5,r3
 4002fb0:	42000044 	addi	r8,r8,1
 4002fb4:	a027883a 	mov	r19,r20
 4002fb8:	a1c00415 	stw	r7,16(r20)
 4002fbc:	a2000215 	stw	r8,8(r20)
 4002fc0:	a1800315 	stw	r6,12(r20)
 4002fc4:	003fce06 	br	4002f00 <_fpadd_parts+0x1c8>
 4002fc8:	8bc5c83a 	sub	r2,r17,r15
 4002fcc:	8889803a 	cmpltu	r4,r17,r2
 4002fd0:	9407c83a 	sub	r3,r18,r16
 4002fd4:	1909c83a 	sub	r4,r3,r4
 4002fd8:	100d883a 	mov	r6,r2
 4002fdc:	200f883a 	mov	r7,r4
 4002fe0:	003f9906 	br	4002e48 <_fpadd_parts+0x110>
 4002fe4:	7c45883a 	add	r2,r15,r17
 4002fe8:	13c9803a 	cmpltu	r4,r2,r15
 4002fec:	8487883a 	add	r3,r16,r18
 4002ff0:	20c9883a 	add	r4,r4,r3
 4002ff4:	a1400115 	stw	r5,4(r20)
 4002ff8:	a5c00215 	stw	r23,8(r20)
 4002ffc:	a0800315 	stw	r2,12(r20)
 4003000:	a1000415 	stw	r4,16(r20)
 4003004:	003fb606 	br	4002ee0 <_fpadd_parts+0x1a8>
 4003008:	001f883a 	mov	r15,zero
 400300c:	0021883a 	mov	r16,zero
 4003010:	003f8306 	br	4002e20 <_fpadd_parts+0xe8>
 4003014:	018dc83a 	sub	r6,zero,r6
 4003018:	003f6706 	br	4002db8 <_fpadd_parts+0x80>
 400301c:	00bfff84 	movi	r2,-2
 4003020:	117faf36 	bltu	r2,r5,4002ee0 <_fpadd_parts+0x1a8>
 4003024:	003f9806 	br	4002e88 <_fpadd_parts+0x150>
 4003028:	0005883a 	mov	r2,zero
 400302c:	1189c83a 	sub	r4,r2,r6
 4003030:	1105803a 	cmpltu	r2,r2,r4
 4003034:	01cbc83a 	sub	r5,zero,r7
 4003038:	2885c83a 	sub	r2,r5,r2
 400303c:	01800044 	movi	r6,1
 4003040:	a1800115 	stw	r6,4(r20)
 4003044:	a5c00215 	stw	r23,8(r20)
 4003048:	a1000315 	stw	r4,12(r20)
 400304c:	a0800415 	stw	r2,16(r20)
 4003050:	003f8206 	br	4002e5c <_fpadd_parts+0x124>
 4003054:	203f7226 	beq	r4,zero,4002e20 <_fpadd_parts+0xe8>
 4003058:	35bff804 	addi	r22,r6,-32
 400305c:	b9af883a 	add	r23,r23,r6
 4003060:	b0003116 	blt	r22,zero,4003128 <_fpadd_parts+0x3f0>
 4003064:	959ad83a 	srl	r13,r18,r22
 4003068:	001d883a 	mov	r14,zero
 400306c:	000f883a 	mov	r7,zero
 4003070:	01000044 	movi	r4,1
 4003074:	0011883a 	mov	r8,zero
 4003078:	b0002516 	blt	r22,zero,4003110 <_fpadd_parts+0x3d8>
 400307c:	2594983a 	sll	r10,r4,r22
 4003080:	0013883a 	mov	r9,zero
 4003084:	00bfffc4 	movi	r2,-1
 4003088:	4889883a 	add	r4,r9,r2
 400308c:	508b883a 	add	r5,r10,r2
 4003090:	224d803a 	cmpltu	r6,r4,r9
 4003094:	314b883a 	add	r5,r6,r5
 4003098:	8904703a 	and	r2,r17,r4
 400309c:	9146703a 	and	r3,r18,r5
 40030a0:	10c4b03a 	or	r2,r2,r3
 40030a4:	10000226 	beq	r2,zero,40030b0 <_fpadd_parts+0x378>
 40030a8:	01c00044 	movi	r7,1
 40030ac:	0011883a 	mov	r8,zero
 40030b0:	69e2b03a 	or	r17,r13,r7
 40030b4:	7224b03a 	or	r18,r14,r8
 40030b8:	003f5906 	br	4002e20 <_fpadd_parts+0xe8>
 40030bc:	8407883a 	add	r3,r16,r16
 40030c0:	008007c4 	movi	r2,31
 40030c4:	1185c83a 	sub	r2,r2,r6
 40030c8:	1886983a 	sll	r3,r3,r2
 40030cc:	7996d83a 	srl	r11,r15,r6
 40030d0:	8198d83a 	srl	r12,r16,r6
 40030d4:	1ad6b03a 	or	r11,r3,r11
 40030d8:	003f3e06 	br	4002dd4 <_fpadd_parts+0x9c>
 40030dc:	2006d07a 	srli	r3,r4,1
 40030e0:	008007c4 	movi	r2,31
 40030e4:	1185c83a 	sub	r2,r2,r6
 40030e8:	1890d83a 	srl	r8,r3,r2
 40030ec:	218e983a 	sll	r7,r4,r6
 40030f0:	003f3e06 	br	4002dec <_fpadd_parts+0xb4>
 40030f4:	113f821e 	bne	r2,r4,4002f00 <_fpadd_parts+0x1c8>
 40030f8:	28c00117 	ldw	r3,4(r5)
 40030fc:	98800117 	ldw	r2,4(r19)
 4003100:	10ff7f26 	beq	r2,r3,4002f00 <_fpadd_parts+0x1c8>
 4003104:	04c10074 	movhi	r19,1025
 4003108:	9cc46504 	addi	r19,r19,4500
 400310c:	003f7c06 	br	4002f00 <_fpadd_parts+0x1c8>
 4003110:	2006d07a 	srli	r3,r4,1
 4003114:	008007c4 	movi	r2,31
 4003118:	1185c83a 	sub	r2,r2,r6
 400311c:	1894d83a 	srl	r10,r3,r2
 4003120:	2192983a 	sll	r9,r4,r6
 4003124:	003fd706 	br	4003084 <_fpadd_parts+0x34c>
 4003128:	9487883a 	add	r3,r18,r18
 400312c:	008007c4 	movi	r2,31
 4003130:	1185c83a 	sub	r2,r2,r6
 4003134:	1886983a 	sll	r3,r3,r2
 4003138:	899ad83a 	srl	r13,r17,r6
 400313c:	919cd83a 	srl	r14,r18,r6
 4003140:	1b5ab03a 	or	r13,r3,r13
 4003144:	003fc906 	br	400306c <_fpadd_parts+0x334>

04003148 <__subdf3>:
 4003148:	deffea04 	addi	sp,sp,-88
 400314c:	dcc01415 	stw	r19,80(sp)
 4003150:	dcc00404 	addi	r19,sp,16
 4003154:	2011883a 	mov	r8,r4
 4003158:	2813883a 	mov	r9,r5
 400315c:	dc401315 	stw	r17,76(sp)
 4003160:	d809883a 	mov	r4,sp
 4003164:	980b883a 	mov	r5,r19
 4003168:	dc400904 	addi	r17,sp,36
 400316c:	dfc01515 	stw	ra,84(sp)
 4003170:	da400115 	stw	r9,4(sp)
 4003174:	d9c00315 	stw	r7,12(sp)
 4003178:	da000015 	stw	r8,0(sp)
 400317c:	d9800215 	stw	r6,8(sp)
 4003180:	4003fec0 	call	4003fec <__unpack_d>
 4003184:	d9000204 	addi	r4,sp,8
 4003188:	880b883a 	mov	r5,r17
 400318c:	4003fec0 	call	4003fec <__unpack_d>
 4003190:	d8800a17 	ldw	r2,40(sp)
 4003194:	880b883a 	mov	r5,r17
 4003198:	9809883a 	mov	r4,r19
 400319c:	d9800e04 	addi	r6,sp,56
 40031a0:	1080005c 	xori	r2,r2,1
 40031a4:	d8800a15 	stw	r2,40(sp)
 40031a8:	4002d380 	call	4002d38 <_fpadd_parts>
 40031ac:	1009883a 	mov	r4,r2
 40031b0:	4003cd80 	call	4003cd8 <__pack_d>
 40031b4:	dfc01517 	ldw	ra,84(sp)
 40031b8:	dcc01417 	ldw	r19,80(sp)
 40031bc:	dc401317 	ldw	r17,76(sp)
 40031c0:	dec01604 	addi	sp,sp,88
 40031c4:	f800283a 	ret

040031c8 <__adddf3>:
 40031c8:	deffea04 	addi	sp,sp,-88
 40031cc:	dcc01415 	stw	r19,80(sp)
 40031d0:	dcc00404 	addi	r19,sp,16
 40031d4:	2011883a 	mov	r8,r4
 40031d8:	2813883a 	mov	r9,r5
 40031dc:	dc401315 	stw	r17,76(sp)
 40031e0:	d809883a 	mov	r4,sp
 40031e4:	980b883a 	mov	r5,r19
 40031e8:	dc400904 	addi	r17,sp,36
 40031ec:	dfc01515 	stw	ra,84(sp)
 40031f0:	da400115 	stw	r9,4(sp)
 40031f4:	d9c00315 	stw	r7,12(sp)
 40031f8:	da000015 	stw	r8,0(sp)
 40031fc:	d9800215 	stw	r6,8(sp)
 4003200:	4003fec0 	call	4003fec <__unpack_d>
 4003204:	d9000204 	addi	r4,sp,8
 4003208:	880b883a 	mov	r5,r17
 400320c:	4003fec0 	call	4003fec <__unpack_d>
 4003210:	d9800e04 	addi	r6,sp,56
 4003214:	9809883a 	mov	r4,r19
 4003218:	880b883a 	mov	r5,r17
 400321c:	4002d380 	call	4002d38 <_fpadd_parts>
 4003220:	1009883a 	mov	r4,r2
 4003224:	4003cd80 	call	4003cd8 <__pack_d>
 4003228:	dfc01517 	ldw	ra,84(sp)
 400322c:	dcc01417 	ldw	r19,80(sp)
 4003230:	dc401317 	ldw	r17,76(sp)
 4003234:	dec01604 	addi	sp,sp,88
 4003238:	f800283a 	ret

0400323c <__muldf3>:
 400323c:	deffe004 	addi	sp,sp,-128
 4003240:	dc401815 	stw	r17,96(sp)
 4003244:	dc400404 	addi	r17,sp,16
 4003248:	2011883a 	mov	r8,r4
 400324c:	2813883a 	mov	r9,r5
 4003250:	dc001715 	stw	r16,92(sp)
 4003254:	d809883a 	mov	r4,sp
 4003258:	880b883a 	mov	r5,r17
 400325c:	dc000904 	addi	r16,sp,36
 4003260:	dfc01f15 	stw	ra,124(sp)
 4003264:	da400115 	stw	r9,4(sp)
 4003268:	d9c00315 	stw	r7,12(sp)
 400326c:	da000015 	stw	r8,0(sp)
 4003270:	d9800215 	stw	r6,8(sp)
 4003274:	ddc01e15 	stw	r23,120(sp)
 4003278:	dd801d15 	stw	r22,116(sp)
 400327c:	dd401c15 	stw	r21,112(sp)
 4003280:	dd001b15 	stw	r20,108(sp)
 4003284:	dcc01a15 	stw	r19,104(sp)
 4003288:	dc801915 	stw	r18,100(sp)
 400328c:	4003fec0 	call	4003fec <__unpack_d>
 4003290:	d9000204 	addi	r4,sp,8
 4003294:	800b883a 	mov	r5,r16
 4003298:	4003fec0 	call	4003fec <__unpack_d>
 400329c:	d9000417 	ldw	r4,16(sp)
 40032a0:	00800044 	movi	r2,1
 40032a4:	1100102e 	bgeu	r2,r4,40032e8 <__muldf3+0xac>
 40032a8:	d8c00917 	ldw	r3,36(sp)
 40032ac:	10c0062e 	bgeu	r2,r3,40032c8 <__muldf3+0x8c>
 40032b0:	00800104 	movi	r2,4
 40032b4:	20800a26 	beq	r4,r2,40032e0 <__muldf3+0xa4>
 40032b8:	1880cc26 	beq	r3,r2,40035ec <__muldf3+0x3b0>
 40032bc:	00800084 	movi	r2,2
 40032c0:	20800926 	beq	r4,r2,40032e8 <__muldf3+0xac>
 40032c4:	1880191e 	bne	r3,r2,400332c <__muldf3+0xf0>
 40032c8:	d8c00a17 	ldw	r3,40(sp)
 40032cc:	d8800517 	ldw	r2,20(sp)
 40032d0:	8009883a 	mov	r4,r16
 40032d4:	10c4c03a 	cmpne	r2,r2,r3
 40032d8:	d8800a15 	stw	r2,40(sp)
 40032dc:	00000706 	br	40032fc <__muldf3+0xc0>
 40032e0:	00800084 	movi	r2,2
 40032e4:	1880c326 	beq	r3,r2,40035f4 <__muldf3+0x3b8>
 40032e8:	d8800517 	ldw	r2,20(sp)
 40032ec:	d8c00a17 	ldw	r3,40(sp)
 40032f0:	8809883a 	mov	r4,r17
 40032f4:	10c4c03a 	cmpne	r2,r2,r3
 40032f8:	d8800515 	stw	r2,20(sp)
 40032fc:	4003cd80 	call	4003cd8 <__pack_d>
 4003300:	dfc01f17 	ldw	ra,124(sp)
 4003304:	ddc01e17 	ldw	r23,120(sp)
 4003308:	dd801d17 	ldw	r22,116(sp)
 400330c:	dd401c17 	ldw	r21,112(sp)
 4003310:	dd001b17 	ldw	r20,108(sp)
 4003314:	dcc01a17 	ldw	r19,104(sp)
 4003318:	dc801917 	ldw	r18,100(sp)
 400331c:	dc401817 	ldw	r17,96(sp)
 4003320:	dc001717 	ldw	r16,92(sp)
 4003324:	dec02004 	addi	sp,sp,128
 4003328:	f800283a 	ret
 400332c:	dd800717 	ldw	r22,28(sp)
 4003330:	dc800c17 	ldw	r18,48(sp)
 4003334:	002b883a 	mov	r21,zero
 4003338:	0023883a 	mov	r17,zero
 400333c:	a80b883a 	mov	r5,r21
 4003340:	b00d883a 	mov	r6,r22
 4003344:	880f883a 	mov	r7,r17
 4003348:	ddc00817 	ldw	r23,32(sp)
 400334c:	dcc00d17 	ldw	r19,52(sp)
 4003350:	9009883a 	mov	r4,r18
 4003354:	4003bc00 	call	4003bc0 <__muldi3>
 4003358:	001b883a 	mov	r13,zero
 400335c:	680f883a 	mov	r7,r13
 4003360:	b009883a 	mov	r4,r22
 4003364:	000b883a 	mov	r5,zero
 4003368:	980d883a 	mov	r6,r19
 400336c:	b82d883a 	mov	r22,r23
 4003370:	002f883a 	mov	r23,zero
 4003374:	db401615 	stw	r13,88(sp)
 4003378:	d8801315 	stw	r2,76(sp)
 400337c:	d8c01415 	stw	r3,80(sp)
 4003380:	dcc01515 	stw	r19,84(sp)
 4003384:	4003bc00 	call	4003bc0 <__muldi3>
 4003388:	b00d883a 	mov	r6,r22
 400338c:	000b883a 	mov	r5,zero
 4003390:	9009883a 	mov	r4,r18
 4003394:	b80f883a 	mov	r7,r23
 4003398:	1021883a 	mov	r16,r2
 400339c:	1823883a 	mov	r17,r3
 40033a0:	4003bc00 	call	4003bc0 <__muldi3>
 40033a4:	8085883a 	add	r2,r16,r2
 40033a8:	140d803a 	cmpltu	r6,r2,r16
 40033ac:	88c7883a 	add	r3,r17,r3
 40033b0:	30cd883a 	add	r6,r6,r3
 40033b4:	1029883a 	mov	r20,r2
 40033b8:	302b883a 	mov	r21,r6
 40033bc:	da801317 	ldw	r10,76(sp)
 40033c0:	dac01417 	ldw	r11,80(sp)
 40033c4:	db001517 	ldw	r12,84(sp)
 40033c8:	db401617 	ldw	r13,88(sp)
 40033cc:	3440612e 	bgeu	r6,r17,4003554 <__muldf3+0x318>
 40033d0:	0009883a 	mov	r4,zero
 40033d4:	5105883a 	add	r2,r10,r4
 40033d8:	128d803a 	cmpltu	r6,r2,r10
 40033dc:	5d07883a 	add	r3,r11,r20
 40033e0:	30cd883a 	add	r6,r6,r3
 40033e4:	0021883a 	mov	r16,zero
 40033e8:	04400044 	movi	r17,1
 40033ec:	1025883a 	mov	r18,r2
 40033f0:	3027883a 	mov	r19,r6
 40033f4:	32c06236 	bltu	r6,r11,4003580 <__muldf3+0x344>
 40033f8:	59807a26 	beq	r11,r6,40035e4 <__muldf3+0x3a8>
 40033fc:	680b883a 	mov	r5,r13
 4003400:	b80f883a 	mov	r7,r23
 4003404:	6009883a 	mov	r4,r12
 4003408:	b00d883a 	mov	r6,r22
 400340c:	4003bc00 	call	4003bc0 <__muldi3>
 4003410:	1009883a 	mov	r4,r2
 4003414:	000f883a 	mov	r7,zero
 4003418:	1545883a 	add	r2,r2,r21
 400341c:	1111803a 	cmpltu	r8,r2,r4
 4003420:	19c7883a 	add	r3,r3,r7
 4003424:	40c7883a 	add	r3,r8,r3
 4003428:	88cb883a 	add	r5,r17,r3
 400342c:	d8c00617 	ldw	r3,24(sp)
 4003430:	8089883a 	add	r4,r16,r2
 4003434:	d8800b17 	ldw	r2,44(sp)
 4003438:	18c00104 	addi	r3,r3,4
 400343c:	240d803a 	cmpltu	r6,r4,r16
 4003440:	10c7883a 	add	r3,r2,r3
 4003444:	2013883a 	mov	r9,r4
 4003448:	d8800a17 	ldw	r2,40(sp)
 400344c:	d9000517 	ldw	r4,20(sp)
 4003450:	314d883a 	add	r6,r6,r5
 4003454:	3015883a 	mov	r10,r6
 4003458:	2088c03a 	cmpne	r4,r4,r2
 400345c:	00880034 	movhi	r2,8192
 4003460:	10bfffc4 	addi	r2,r2,-1
 4003464:	d9000f15 	stw	r4,60(sp)
 4003468:	d8c01015 	stw	r3,64(sp)
 400346c:	1180162e 	bgeu	r2,r6,40034c8 <__muldf3+0x28c>
 4003470:	1811883a 	mov	r8,r3
 4003474:	101f883a 	mov	r15,r2
 4003478:	980497fa 	slli	r2,r19,31
 400347c:	9016d07a 	srli	r11,r18,1
 4003480:	500697fa 	slli	r3,r10,31
 4003484:	480cd07a 	srli	r6,r9,1
 4003488:	500ed07a 	srli	r7,r10,1
 400348c:	12d6b03a 	or	r11,r2,r11
 4003490:	00800044 	movi	r2,1
 4003494:	198cb03a 	or	r6,r3,r6
 4003498:	4888703a 	and	r4,r9,r2
 400349c:	9818d07a 	srli	r12,r19,1
 40034a0:	001b883a 	mov	r13,zero
 40034a4:	03a00034 	movhi	r14,32768
 40034a8:	3013883a 	mov	r9,r6
 40034ac:	3815883a 	mov	r10,r7
 40034b0:	4091883a 	add	r8,r8,r2
 40034b4:	20000226 	beq	r4,zero,40034c0 <__muldf3+0x284>
 40034b8:	5b64b03a 	or	r18,r11,r13
 40034bc:	63a6b03a 	or	r19,r12,r14
 40034c0:	7abfed36 	bltu	r15,r10,4003478 <__muldf3+0x23c>
 40034c4:	da001015 	stw	r8,64(sp)
 40034c8:	00840034 	movhi	r2,4096
 40034cc:	10bfffc4 	addi	r2,r2,-1
 40034d0:	12801436 	bltu	r2,r10,4003524 <__muldf3+0x2e8>
 40034d4:	da001017 	ldw	r8,64(sp)
 40034d8:	101f883a 	mov	r15,r2
 40034dc:	4a45883a 	add	r2,r9,r9
 40034e0:	124d803a 	cmpltu	r6,r2,r9
 40034e4:	5287883a 	add	r3,r10,r10
 40034e8:	9497883a 	add	r11,r18,r18
 40034ec:	5c8f803a 	cmpltu	r7,r11,r18
 40034f0:	9cd9883a 	add	r12,r19,r19
 40034f4:	01000044 	movi	r4,1
 40034f8:	30cd883a 	add	r6,r6,r3
 40034fc:	3b0f883a 	add	r7,r7,r12
 4003500:	423fffc4 	addi	r8,r8,-1
 4003504:	1013883a 	mov	r9,r2
 4003508:	3015883a 	mov	r10,r6
 400350c:	111ab03a 	or	r13,r2,r4
 4003510:	98003016 	blt	r19,zero,40035d4 <__muldf3+0x398>
 4003514:	5825883a 	mov	r18,r11
 4003518:	3827883a 	mov	r19,r7
 400351c:	7abfef2e 	bgeu	r15,r10,40034dc <__muldf3+0x2a0>
 4003520:	da001015 	stw	r8,64(sp)
 4003524:	00803fc4 	movi	r2,255
 4003528:	488e703a 	and	r7,r9,r2
 400352c:	00802004 	movi	r2,128
 4003530:	0007883a 	mov	r3,zero
 4003534:	0011883a 	mov	r8,zero
 4003538:	38801826 	beq	r7,r2,400359c <__muldf3+0x360>
 400353c:	008000c4 	movi	r2,3
 4003540:	d9000e04 	addi	r4,sp,56
 4003544:	da801215 	stw	r10,72(sp)
 4003548:	d8800e15 	stw	r2,56(sp)
 400354c:	da401115 	stw	r9,68(sp)
 4003550:	003f6a06 	br	40032fc <__muldf3+0xc0>
 4003554:	89802126 	beq	r17,r6,40035dc <__muldf3+0x3a0>
 4003558:	0009883a 	mov	r4,zero
 400355c:	5105883a 	add	r2,r10,r4
 4003560:	128d803a 	cmpltu	r6,r2,r10
 4003564:	5d07883a 	add	r3,r11,r20
 4003568:	30cd883a 	add	r6,r6,r3
 400356c:	0021883a 	mov	r16,zero
 4003570:	0023883a 	mov	r17,zero
 4003574:	1025883a 	mov	r18,r2
 4003578:	3027883a 	mov	r19,r6
 400357c:	32ff9e2e 	bgeu	r6,r11,40033f8 <__muldf3+0x1bc>
 4003580:	00800044 	movi	r2,1
 4003584:	8089883a 	add	r4,r16,r2
 4003588:	240d803a 	cmpltu	r6,r4,r16
 400358c:	344d883a 	add	r6,r6,r17
 4003590:	2021883a 	mov	r16,r4
 4003594:	3023883a 	mov	r17,r6
 4003598:	003f9806 	br	40033fc <__muldf3+0x1c0>
 400359c:	403fe71e 	bne	r8,zero,400353c <__muldf3+0x300>
 40035a0:	01004004 	movi	r4,256
 40035a4:	4904703a 	and	r2,r9,r4
 40035a8:	10c4b03a 	or	r2,r2,r3
 40035ac:	103fe31e 	bne	r2,zero,400353c <__muldf3+0x300>
 40035b0:	94c4b03a 	or	r2,r18,r19
 40035b4:	103fe126 	beq	r2,zero,400353c <__muldf3+0x300>
 40035b8:	49c5883a 	add	r2,r9,r7
 40035bc:	1251803a 	cmpltu	r8,r2,r9
 40035c0:	4291883a 	add	r8,r8,r10
 40035c4:	013fc004 	movi	r4,-256
 40035c8:	1112703a 	and	r9,r2,r4
 40035cc:	4015883a 	mov	r10,r8
 40035d0:	003fda06 	br	400353c <__muldf3+0x300>
 40035d4:	6813883a 	mov	r9,r13
 40035d8:	003fce06 	br	4003514 <__muldf3+0x2d8>
 40035dc:	143f7c36 	bltu	r2,r16,40033d0 <__muldf3+0x194>
 40035e0:	003fdd06 	br	4003558 <__muldf3+0x31c>
 40035e4:	12bf852e 	bgeu	r2,r10,40033fc <__muldf3+0x1c0>
 40035e8:	003fe506 	br	4003580 <__muldf3+0x344>
 40035ec:	00800084 	movi	r2,2
 40035f0:	20bf351e 	bne	r4,r2,40032c8 <__muldf3+0x8c>
 40035f4:	01010074 	movhi	r4,1025
 40035f8:	21046504 	addi	r4,r4,4500
 40035fc:	003f3f06 	br	40032fc <__muldf3+0xc0>

04003600 <__divdf3>:
 4003600:	deffed04 	addi	sp,sp,-76
 4003604:	dcc01115 	stw	r19,68(sp)
 4003608:	dcc00404 	addi	r19,sp,16
 400360c:	2011883a 	mov	r8,r4
 4003610:	2813883a 	mov	r9,r5
 4003614:	dc000e15 	stw	r16,56(sp)
 4003618:	d809883a 	mov	r4,sp
 400361c:	980b883a 	mov	r5,r19
 4003620:	dc000904 	addi	r16,sp,36
 4003624:	dfc01215 	stw	ra,72(sp)
 4003628:	da400115 	stw	r9,4(sp)
 400362c:	d9c00315 	stw	r7,12(sp)
 4003630:	da000015 	stw	r8,0(sp)
 4003634:	d9800215 	stw	r6,8(sp)
 4003638:	dc801015 	stw	r18,64(sp)
 400363c:	dc400f15 	stw	r17,60(sp)
 4003640:	4003fec0 	call	4003fec <__unpack_d>
 4003644:	d9000204 	addi	r4,sp,8
 4003648:	800b883a 	mov	r5,r16
 400364c:	4003fec0 	call	4003fec <__unpack_d>
 4003650:	d9000417 	ldw	r4,16(sp)
 4003654:	00800044 	movi	r2,1
 4003658:	11000b2e 	bgeu	r2,r4,4003688 <__divdf3+0x88>
 400365c:	d9400917 	ldw	r5,36(sp)
 4003660:	1140762e 	bgeu	r2,r5,400383c <__divdf3+0x23c>
 4003664:	d8800517 	ldw	r2,20(sp)
 4003668:	d8c00a17 	ldw	r3,40(sp)
 400366c:	01800104 	movi	r6,4
 4003670:	10c4f03a 	xor	r2,r2,r3
 4003674:	d8800515 	stw	r2,20(sp)
 4003678:	21800226 	beq	r4,r6,4003684 <__divdf3+0x84>
 400367c:	00800084 	movi	r2,2
 4003680:	2080141e 	bne	r4,r2,40036d4 <__divdf3+0xd4>
 4003684:	29000926 	beq	r5,r4,40036ac <__divdf3+0xac>
 4003688:	9809883a 	mov	r4,r19
 400368c:	4003cd80 	call	4003cd8 <__pack_d>
 4003690:	dfc01217 	ldw	ra,72(sp)
 4003694:	dcc01117 	ldw	r19,68(sp)
 4003698:	dc801017 	ldw	r18,64(sp)
 400369c:	dc400f17 	ldw	r17,60(sp)
 40036a0:	dc000e17 	ldw	r16,56(sp)
 40036a4:	dec01304 	addi	sp,sp,76
 40036a8:	f800283a 	ret
 40036ac:	01010074 	movhi	r4,1025
 40036b0:	21046504 	addi	r4,r4,4500
 40036b4:	4003cd80 	call	4003cd8 <__pack_d>
 40036b8:	dfc01217 	ldw	ra,72(sp)
 40036bc:	dcc01117 	ldw	r19,68(sp)
 40036c0:	dc801017 	ldw	r18,64(sp)
 40036c4:	dc400f17 	ldw	r17,60(sp)
 40036c8:	dc000e17 	ldw	r16,56(sp)
 40036cc:	dec01304 	addi	sp,sp,76
 40036d0:	f800283a 	ret
 40036d4:	29805b26 	beq	r5,r6,4003844 <__divdf3+0x244>
 40036d8:	28802d26 	beq	r5,r2,4003790 <__divdf3+0x190>
 40036dc:	d8c00617 	ldw	r3,24(sp)
 40036e0:	d8800b17 	ldw	r2,44(sp)
 40036e4:	d9c00817 	ldw	r7,32(sp)
 40036e8:	dc400d17 	ldw	r17,52(sp)
 40036ec:	188bc83a 	sub	r5,r3,r2
 40036f0:	d9800717 	ldw	r6,28(sp)
 40036f4:	dc000c17 	ldw	r16,48(sp)
 40036f8:	d9400615 	stw	r5,24(sp)
 40036fc:	3c403836 	bltu	r7,r17,40037e0 <__divdf3+0x1e0>
 4003700:	89c03626 	beq	r17,r7,40037dc <__divdf3+0x1dc>
 4003704:	0015883a 	mov	r10,zero
 4003708:	001d883a 	mov	r14,zero
 400370c:	02c40034 	movhi	r11,4096
 4003710:	001f883a 	mov	r15,zero
 4003714:	003f883a 	mov	ra,zero
 4003718:	04800f44 	movi	r18,61
 400371c:	00000f06 	br	400375c <__divdf3+0x15c>
 4003720:	601d883a 	mov	r14,r12
 4003724:	681f883a 	mov	r15,r13
 4003728:	400d883a 	mov	r6,r8
 400372c:	100f883a 	mov	r7,r2
 4003730:	3191883a 	add	r8,r6,r6
 4003734:	5808d07a 	srli	r4,r11,1
 4003738:	4185803a 	cmpltu	r2,r8,r6
 400373c:	39d3883a 	add	r9,r7,r7
 4003740:	28c6b03a 	or	r3,r5,r3
 4003744:	1245883a 	add	r2,r2,r9
 4003748:	1815883a 	mov	r10,r3
 400374c:	2017883a 	mov	r11,r4
 4003750:	400d883a 	mov	r6,r8
 4003754:	100f883a 	mov	r7,r2
 4003758:	fc801726 	beq	ra,r18,40037b8 <__divdf3+0x1b8>
 400375c:	580a97fa 	slli	r5,r11,31
 4003760:	5006d07a 	srli	r3,r10,1
 4003764:	ffc00044 	addi	ra,ra,1
 4003768:	3c7ff136 	bltu	r7,r17,4003730 <__divdf3+0x130>
 400376c:	3411c83a 	sub	r8,r6,r16
 4003770:	3205803a 	cmpltu	r2,r6,r8
 4003774:	3c53c83a 	sub	r9,r7,r17
 4003778:	7298b03a 	or	r12,r14,r10
 400377c:	7adab03a 	or	r13,r15,r11
 4003780:	4885c83a 	sub	r2,r9,r2
 4003784:	89ffe61e 	bne	r17,r7,4003720 <__divdf3+0x120>
 4003788:	343fe936 	bltu	r6,r16,4003730 <__divdf3+0x130>
 400378c:	003fe406 	br	4003720 <__divdf3+0x120>
 4003790:	9809883a 	mov	r4,r19
 4003794:	d9800415 	stw	r6,16(sp)
 4003798:	4003cd80 	call	4003cd8 <__pack_d>
 400379c:	dfc01217 	ldw	ra,72(sp)
 40037a0:	dcc01117 	ldw	r19,68(sp)
 40037a4:	dc801017 	ldw	r18,64(sp)
 40037a8:	dc400f17 	ldw	r17,60(sp)
 40037ac:	dc000e17 	ldw	r16,56(sp)
 40037b0:	dec01304 	addi	sp,sp,76
 40037b4:	f800283a 	ret
 40037b8:	00803fc4 	movi	r2,255
 40037bc:	7090703a 	and	r8,r14,r2
 40037c0:	00802004 	movi	r2,128
 40037c4:	0007883a 	mov	r3,zero
 40037c8:	0013883a 	mov	r9,zero
 40037cc:	40800d26 	beq	r8,r2,4003804 <__divdf3+0x204>
 40037d0:	dbc00815 	stw	r15,32(sp)
 40037d4:	db800715 	stw	r14,28(sp)
 40037d8:	003fab06 	br	4003688 <__divdf3+0x88>
 40037dc:	343fc92e 	bgeu	r6,r16,4003704 <__divdf3+0x104>
 40037e0:	3185883a 	add	r2,r6,r6
 40037e4:	1189803a 	cmpltu	r4,r2,r6
 40037e8:	39c7883a 	add	r3,r7,r7
 40037ec:	20c9883a 	add	r4,r4,r3
 40037f0:	297fffc4 	addi	r5,r5,-1
 40037f4:	100d883a 	mov	r6,r2
 40037f8:	200f883a 	mov	r7,r4
 40037fc:	d9400615 	stw	r5,24(sp)
 4003800:	003fc006 	br	4003704 <__divdf3+0x104>
 4003804:	483ff21e 	bne	r9,zero,40037d0 <__divdf3+0x1d0>
 4003808:	01004004 	movi	r4,256
 400380c:	7104703a 	and	r2,r14,r4
 4003810:	10c4b03a 	or	r2,r2,r3
 4003814:	103fee1e 	bne	r2,zero,40037d0 <__divdf3+0x1d0>
 4003818:	31c4b03a 	or	r2,r6,r7
 400381c:	103fec26 	beq	r2,zero,40037d0 <__divdf3+0x1d0>
 4003820:	7205883a 	add	r2,r14,r8
 4003824:	1391803a 	cmpltu	r8,r2,r14
 4003828:	43d1883a 	add	r8,r8,r15
 400382c:	013fc004 	movi	r4,-256
 4003830:	111c703a 	and	r14,r2,r4
 4003834:	401f883a 	mov	r15,r8
 4003838:	003fe506 	br	40037d0 <__divdf3+0x1d0>
 400383c:	8009883a 	mov	r4,r16
 4003840:	003f9206 	br	400368c <__divdf3+0x8c>
 4003844:	9809883a 	mov	r4,r19
 4003848:	d8000715 	stw	zero,28(sp)
 400384c:	d8000815 	stw	zero,32(sp)
 4003850:	d8000615 	stw	zero,24(sp)
 4003854:	003f8d06 	br	400368c <__divdf3+0x8c>

04003858 <__eqdf2>:
 4003858:	deffef04 	addi	sp,sp,-68
 400385c:	dc400f15 	stw	r17,60(sp)
 4003860:	dc400404 	addi	r17,sp,16
 4003864:	2005883a 	mov	r2,r4
 4003868:	2807883a 	mov	r3,r5
 400386c:	dc000e15 	stw	r16,56(sp)
 4003870:	d809883a 	mov	r4,sp
 4003874:	880b883a 	mov	r5,r17
 4003878:	dc000904 	addi	r16,sp,36
 400387c:	d8c00115 	stw	r3,4(sp)
 4003880:	d8800015 	stw	r2,0(sp)
 4003884:	d9800215 	stw	r6,8(sp)
 4003888:	dfc01015 	stw	ra,64(sp)
 400388c:	d9c00315 	stw	r7,12(sp)
 4003890:	4003fec0 	call	4003fec <__unpack_d>
 4003894:	d9000204 	addi	r4,sp,8
 4003898:	800b883a 	mov	r5,r16
 400389c:	4003fec0 	call	4003fec <__unpack_d>
 40038a0:	d8800417 	ldw	r2,16(sp)
 40038a4:	00c00044 	movi	r3,1
 40038a8:	180d883a 	mov	r6,r3
 40038ac:	1880062e 	bgeu	r3,r2,40038c8 <__eqdf2+0x70>
 40038b0:	d8800917 	ldw	r2,36(sp)
 40038b4:	8809883a 	mov	r4,r17
 40038b8:	800b883a 	mov	r5,r16
 40038bc:	1880022e 	bgeu	r3,r2,40038c8 <__eqdf2+0x70>
 40038c0:	40041240 	call	4004124 <__fpcmp_parts_d>
 40038c4:	100d883a 	mov	r6,r2
 40038c8:	3005883a 	mov	r2,r6
 40038cc:	dfc01017 	ldw	ra,64(sp)
 40038d0:	dc400f17 	ldw	r17,60(sp)
 40038d4:	dc000e17 	ldw	r16,56(sp)
 40038d8:	dec01104 	addi	sp,sp,68
 40038dc:	f800283a 	ret

040038e0 <__nedf2>:
 40038e0:	deffef04 	addi	sp,sp,-68
 40038e4:	dc400f15 	stw	r17,60(sp)
 40038e8:	dc400404 	addi	r17,sp,16
 40038ec:	2005883a 	mov	r2,r4
 40038f0:	2807883a 	mov	r3,r5
 40038f4:	dc000e15 	stw	r16,56(sp)
 40038f8:	d809883a 	mov	r4,sp
 40038fc:	880b883a 	mov	r5,r17
 4003900:	dc000904 	addi	r16,sp,36
 4003904:	d8c00115 	stw	r3,4(sp)
 4003908:	d8800015 	stw	r2,0(sp)
 400390c:	d9800215 	stw	r6,8(sp)
 4003910:	dfc01015 	stw	ra,64(sp)
 4003914:	d9c00315 	stw	r7,12(sp)
 4003918:	4003fec0 	call	4003fec <__unpack_d>
 400391c:	d9000204 	addi	r4,sp,8
 4003920:	800b883a 	mov	r5,r16
 4003924:	4003fec0 	call	4003fec <__unpack_d>
 4003928:	d8800417 	ldw	r2,16(sp)
 400392c:	00c00044 	movi	r3,1
 4003930:	180d883a 	mov	r6,r3
 4003934:	1880062e 	bgeu	r3,r2,4003950 <__nedf2+0x70>
 4003938:	d8800917 	ldw	r2,36(sp)
 400393c:	8809883a 	mov	r4,r17
 4003940:	800b883a 	mov	r5,r16
 4003944:	1880022e 	bgeu	r3,r2,4003950 <__nedf2+0x70>
 4003948:	40041240 	call	4004124 <__fpcmp_parts_d>
 400394c:	100d883a 	mov	r6,r2
 4003950:	3005883a 	mov	r2,r6
 4003954:	dfc01017 	ldw	ra,64(sp)
 4003958:	dc400f17 	ldw	r17,60(sp)
 400395c:	dc000e17 	ldw	r16,56(sp)
 4003960:	dec01104 	addi	sp,sp,68
 4003964:	f800283a 	ret

04003968 <__gedf2>:
 4003968:	deffef04 	addi	sp,sp,-68
 400396c:	dc400f15 	stw	r17,60(sp)
 4003970:	dc400404 	addi	r17,sp,16
 4003974:	2005883a 	mov	r2,r4
 4003978:	2807883a 	mov	r3,r5
 400397c:	dc000e15 	stw	r16,56(sp)
 4003980:	d809883a 	mov	r4,sp
 4003984:	880b883a 	mov	r5,r17
 4003988:	dc000904 	addi	r16,sp,36
 400398c:	d8c00115 	stw	r3,4(sp)
 4003990:	d8800015 	stw	r2,0(sp)
 4003994:	d9800215 	stw	r6,8(sp)
 4003998:	dfc01015 	stw	ra,64(sp)
 400399c:	d9c00315 	stw	r7,12(sp)
 40039a0:	4003fec0 	call	4003fec <__unpack_d>
 40039a4:	d9000204 	addi	r4,sp,8
 40039a8:	800b883a 	mov	r5,r16
 40039ac:	4003fec0 	call	4003fec <__unpack_d>
 40039b0:	d8800417 	ldw	r2,16(sp)
 40039b4:	00c00044 	movi	r3,1
 40039b8:	01bfffc4 	movi	r6,-1
 40039bc:	1880062e 	bgeu	r3,r2,40039d8 <__gedf2+0x70>
 40039c0:	d8800917 	ldw	r2,36(sp)
 40039c4:	8809883a 	mov	r4,r17
 40039c8:	800b883a 	mov	r5,r16
 40039cc:	1880022e 	bgeu	r3,r2,40039d8 <__gedf2+0x70>
 40039d0:	40041240 	call	4004124 <__fpcmp_parts_d>
 40039d4:	100d883a 	mov	r6,r2
 40039d8:	3005883a 	mov	r2,r6
 40039dc:	dfc01017 	ldw	ra,64(sp)
 40039e0:	dc400f17 	ldw	r17,60(sp)
 40039e4:	dc000e17 	ldw	r16,56(sp)
 40039e8:	dec01104 	addi	sp,sp,68
 40039ec:	f800283a 	ret

040039f0 <__floatsidf>:
 40039f0:	2006d7fa 	srli	r3,r4,31
 40039f4:	defff604 	addi	sp,sp,-40
 40039f8:	008000c4 	movi	r2,3
 40039fc:	dfc00915 	stw	ra,36(sp)
 4003a00:	dcc00815 	stw	r19,32(sp)
 4003a04:	dc800715 	stw	r18,28(sp)
 4003a08:	dc400615 	stw	r17,24(sp)
 4003a0c:	dc000515 	stw	r16,20(sp)
 4003a10:	d8800015 	stw	r2,0(sp)
 4003a14:	d8c00115 	stw	r3,4(sp)
 4003a18:	20000f1e 	bne	r4,zero,4003a58 <__floatsidf+0x68>
 4003a1c:	00800084 	movi	r2,2
 4003a20:	d8800015 	stw	r2,0(sp)
 4003a24:	d809883a 	mov	r4,sp
 4003a28:	4003cd80 	call	4003cd8 <__pack_d>
 4003a2c:	1009883a 	mov	r4,r2
 4003a30:	180b883a 	mov	r5,r3
 4003a34:	2005883a 	mov	r2,r4
 4003a38:	2807883a 	mov	r3,r5
 4003a3c:	dfc00917 	ldw	ra,36(sp)
 4003a40:	dcc00817 	ldw	r19,32(sp)
 4003a44:	dc800717 	ldw	r18,28(sp)
 4003a48:	dc400617 	ldw	r17,24(sp)
 4003a4c:	dc000517 	ldw	r16,20(sp)
 4003a50:	dec00a04 	addi	sp,sp,40
 4003a54:	f800283a 	ret
 4003a58:	00800f04 	movi	r2,60
 4003a5c:	1807003a 	cmpeq	r3,r3,zero
 4003a60:	d8800215 	stw	r2,8(sp)
 4003a64:	18001126 	beq	r3,zero,4003aac <__floatsidf+0xbc>
 4003a68:	0027883a 	mov	r19,zero
 4003a6c:	2025883a 	mov	r18,r4
 4003a70:	d9000315 	stw	r4,12(sp)
 4003a74:	dcc00415 	stw	r19,16(sp)
 4003a78:	4003c580 	call	4003c58 <__clzsi2>
 4003a7c:	11000744 	addi	r4,r2,29
 4003a80:	013fe80e 	bge	zero,r4,4003a24 <__floatsidf+0x34>
 4003a84:	10bfff44 	addi	r2,r2,-3
 4003a88:	10000c16 	blt	r2,zero,4003abc <__floatsidf+0xcc>
 4003a8c:	90a2983a 	sll	r17,r18,r2
 4003a90:	0021883a 	mov	r16,zero
 4003a94:	d8800217 	ldw	r2,8(sp)
 4003a98:	dc400415 	stw	r17,16(sp)
 4003a9c:	dc000315 	stw	r16,12(sp)
 4003aa0:	1105c83a 	sub	r2,r2,r4
 4003aa4:	d8800215 	stw	r2,8(sp)
 4003aa8:	003fde06 	br	4003a24 <__floatsidf+0x34>
 4003aac:	00a00034 	movhi	r2,32768
 4003ab0:	20800a26 	beq	r4,r2,4003adc <__floatsidf+0xec>
 4003ab4:	0109c83a 	sub	r4,zero,r4
 4003ab8:	003feb06 	br	4003a68 <__floatsidf+0x78>
 4003abc:	9006d07a 	srli	r3,r18,1
 4003ac0:	008007c4 	movi	r2,31
 4003ac4:	1105c83a 	sub	r2,r2,r4
 4003ac8:	1886d83a 	srl	r3,r3,r2
 4003acc:	9922983a 	sll	r17,r19,r4
 4003ad0:	9120983a 	sll	r16,r18,r4
 4003ad4:	1c62b03a 	or	r17,r3,r17
 4003ad8:	003fee06 	br	4003a94 <__floatsidf+0xa4>
 4003adc:	0009883a 	mov	r4,zero
 4003ae0:	01707834 	movhi	r5,49632
 4003ae4:	003fd306 	br	4003a34 <__floatsidf+0x44>

04003ae8 <__fixdfsi>:
 4003ae8:	defff804 	addi	sp,sp,-32
 4003aec:	2005883a 	mov	r2,r4
 4003af0:	2807883a 	mov	r3,r5
 4003af4:	d809883a 	mov	r4,sp
 4003af8:	d9400204 	addi	r5,sp,8
 4003afc:	d8c00115 	stw	r3,4(sp)
 4003b00:	d8800015 	stw	r2,0(sp)
 4003b04:	dfc00715 	stw	ra,28(sp)
 4003b08:	4003fec0 	call	4003fec <__unpack_d>
 4003b0c:	d8c00217 	ldw	r3,8(sp)
 4003b10:	00800084 	movi	r2,2
 4003b14:	1880051e 	bne	r3,r2,4003b2c <__fixdfsi+0x44>
 4003b18:	0007883a 	mov	r3,zero
 4003b1c:	1805883a 	mov	r2,r3
 4003b20:	dfc00717 	ldw	ra,28(sp)
 4003b24:	dec00804 	addi	sp,sp,32
 4003b28:	f800283a 	ret
 4003b2c:	00800044 	movi	r2,1
 4003b30:	10fff92e 	bgeu	r2,r3,4003b18 <__fixdfsi+0x30>
 4003b34:	00800104 	movi	r2,4
 4003b38:	18800426 	beq	r3,r2,4003b4c <__fixdfsi+0x64>
 4003b3c:	d8c00417 	ldw	r3,16(sp)
 4003b40:	183ff516 	blt	r3,zero,4003b18 <__fixdfsi+0x30>
 4003b44:	00800784 	movi	r2,30
 4003b48:	10c0080e 	bge	r2,r3,4003b6c <__fixdfsi+0x84>
 4003b4c:	d8800317 	ldw	r2,12(sp)
 4003b50:	1000121e 	bne	r2,zero,4003b9c <__fixdfsi+0xb4>
 4003b54:	00e00034 	movhi	r3,32768
 4003b58:	18ffffc4 	addi	r3,r3,-1
 4003b5c:	1805883a 	mov	r2,r3
 4003b60:	dfc00717 	ldw	ra,28(sp)
 4003b64:	dec00804 	addi	sp,sp,32
 4003b68:	f800283a 	ret
 4003b6c:	00800f04 	movi	r2,60
 4003b70:	10d1c83a 	sub	r8,r2,r3
 4003b74:	40bff804 	addi	r2,r8,-32
 4003b78:	d9800517 	ldw	r6,20(sp)
 4003b7c:	d9c00617 	ldw	r7,24(sp)
 4003b80:	10000816 	blt	r2,zero,4003ba4 <__fixdfsi+0xbc>
 4003b84:	3888d83a 	srl	r4,r7,r2
 4003b88:	d8800317 	ldw	r2,12(sp)
 4003b8c:	2007883a 	mov	r3,r4
 4003b90:	103fe226 	beq	r2,zero,4003b1c <__fixdfsi+0x34>
 4003b94:	0107c83a 	sub	r3,zero,r4
 4003b98:	003fe006 	br	4003b1c <__fixdfsi+0x34>
 4003b9c:	00e00034 	movhi	r3,32768
 4003ba0:	003fde06 	br	4003b1c <__fixdfsi+0x34>
 4003ba4:	39c7883a 	add	r3,r7,r7
 4003ba8:	008007c4 	movi	r2,31
 4003bac:	1205c83a 	sub	r2,r2,r8
 4003bb0:	1886983a 	sll	r3,r3,r2
 4003bb4:	3208d83a 	srl	r4,r6,r8
 4003bb8:	1908b03a 	or	r4,r3,r4
 4003bbc:	003ff206 	br	4003b88 <__fixdfsi+0xa0>

04003bc0 <__muldi3>:
 4003bc0:	2011883a 	mov	r8,r4
 4003bc4:	427fffcc 	andi	r9,r8,65535
 4003bc8:	4018d43a 	srli	r12,r8,16
 4003bcc:	32bfffcc 	andi	r10,r6,65535
 4003bd0:	3016d43a 	srli	r11,r6,16
 4003bd4:	4a85383a 	mul	r2,r9,r10
 4003bd8:	6295383a 	mul	r10,r12,r10
 4003bdc:	4ad3383a 	mul	r9,r9,r11
 4003be0:	113fffcc 	andi	r4,r2,65535
 4003be4:	1004d43a 	srli	r2,r2,16
 4003be8:	4a93883a 	add	r9,r9,r10
 4003bec:	3807883a 	mov	r3,r7
 4003bf0:	1245883a 	add	r2,r2,r9
 4003bf4:	280f883a 	mov	r7,r5
 4003bf8:	180b883a 	mov	r5,r3
 4003bfc:	1006943a 	slli	r3,r2,16
 4003c00:	defffd04 	addi	sp,sp,-12
 4003c04:	dc800215 	stw	r18,8(sp)
 4003c08:	1907883a 	add	r3,r3,r4
 4003c0c:	dc400115 	stw	r17,4(sp)
 4003c10:	dc000015 	stw	r16,0(sp)
 4003c14:	4165383a 	mul	r18,r8,r5
 4003c18:	31e3383a 	mul	r17,r6,r7
 4003c1c:	1012d43a 	srli	r9,r2,16
 4003c20:	62d9383a 	mul	r12,r12,r11
 4003c24:	181f883a 	mov	r15,r3
 4003c28:	1280022e 	bgeu	r2,r10,4003c34 <__muldi3+0x74>
 4003c2c:	00800074 	movhi	r2,1
 4003c30:	6099883a 	add	r12,r12,r2
 4003c34:	624d883a 	add	r6,r12,r9
 4003c38:	9187883a 	add	r3,r18,r6
 4003c3c:	88c7883a 	add	r3,r17,r3
 4003c40:	7805883a 	mov	r2,r15
 4003c44:	dc800217 	ldw	r18,8(sp)
 4003c48:	dc400117 	ldw	r17,4(sp)
 4003c4c:	dc000017 	ldw	r16,0(sp)
 4003c50:	dec00304 	addi	sp,sp,12
 4003c54:	f800283a 	ret

04003c58 <__clzsi2>:
 4003c58:	00bfffd4 	movui	r2,65535
 4003c5c:	11000e36 	bltu	r2,r4,4003c98 <__clzsi2+0x40>
 4003c60:	00803fc4 	movi	r2,255
 4003c64:	01400204 	movi	r5,8
 4003c68:	0007883a 	mov	r3,zero
 4003c6c:	11001036 	bltu	r2,r4,4003cb0 <__clzsi2+0x58>
 4003c70:	000b883a 	mov	r5,zero
 4003c74:	20c6d83a 	srl	r3,r4,r3
 4003c78:	00810074 	movhi	r2,1025
 4003c7c:	10846a04 	addi	r2,r2,4520
 4003c80:	1887883a 	add	r3,r3,r2
 4003c84:	18800003 	ldbu	r2,0(r3)
 4003c88:	00c00804 	movi	r3,32
 4003c8c:	2885883a 	add	r2,r5,r2
 4003c90:	1885c83a 	sub	r2,r3,r2
 4003c94:	f800283a 	ret
 4003c98:	01400404 	movi	r5,16
 4003c9c:	00804034 	movhi	r2,256
 4003ca0:	10bfffc4 	addi	r2,r2,-1
 4003ca4:	2807883a 	mov	r3,r5
 4003ca8:	113ff22e 	bgeu	r2,r4,4003c74 <__clzsi2+0x1c>
 4003cac:	01400604 	movi	r5,24
 4003cb0:	2807883a 	mov	r3,r5
 4003cb4:	20c6d83a 	srl	r3,r4,r3
 4003cb8:	00810074 	movhi	r2,1025
 4003cbc:	10846a04 	addi	r2,r2,4520
 4003cc0:	1887883a 	add	r3,r3,r2
 4003cc4:	18800003 	ldbu	r2,0(r3)
 4003cc8:	00c00804 	movi	r3,32
 4003ccc:	2885883a 	add	r2,r5,r2
 4003cd0:	1885c83a 	sub	r2,r3,r2
 4003cd4:	f800283a 	ret

04003cd8 <__pack_d>:
 4003cd8:	20c00017 	ldw	r3,0(r4)
 4003cdc:	defffd04 	addi	sp,sp,-12
 4003ce0:	dc000015 	stw	r16,0(sp)
 4003ce4:	dc800215 	stw	r18,8(sp)
 4003ce8:	dc400115 	stw	r17,4(sp)
 4003cec:	00800044 	movi	r2,1
 4003cf0:	22000317 	ldw	r8,12(r4)
 4003cf4:	001f883a 	mov	r15,zero
 4003cf8:	22400417 	ldw	r9,16(r4)
 4003cfc:	24000117 	ldw	r16,4(r4)
 4003d00:	10c0552e 	bgeu	r2,r3,4003e58 <__pack_d+0x180>
 4003d04:	00800104 	movi	r2,4
 4003d08:	18804f26 	beq	r3,r2,4003e48 <__pack_d+0x170>
 4003d0c:	00800084 	movi	r2,2
 4003d10:	18800226 	beq	r3,r2,4003d1c <__pack_d+0x44>
 4003d14:	4244b03a 	or	r2,r8,r9
 4003d18:	10001a1e 	bne	r2,zero,4003d84 <__pack_d+0xac>
 4003d1c:	000d883a 	mov	r6,zero
 4003d20:	000f883a 	mov	r7,zero
 4003d24:	0011883a 	mov	r8,zero
 4003d28:	00800434 	movhi	r2,16
 4003d2c:	10bfffc4 	addi	r2,r2,-1
 4003d30:	301d883a 	mov	r14,r6
 4003d34:	3884703a 	and	r2,r7,r2
 4003d38:	400a953a 	slli	r5,r8,20
 4003d3c:	79bffc2c 	andhi	r6,r15,65520
 4003d40:	308cb03a 	or	r6,r6,r2
 4003d44:	00e00434 	movhi	r3,32784
 4003d48:	18ffffc4 	addi	r3,r3,-1
 4003d4c:	800497fa 	slli	r2,r16,31
 4003d50:	30c6703a 	and	r3,r6,r3
 4003d54:	1946b03a 	or	r3,r3,r5
 4003d58:	01600034 	movhi	r5,32768
 4003d5c:	297fffc4 	addi	r5,r5,-1
 4003d60:	194a703a 	and	r5,r3,r5
 4003d64:	288ab03a 	or	r5,r5,r2
 4003d68:	2807883a 	mov	r3,r5
 4003d6c:	7005883a 	mov	r2,r14
 4003d70:	dc800217 	ldw	r18,8(sp)
 4003d74:	dc400117 	ldw	r17,4(sp)
 4003d78:	dc000017 	ldw	r16,0(sp)
 4003d7c:	dec00304 	addi	sp,sp,12
 4003d80:	f800283a 	ret
 4003d84:	21000217 	ldw	r4,8(r4)
 4003d88:	00bf0084 	movi	r2,-1022
 4003d8c:	20803f16 	blt	r4,r2,4003e8c <__pack_d+0x1b4>
 4003d90:	0080ffc4 	movi	r2,1023
 4003d94:	11002c16 	blt	r2,r4,4003e48 <__pack_d+0x170>
 4003d98:	00803fc4 	movi	r2,255
 4003d9c:	408c703a 	and	r6,r8,r2
 4003da0:	00802004 	movi	r2,128
 4003da4:	0007883a 	mov	r3,zero
 4003da8:	000f883a 	mov	r7,zero
 4003dac:	2280ffc4 	addi	r10,r4,1023
 4003db0:	30801e26 	beq	r6,r2,4003e2c <__pack_d+0x154>
 4003db4:	00801fc4 	movi	r2,127
 4003db8:	4089883a 	add	r4,r8,r2
 4003dbc:	220d803a 	cmpltu	r6,r4,r8
 4003dc0:	324d883a 	add	r6,r6,r9
 4003dc4:	2011883a 	mov	r8,r4
 4003dc8:	3013883a 	mov	r9,r6
 4003dcc:	00880034 	movhi	r2,8192
 4003dd0:	10bfffc4 	addi	r2,r2,-1
 4003dd4:	12400d36 	bltu	r2,r9,4003e0c <__pack_d+0x134>
 4003dd8:	4804963a 	slli	r2,r9,24
 4003ddc:	400cd23a 	srli	r6,r8,8
 4003de0:	480ed23a 	srli	r7,r9,8
 4003de4:	013fffc4 	movi	r4,-1
 4003de8:	118cb03a 	or	r6,r2,r6
 4003dec:	01400434 	movhi	r5,16
 4003df0:	297fffc4 	addi	r5,r5,-1
 4003df4:	3104703a 	and	r2,r6,r4
 4003df8:	3946703a 	and	r3,r7,r5
 4003dfc:	5201ffcc 	andi	r8,r10,2047
 4003e00:	100d883a 	mov	r6,r2
 4003e04:	180f883a 	mov	r7,r3
 4003e08:	003fc706 	br	4003d28 <__pack_d+0x50>
 4003e0c:	480897fa 	slli	r4,r9,31
 4003e10:	4004d07a 	srli	r2,r8,1
 4003e14:	4806d07a 	srli	r3,r9,1
 4003e18:	52800044 	addi	r10,r10,1
 4003e1c:	2084b03a 	or	r2,r4,r2
 4003e20:	1011883a 	mov	r8,r2
 4003e24:	1813883a 	mov	r9,r3
 4003e28:	003feb06 	br	4003dd8 <__pack_d+0x100>
 4003e2c:	383fe11e 	bne	r7,zero,4003db4 <__pack_d+0xdc>
 4003e30:	01004004 	movi	r4,256
 4003e34:	4104703a 	and	r2,r8,r4
 4003e38:	10c4b03a 	or	r2,r2,r3
 4003e3c:	103fe326 	beq	r2,zero,4003dcc <__pack_d+0xf4>
 4003e40:	3005883a 	mov	r2,r6
 4003e44:	003fdc06 	br	4003db8 <__pack_d+0xe0>
 4003e48:	000d883a 	mov	r6,zero
 4003e4c:	000f883a 	mov	r7,zero
 4003e50:	0201ffc4 	movi	r8,2047
 4003e54:	003fb406 	br	4003d28 <__pack_d+0x50>
 4003e58:	0005883a 	mov	r2,zero
 4003e5c:	00c00234 	movhi	r3,8
 4003e60:	408cb03a 	or	r6,r8,r2
 4003e64:	48ceb03a 	or	r7,r9,r3
 4003e68:	013fffc4 	movi	r4,-1
 4003e6c:	01400434 	movhi	r5,16
 4003e70:	297fffc4 	addi	r5,r5,-1
 4003e74:	3104703a 	and	r2,r6,r4
 4003e78:	3946703a 	and	r3,r7,r5
 4003e7c:	100d883a 	mov	r6,r2
 4003e80:	180f883a 	mov	r7,r3
 4003e84:	0201ffc4 	movi	r8,2047
 4003e88:	003fa706 	br	4003d28 <__pack_d+0x50>
 4003e8c:	1109c83a 	sub	r4,r2,r4
 4003e90:	00800e04 	movi	r2,56
 4003e94:	11004316 	blt	r2,r4,4003fa4 <__pack_d+0x2cc>
 4003e98:	21fff804 	addi	r7,r4,-32
 4003e9c:	38004516 	blt	r7,zero,4003fb4 <__pack_d+0x2dc>
 4003ea0:	49d8d83a 	srl	r12,r9,r7
 4003ea4:	001b883a 	mov	r13,zero
 4003ea8:	0023883a 	mov	r17,zero
 4003eac:	01400044 	movi	r5,1
 4003eb0:	0025883a 	mov	r18,zero
 4003eb4:	38004716 	blt	r7,zero,4003fd4 <__pack_d+0x2fc>
 4003eb8:	29d6983a 	sll	r11,r5,r7
 4003ebc:	0015883a 	mov	r10,zero
 4003ec0:	00bfffc4 	movi	r2,-1
 4003ec4:	5089883a 	add	r4,r10,r2
 4003ec8:	588b883a 	add	r5,r11,r2
 4003ecc:	228d803a 	cmpltu	r6,r4,r10
 4003ed0:	314b883a 	add	r5,r6,r5
 4003ed4:	4104703a 	and	r2,r8,r4
 4003ed8:	4946703a 	and	r3,r9,r5
 4003edc:	10c4b03a 	or	r2,r2,r3
 4003ee0:	10000226 	beq	r2,zero,4003eec <__pack_d+0x214>
 4003ee4:	04400044 	movi	r17,1
 4003ee8:	0025883a 	mov	r18,zero
 4003eec:	00803fc4 	movi	r2,255
 4003ef0:	644eb03a 	or	r7,r12,r17
 4003ef4:	3892703a 	and	r9,r7,r2
 4003ef8:	00802004 	movi	r2,128
 4003efc:	6c90b03a 	or	r8,r13,r18
 4003f00:	0015883a 	mov	r10,zero
 4003f04:	48801626 	beq	r9,r2,4003f60 <__pack_d+0x288>
 4003f08:	01001fc4 	movi	r4,127
 4003f0c:	3905883a 	add	r2,r7,r4
 4003f10:	11cd803a 	cmpltu	r6,r2,r7
 4003f14:	320d883a 	add	r6,r6,r8
 4003f18:	100f883a 	mov	r7,r2
 4003f1c:	00840034 	movhi	r2,4096
 4003f20:	10bfffc4 	addi	r2,r2,-1
 4003f24:	3011883a 	mov	r8,r6
 4003f28:	0007883a 	mov	r3,zero
 4003f2c:	11801b36 	bltu	r2,r6,4003f9c <__pack_d+0x2c4>
 4003f30:	4004963a 	slli	r2,r8,24
 4003f34:	3808d23a 	srli	r4,r7,8
 4003f38:	400ad23a 	srli	r5,r8,8
 4003f3c:	1813883a 	mov	r9,r3
 4003f40:	1108b03a 	or	r4,r2,r4
 4003f44:	00bfffc4 	movi	r2,-1
 4003f48:	00c00434 	movhi	r3,16
 4003f4c:	18ffffc4 	addi	r3,r3,-1
 4003f50:	208c703a 	and	r6,r4,r2
 4003f54:	28ce703a 	and	r7,r5,r3
 4003f58:	4a01ffcc 	andi	r8,r9,2047
 4003f5c:	003f7206 	br	4003d28 <__pack_d+0x50>
 4003f60:	503fe91e 	bne	r10,zero,4003f08 <__pack_d+0x230>
 4003f64:	01004004 	movi	r4,256
 4003f68:	3904703a 	and	r2,r7,r4
 4003f6c:	0007883a 	mov	r3,zero
 4003f70:	10c4b03a 	or	r2,r2,r3
 4003f74:	10000626 	beq	r2,zero,4003f90 <__pack_d+0x2b8>
 4003f78:	3a45883a 	add	r2,r7,r9
 4003f7c:	11cd803a 	cmpltu	r6,r2,r7
 4003f80:	320d883a 	add	r6,r6,r8
 4003f84:	100f883a 	mov	r7,r2
 4003f88:	3011883a 	mov	r8,r6
 4003f8c:	0007883a 	mov	r3,zero
 4003f90:	00840034 	movhi	r2,4096
 4003f94:	10bfffc4 	addi	r2,r2,-1
 4003f98:	123fe52e 	bgeu	r2,r8,4003f30 <__pack_d+0x258>
 4003f9c:	00c00044 	movi	r3,1
 4003fa0:	003fe306 	br	4003f30 <__pack_d+0x258>
 4003fa4:	0009883a 	mov	r4,zero
 4003fa8:	0013883a 	mov	r9,zero
 4003fac:	000b883a 	mov	r5,zero
 4003fb0:	003fe406 	br	4003f44 <__pack_d+0x26c>
 4003fb4:	4a47883a 	add	r3,r9,r9
 4003fb8:	008007c4 	movi	r2,31
 4003fbc:	1105c83a 	sub	r2,r2,r4
 4003fc0:	1886983a 	sll	r3,r3,r2
 4003fc4:	4118d83a 	srl	r12,r8,r4
 4003fc8:	491ad83a 	srl	r13,r9,r4
 4003fcc:	1b18b03a 	or	r12,r3,r12
 4003fd0:	003fb506 	br	4003ea8 <__pack_d+0x1d0>
 4003fd4:	2806d07a 	srli	r3,r5,1
 4003fd8:	008007c4 	movi	r2,31
 4003fdc:	1105c83a 	sub	r2,r2,r4
 4003fe0:	1896d83a 	srl	r11,r3,r2
 4003fe4:	2914983a 	sll	r10,r5,r4
 4003fe8:	003fb506 	br	4003ec0 <__pack_d+0x1e8>

04003fec <__unpack_d>:
 4003fec:	20c00117 	ldw	r3,4(r4)
 4003ff0:	22400017 	ldw	r9,0(r4)
 4003ff4:	00800434 	movhi	r2,16
 4003ff8:	10bfffc4 	addi	r2,r2,-1
 4003ffc:	1808d53a 	srli	r4,r3,20
 4004000:	180cd7fa 	srli	r6,r3,31
 4004004:	1894703a 	and	r10,r3,r2
 4004008:	2201ffcc 	andi	r8,r4,2047
 400400c:	281b883a 	mov	r13,r5
 4004010:	4817883a 	mov	r11,r9
 4004014:	29800115 	stw	r6,4(r5)
 4004018:	5019883a 	mov	r12,r10
 400401c:	40001e1e 	bne	r8,zero,4004098 <__unpack_d+0xac>
 4004020:	4a84b03a 	or	r2,r9,r10
 4004024:	10001926 	beq	r2,zero,400408c <__unpack_d+0xa0>
 4004028:	4804d63a 	srli	r2,r9,24
 400402c:	500c923a 	slli	r6,r10,8
 4004030:	013f0084 	movi	r4,-1022
 4004034:	00c40034 	movhi	r3,4096
 4004038:	18ffffc4 	addi	r3,r3,-1
 400403c:	118cb03a 	or	r6,r2,r6
 4004040:	008000c4 	movi	r2,3
 4004044:	480a923a 	slli	r5,r9,8
 4004048:	68800015 	stw	r2,0(r13)
 400404c:	69000215 	stw	r4,8(r13)
 4004050:	19800b36 	bltu	r3,r6,4004080 <__unpack_d+0x94>
 4004054:	200f883a 	mov	r7,r4
 4004058:	1811883a 	mov	r8,r3
 400405c:	2945883a 	add	r2,r5,r5
 4004060:	1149803a 	cmpltu	r4,r2,r5
 4004064:	3187883a 	add	r3,r6,r6
 4004068:	20c9883a 	add	r4,r4,r3
 400406c:	100b883a 	mov	r5,r2
 4004070:	200d883a 	mov	r6,r4
 4004074:	39ffffc4 	addi	r7,r7,-1
 4004078:	413ff82e 	bgeu	r8,r4,400405c <__unpack_d+0x70>
 400407c:	69c00215 	stw	r7,8(r13)
 4004080:	69800415 	stw	r6,16(r13)
 4004084:	69400315 	stw	r5,12(r13)
 4004088:	f800283a 	ret
 400408c:	00800084 	movi	r2,2
 4004090:	28800015 	stw	r2,0(r5)
 4004094:	f800283a 	ret
 4004098:	0081ffc4 	movi	r2,2047
 400409c:	40800f26 	beq	r8,r2,40040dc <__unpack_d+0xf0>
 40040a0:	480cd63a 	srli	r6,r9,24
 40040a4:	5006923a 	slli	r3,r10,8
 40040a8:	4804923a 	slli	r2,r9,8
 40040ac:	0009883a 	mov	r4,zero
 40040b0:	30c6b03a 	or	r3,r6,r3
 40040b4:	01440034 	movhi	r5,4096
 40040b8:	110cb03a 	or	r6,r2,r4
 40040bc:	423f0044 	addi	r8,r8,-1023
 40040c0:	194eb03a 	or	r7,r3,r5
 40040c4:	008000c4 	movi	r2,3
 40040c8:	69c00415 	stw	r7,16(r13)
 40040cc:	6a000215 	stw	r8,8(r13)
 40040d0:	68800015 	stw	r2,0(r13)
 40040d4:	69800315 	stw	r6,12(r13)
 40040d8:	f800283a 	ret
 40040dc:	4a84b03a 	or	r2,r9,r10
 40040e0:	1000031e 	bne	r2,zero,40040f0 <__unpack_d+0x104>
 40040e4:	00800104 	movi	r2,4
 40040e8:	28800015 	stw	r2,0(r5)
 40040ec:	f800283a 	ret
 40040f0:	0009883a 	mov	r4,zero
 40040f4:	01400234 	movhi	r5,8
 40040f8:	4904703a 	and	r2,r9,r4
 40040fc:	5146703a 	and	r3,r10,r5
 4004100:	10c4b03a 	or	r2,r2,r3
 4004104:	10000526 	beq	r2,zero,400411c <__unpack_d+0x130>
 4004108:	00800044 	movi	r2,1
 400410c:	68800015 	stw	r2,0(r13)
 4004110:	6b000415 	stw	r12,16(r13)
 4004114:	6ac00315 	stw	r11,12(r13)
 4004118:	f800283a 	ret
 400411c:	68000015 	stw	zero,0(r13)
 4004120:	003ffb06 	br	4004110 <__unpack_d+0x124>

04004124 <__fpcmp_parts_d>:
 4004124:	21800017 	ldw	r6,0(r4)
 4004128:	00c00044 	movi	r3,1
 400412c:	19800a2e 	bgeu	r3,r6,4004158 <__fpcmp_parts_d+0x34>
 4004130:	28800017 	ldw	r2,0(r5)
 4004134:	1880082e 	bgeu	r3,r2,4004158 <__fpcmp_parts_d+0x34>
 4004138:	00c00104 	movi	r3,4
 400413c:	30c02626 	beq	r6,r3,40041d8 <__fpcmp_parts_d+0xb4>
 4004140:	10c02226 	beq	r2,r3,40041cc <__fpcmp_parts_d+0xa8>
 4004144:	00c00084 	movi	r3,2
 4004148:	30c00526 	beq	r6,r3,4004160 <__fpcmp_parts_d+0x3c>
 400414c:	10c0071e 	bne	r2,r3,400416c <__fpcmp_parts_d+0x48>
 4004150:	20800117 	ldw	r2,4(r4)
 4004154:	1000091e 	bne	r2,zero,400417c <__fpcmp_parts_d+0x58>
 4004158:	00800044 	movi	r2,1
 400415c:	f800283a 	ret
 4004160:	10c01a1e 	bne	r2,r3,40041cc <__fpcmp_parts_d+0xa8>
 4004164:	0005883a 	mov	r2,zero
 4004168:	f800283a 	ret
 400416c:	22000117 	ldw	r8,4(r4)
 4004170:	28800117 	ldw	r2,4(r5)
 4004174:	40800326 	beq	r8,r2,4004184 <__fpcmp_parts_d+0x60>
 4004178:	403ff726 	beq	r8,zero,4004158 <__fpcmp_parts_d+0x34>
 400417c:	00bfffc4 	movi	r2,-1
 4004180:	f800283a 	ret
 4004184:	20c00217 	ldw	r3,8(r4)
 4004188:	28800217 	ldw	r2,8(r5)
 400418c:	10fffa16 	blt	r2,r3,4004178 <__fpcmp_parts_d+0x54>
 4004190:	18800916 	blt	r3,r2,40041b8 <__fpcmp_parts_d+0x94>
 4004194:	21c00417 	ldw	r7,16(r4)
 4004198:	28c00417 	ldw	r3,16(r5)
 400419c:	21800317 	ldw	r6,12(r4)
 40041a0:	28800317 	ldw	r2,12(r5)
 40041a4:	19fff436 	bltu	r3,r7,4004178 <__fpcmp_parts_d+0x54>
 40041a8:	38c00526 	beq	r7,r3,40041c0 <__fpcmp_parts_d+0x9c>
 40041ac:	38c00236 	bltu	r7,r3,40041b8 <__fpcmp_parts_d+0x94>
 40041b0:	19ffec1e 	bne	r3,r7,4004164 <__fpcmp_parts_d+0x40>
 40041b4:	30bfeb2e 	bgeu	r6,r2,4004164 <__fpcmp_parts_d+0x40>
 40041b8:	403fe71e 	bne	r8,zero,4004158 <__fpcmp_parts_d+0x34>
 40041bc:	003fef06 	br	400417c <__fpcmp_parts_d+0x58>
 40041c0:	11bffa2e 	bgeu	r2,r6,40041ac <__fpcmp_parts_d+0x88>
 40041c4:	403fe426 	beq	r8,zero,4004158 <__fpcmp_parts_d+0x34>
 40041c8:	003fec06 	br	400417c <__fpcmp_parts_d+0x58>
 40041cc:	28800117 	ldw	r2,4(r5)
 40041d0:	103fe11e 	bne	r2,zero,4004158 <__fpcmp_parts_d+0x34>
 40041d4:	003fe906 	br	400417c <__fpcmp_parts_d+0x58>
 40041d8:	11bfdd1e 	bne	r2,r6,4004150 <__fpcmp_parts_d+0x2c>
 40041dc:	28c00117 	ldw	r3,4(r5)
 40041e0:	20800117 	ldw	r2,4(r4)
 40041e4:	1885c83a 	sub	r2,r3,r2
 40041e8:	f800283a 	ret

040041ec <_fclose_r>:
 40041ec:	defffc04 	addi	sp,sp,-16
 40041f0:	dc400115 	stw	r17,4(sp)
 40041f4:	dc000015 	stw	r16,0(sp)
 40041f8:	dfc00315 	stw	ra,12(sp)
 40041fc:	dc800215 	stw	r18,8(sp)
 4004200:	2821883a 	mov	r16,r5
 4004204:	2023883a 	mov	r17,r4
 4004208:	28002926 	beq	r5,zero,40042b0 <_fclose_r+0xc4>
 400420c:	40045980 	call	4004598 <__sfp_lock_acquire>
 4004210:	88000226 	beq	r17,zero,400421c <_fclose_r+0x30>
 4004214:	88800e17 	ldw	r2,56(r17)
 4004218:	10002d26 	beq	r2,zero,40042d0 <_fclose_r+0xe4>
 400421c:	8080030f 	ldh	r2,12(r16)
 4004220:	10002226 	beq	r2,zero,40042ac <_fclose_r+0xc0>
 4004224:	8809883a 	mov	r4,r17
 4004228:	800b883a 	mov	r5,r16
 400422c:	40043100 	call	4004310 <_fflush_r>
 4004230:	1025883a 	mov	r18,r2
 4004234:	80800b17 	ldw	r2,44(r16)
 4004238:	10000426 	beq	r2,zero,400424c <_fclose_r+0x60>
 400423c:	81400717 	ldw	r5,28(r16)
 4004240:	8809883a 	mov	r4,r17
 4004244:	103ee83a 	callr	r2
 4004248:	10002a16 	blt	r2,zero,40042f4 <_fclose_r+0x108>
 400424c:	8080030b 	ldhu	r2,12(r16)
 4004250:	1080200c 	andi	r2,r2,128
 4004254:	1000231e 	bne	r2,zero,40042e4 <_fclose_r+0xf8>
 4004258:	81400c17 	ldw	r5,48(r16)
 400425c:	28000526 	beq	r5,zero,4004274 <_fclose_r+0x88>
 4004260:	80801004 	addi	r2,r16,64
 4004264:	28800226 	beq	r5,r2,4004270 <_fclose_r+0x84>
 4004268:	8809883a 	mov	r4,r17
 400426c:	4004a9c0 	call	4004a9c <_free_r>
 4004270:	80000c15 	stw	zero,48(r16)
 4004274:	81401117 	ldw	r5,68(r16)
 4004278:	28000326 	beq	r5,zero,4004288 <_fclose_r+0x9c>
 400427c:	8809883a 	mov	r4,r17
 4004280:	4004a9c0 	call	4004a9c <_free_r>
 4004284:	80001115 	stw	zero,68(r16)
 4004288:	8000030d 	sth	zero,12(r16)
 400428c:	400459c0 	call	400459c <__sfp_lock_release>
 4004290:	9005883a 	mov	r2,r18
 4004294:	dfc00317 	ldw	ra,12(sp)
 4004298:	dc800217 	ldw	r18,8(sp)
 400429c:	dc400117 	ldw	r17,4(sp)
 40042a0:	dc000017 	ldw	r16,0(sp)
 40042a4:	dec00404 	addi	sp,sp,16
 40042a8:	f800283a 	ret
 40042ac:	400459c0 	call	400459c <__sfp_lock_release>
 40042b0:	0025883a 	mov	r18,zero
 40042b4:	9005883a 	mov	r2,r18
 40042b8:	dfc00317 	ldw	ra,12(sp)
 40042bc:	dc800217 	ldw	r18,8(sp)
 40042c0:	dc400117 	ldw	r17,4(sp)
 40042c4:	dc000017 	ldw	r16,0(sp)
 40042c8:	dec00404 	addi	sp,sp,16
 40042cc:	f800283a 	ret
 40042d0:	8809883a 	mov	r4,r17
 40042d4:	40045a80 	call	40045a8 <__sinit>
 40042d8:	8080030f 	ldh	r2,12(r16)
 40042dc:	103fd11e 	bne	r2,zero,4004224 <_fclose_r+0x38>
 40042e0:	003ff206 	br	40042ac <_fclose_r+0xc0>
 40042e4:	81400417 	ldw	r5,16(r16)
 40042e8:	8809883a 	mov	r4,r17
 40042ec:	4004a9c0 	call	4004a9c <_free_r>
 40042f0:	003fd906 	br	4004258 <_fclose_r+0x6c>
 40042f4:	04bfffc4 	movi	r18,-1
 40042f8:	003fd406 	br	400424c <_fclose_r+0x60>

040042fc <fclose>:
 40042fc:	00810074 	movhi	r2,1025
 4004300:	108bf304 	addi	r2,r2,12236
 4004304:	200b883a 	mov	r5,r4
 4004308:	11000017 	ldw	r4,0(r2)
 400430c:	40041ec1 	jmpi	40041ec <_fclose_r>

04004310 <_fflush_r>:
 4004310:	defffb04 	addi	sp,sp,-20
 4004314:	dcc00315 	stw	r19,12(sp)
 4004318:	dc800215 	stw	r18,8(sp)
 400431c:	dfc00415 	stw	ra,16(sp)
 4004320:	dc400115 	stw	r17,4(sp)
 4004324:	dc000015 	stw	r16,0(sp)
 4004328:	2027883a 	mov	r19,r4
 400432c:	2825883a 	mov	r18,r5
 4004330:	20000226 	beq	r4,zero,400433c <_fflush_r+0x2c>
 4004334:	20800e17 	ldw	r2,56(r4)
 4004338:	10005626 	beq	r2,zero,4004494 <_fflush_r+0x184>
 400433c:	9100030b 	ldhu	r4,12(r18)
 4004340:	20ffffcc 	andi	r3,r4,65535
 4004344:	18e0001c 	xori	r3,r3,32768
 4004348:	18e00004 	addi	r3,r3,-32768
 400434c:	1880020c 	andi	r2,r3,8
 4004350:	1000261e 	bne	r2,zero,40043ec <_fflush_r+0xdc>
 4004354:	90c00117 	ldw	r3,4(r18)
 4004358:	20820014 	ori	r2,r4,2048
 400435c:	9080030d 	sth	r2,12(r18)
 4004360:	1009883a 	mov	r4,r2
 4004364:	00c0400e 	bge	zero,r3,4004468 <_fflush_r+0x158>
 4004368:	92000a17 	ldw	r8,40(r18)
 400436c:	40004026 	beq	r8,zero,4004470 <_fflush_r+0x160>
 4004370:	2084000c 	andi	r2,r4,4096
 4004374:	10005326 	beq	r2,zero,40044c4 <_fflush_r+0x1b4>
 4004378:	94001417 	ldw	r16,80(r18)
 400437c:	9080030b 	ldhu	r2,12(r18)
 4004380:	1080010c 	andi	r2,r2,4
 4004384:	1000481e 	bne	r2,zero,40044a8 <_fflush_r+0x198>
 4004388:	91400717 	ldw	r5,28(r18)
 400438c:	9809883a 	mov	r4,r19
 4004390:	800d883a 	mov	r6,r16
 4004394:	000f883a 	mov	r7,zero
 4004398:	403ee83a 	callr	r8
 400439c:	8080261e 	bne	r16,r2,4004438 <_fflush_r+0x128>
 40043a0:	9080030b 	ldhu	r2,12(r18)
 40043a4:	91000417 	ldw	r4,16(r18)
 40043a8:	90000115 	stw	zero,4(r18)
 40043ac:	10bdffcc 	andi	r2,r2,63487
 40043b0:	10ffffcc 	andi	r3,r2,65535
 40043b4:	18c4000c 	andi	r3,r3,4096
 40043b8:	9080030d 	sth	r2,12(r18)
 40043bc:	91000015 	stw	r4,0(r18)
 40043c0:	18002b26 	beq	r3,zero,4004470 <_fflush_r+0x160>
 40043c4:	0007883a 	mov	r3,zero
 40043c8:	1805883a 	mov	r2,r3
 40043cc:	94001415 	stw	r16,80(r18)
 40043d0:	dfc00417 	ldw	ra,16(sp)
 40043d4:	dcc00317 	ldw	r19,12(sp)
 40043d8:	dc800217 	ldw	r18,8(sp)
 40043dc:	dc400117 	ldw	r17,4(sp)
 40043e0:	dc000017 	ldw	r16,0(sp)
 40043e4:	dec00504 	addi	sp,sp,20
 40043e8:	f800283a 	ret
 40043ec:	94400417 	ldw	r17,16(r18)
 40043f0:	88001f26 	beq	r17,zero,4004470 <_fflush_r+0x160>
 40043f4:	90800017 	ldw	r2,0(r18)
 40043f8:	18c000cc 	andi	r3,r3,3
 40043fc:	94400015 	stw	r17,0(r18)
 4004400:	1461c83a 	sub	r16,r2,r17
 4004404:	18002526 	beq	r3,zero,400449c <_fflush_r+0x18c>
 4004408:	0005883a 	mov	r2,zero
 400440c:	90800215 	stw	r2,8(r18)
 4004410:	0400170e 	bge	zero,r16,4004470 <_fflush_r+0x160>
 4004414:	90c00917 	ldw	r3,36(r18)
 4004418:	91400717 	ldw	r5,28(r18)
 400441c:	880d883a 	mov	r6,r17
 4004420:	800f883a 	mov	r7,r16
 4004424:	9809883a 	mov	r4,r19
 4004428:	183ee83a 	callr	r3
 400442c:	88a3883a 	add	r17,r17,r2
 4004430:	80a1c83a 	sub	r16,r16,r2
 4004434:	00bff616 	blt	zero,r2,4004410 <_fflush_r+0x100>
 4004438:	9080030b 	ldhu	r2,12(r18)
 400443c:	00ffffc4 	movi	r3,-1
 4004440:	10801014 	ori	r2,r2,64
 4004444:	9080030d 	sth	r2,12(r18)
 4004448:	1805883a 	mov	r2,r3
 400444c:	dfc00417 	ldw	ra,16(sp)
 4004450:	dcc00317 	ldw	r19,12(sp)
 4004454:	dc800217 	ldw	r18,8(sp)
 4004458:	dc400117 	ldw	r17,4(sp)
 400445c:	dc000017 	ldw	r16,0(sp)
 4004460:	dec00504 	addi	sp,sp,20
 4004464:	f800283a 	ret
 4004468:	90800f17 	ldw	r2,60(r18)
 400446c:	00bfbe16 	blt	zero,r2,4004368 <_fflush_r+0x58>
 4004470:	0007883a 	mov	r3,zero
 4004474:	1805883a 	mov	r2,r3
 4004478:	dfc00417 	ldw	ra,16(sp)
 400447c:	dcc00317 	ldw	r19,12(sp)
 4004480:	dc800217 	ldw	r18,8(sp)
 4004484:	dc400117 	ldw	r17,4(sp)
 4004488:	dc000017 	ldw	r16,0(sp)
 400448c:	dec00504 	addi	sp,sp,20
 4004490:	f800283a 	ret
 4004494:	40045a80 	call	40045a8 <__sinit>
 4004498:	003fa806 	br	400433c <_fflush_r+0x2c>
 400449c:	90800517 	ldw	r2,20(r18)
 40044a0:	90800215 	stw	r2,8(r18)
 40044a4:	003fda06 	br	4004410 <_fflush_r+0x100>
 40044a8:	90800117 	ldw	r2,4(r18)
 40044ac:	90c00c17 	ldw	r3,48(r18)
 40044b0:	80a1c83a 	sub	r16,r16,r2
 40044b4:	183fb426 	beq	r3,zero,4004388 <_fflush_r+0x78>
 40044b8:	90800f17 	ldw	r2,60(r18)
 40044bc:	80a1c83a 	sub	r16,r16,r2
 40044c0:	003fb106 	br	4004388 <_fflush_r+0x78>
 40044c4:	91400717 	ldw	r5,28(r18)
 40044c8:	9809883a 	mov	r4,r19
 40044cc:	000d883a 	mov	r6,zero
 40044d0:	01c00044 	movi	r7,1
 40044d4:	403ee83a 	callr	r8
 40044d8:	1021883a 	mov	r16,r2
 40044dc:	00bfffc4 	movi	r2,-1
 40044e0:	80800226 	beq	r16,r2,40044ec <_fflush_r+0x1dc>
 40044e4:	92000a17 	ldw	r8,40(r18)
 40044e8:	003fa406 	br	400437c <_fflush_r+0x6c>
 40044ec:	98c00017 	ldw	r3,0(r19)
 40044f0:	00800744 	movi	r2,29
 40044f4:	18bfde26 	beq	r3,r2,4004470 <_fflush_r+0x160>
 40044f8:	9080030b 	ldhu	r2,12(r18)
 40044fc:	8007883a 	mov	r3,r16
 4004500:	10801014 	ori	r2,r2,64
 4004504:	9080030d 	sth	r2,12(r18)
 4004508:	003fcf06 	br	4004448 <_fflush_r+0x138>

0400450c <fflush>:
 400450c:	01410034 	movhi	r5,1024
 4004510:	2950c404 	addi	r5,r5,17168
 4004514:	2007883a 	mov	r3,r4
 4004518:	20000526 	beq	r4,zero,4004530 <fflush+0x24>
 400451c:	00810074 	movhi	r2,1025
 4004520:	108bf304 	addi	r2,r2,12236
 4004524:	11000017 	ldw	r4,0(r2)
 4004528:	180b883a 	mov	r5,r3
 400452c:	40043101 	jmpi	4004310 <_fflush_r>
 4004530:	00810074 	movhi	r2,1025
 4004534:	108bf404 	addi	r2,r2,12240
 4004538:	11000017 	ldw	r4,0(r2)
 400453c:	40052841 	jmpi	4005284 <_fwalk_reent>

04004540 <std>:
 4004540:	00810034 	movhi	r2,1024
 4004544:	1098b604 	addi	r2,r2,25304
 4004548:	20800b15 	stw	r2,44(r4)
 400454c:	00810034 	movhi	r2,1024
 4004550:	1098f104 	addi	r2,r2,25540
 4004554:	20800815 	stw	r2,32(r4)
 4004558:	00c10034 	movhi	r3,1024
 400455c:	18d8d204 	addi	r3,r3,25416
 4004560:	00810034 	movhi	r2,1024
 4004564:	1098b804 	addi	r2,r2,25312
 4004568:	2140030d 	sth	r5,12(r4)
 400456c:	2180038d 	sth	r6,14(r4)
 4004570:	20c00915 	stw	r3,36(r4)
 4004574:	20800a15 	stw	r2,40(r4)
 4004578:	20000015 	stw	zero,0(r4)
 400457c:	20000115 	stw	zero,4(r4)
 4004580:	20000215 	stw	zero,8(r4)
 4004584:	20000415 	stw	zero,16(r4)
 4004588:	20000515 	stw	zero,20(r4)
 400458c:	20000615 	stw	zero,24(r4)
 4004590:	21000715 	stw	r4,28(r4)
 4004594:	f800283a 	ret

04004598 <__sfp_lock_acquire>:
 4004598:	f800283a 	ret

0400459c <__sfp_lock_release>:
 400459c:	f800283a 	ret

040045a0 <__sinit_lock_acquire>:
 40045a0:	f800283a 	ret

040045a4 <__sinit_lock_release>:
 40045a4:	f800283a 	ret

040045a8 <__sinit>:
 40045a8:	20800e17 	ldw	r2,56(r4)
 40045ac:	defffd04 	addi	sp,sp,-12
 40045b0:	dc400115 	stw	r17,4(sp)
 40045b4:	dc000015 	stw	r16,0(sp)
 40045b8:	dfc00215 	stw	ra,8(sp)
 40045bc:	04400044 	movi	r17,1
 40045c0:	01400104 	movi	r5,4
 40045c4:	000d883a 	mov	r6,zero
 40045c8:	2021883a 	mov	r16,r4
 40045cc:	2200bb04 	addi	r8,r4,748
 40045d0:	200f883a 	mov	r7,r4
 40045d4:	10000526 	beq	r2,zero,40045ec <__sinit+0x44>
 40045d8:	dfc00217 	ldw	ra,8(sp)
 40045dc:	dc400117 	ldw	r17,4(sp)
 40045e0:	dc000017 	ldw	r16,0(sp)
 40045e4:	dec00304 	addi	sp,sp,12
 40045e8:	f800283a 	ret
 40045ec:	21000117 	ldw	r4,4(r4)
 40045f0:	00810034 	movhi	r2,1024
 40045f4:	1091a304 	addi	r2,r2,18060
 40045f8:	00c000c4 	movi	r3,3
 40045fc:	80800f15 	stw	r2,60(r16)
 4004600:	80c0b915 	stw	r3,740(r16)
 4004604:	8200ba15 	stw	r8,744(r16)
 4004608:	84400e15 	stw	r17,56(r16)
 400460c:	8000b815 	stw	zero,736(r16)
 4004610:	40045400 	call	4004540 <std>
 4004614:	81000217 	ldw	r4,8(r16)
 4004618:	880d883a 	mov	r6,r17
 400461c:	800f883a 	mov	r7,r16
 4004620:	01400284 	movi	r5,10
 4004624:	40045400 	call	4004540 <std>
 4004628:	81000317 	ldw	r4,12(r16)
 400462c:	800f883a 	mov	r7,r16
 4004630:	01400484 	movi	r5,18
 4004634:	01800084 	movi	r6,2
 4004638:	dfc00217 	ldw	ra,8(sp)
 400463c:	dc400117 	ldw	r17,4(sp)
 4004640:	dc000017 	ldw	r16,0(sp)
 4004644:	dec00304 	addi	sp,sp,12
 4004648:	40045401 	jmpi	4004540 <std>

0400464c <__fp_lock>:
 400464c:	0005883a 	mov	r2,zero
 4004650:	f800283a 	ret

04004654 <__fp_unlock>:
 4004654:	0005883a 	mov	r2,zero
 4004658:	f800283a 	ret

0400465c <__fp_unlock_all>:
 400465c:	00810074 	movhi	r2,1025
 4004660:	108bf304 	addi	r2,r2,12236
 4004664:	11000017 	ldw	r4,0(r2)
 4004668:	01410034 	movhi	r5,1024
 400466c:	29519504 	addi	r5,r5,18004
 4004670:	400534c1 	jmpi	400534c <_fwalk>

04004674 <__fp_lock_all>:
 4004674:	00810074 	movhi	r2,1025
 4004678:	108bf304 	addi	r2,r2,12236
 400467c:	11000017 	ldw	r4,0(r2)
 4004680:	01410034 	movhi	r5,1024
 4004684:	29519304 	addi	r5,r5,17996
 4004688:	400534c1 	jmpi	400534c <_fwalk>

0400468c <_cleanup_r>:
 400468c:	01410034 	movhi	r5,1024
 4004690:	2950bf04 	addi	r5,r5,17148
 4004694:	400534c1 	jmpi	400534c <_fwalk>

04004698 <_cleanup>:
 4004698:	00810074 	movhi	r2,1025
 400469c:	108bf404 	addi	r2,r2,12240
 40046a0:	11000017 	ldw	r4,0(r2)
 40046a4:	400468c1 	jmpi	400468c <_cleanup_r>

040046a8 <__sfmoreglue>:
 40046a8:	defffc04 	addi	sp,sp,-16
 40046ac:	dc400115 	stw	r17,4(sp)
 40046b0:	2c401724 	muli	r17,r5,92
 40046b4:	dc800215 	stw	r18,8(sp)
 40046b8:	2825883a 	mov	r18,r5
 40046bc:	89400304 	addi	r5,r17,12
 40046c0:	dc000015 	stw	r16,0(sp)
 40046c4:	dfc00315 	stw	ra,12(sp)
 40046c8:	40055980 	call	4005598 <_malloc_r>
 40046cc:	0021883a 	mov	r16,zero
 40046d0:	880d883a 	mov	r6,r17
 40046d4:	000b883a 	mov	r5,zero
 40046d8:	10000626 	beq	r2,zero,40046f4 <__sfmoreglue+0x4c>
 40046dc:	11000304 	addi	r4,r2,12
 40046e0:	14800115 	stw	r18,4(r2)
 40046e4:	10000015 	stw	zero,0(r2)
 40046e8:	11000215 	stw	r4,8(r2)
 40046ec:	1021883a 	mov	r16,r2
 40046f0:	4005d780 	call	4005d78 <memset>
 40046f4:	8005883a 	mov	r2,r16
 40046f8:	dfc00317 	ldw	ra,12(sp)
 40046fc:	dc800217 	ldw	r18,8(sp)
 4004700:	dc400117 	ldw	r17,4(sp)
 4004704:	dc000017 	ldw	r16,0(sp)
 4004708:	dec00404 	addi	sp,sp,16
 400470c:	f800283a 	ret

04004710 <__sfp>:
 4004710:	defffd04 	addi	sp,sp,-12
 4004714:	00810074 	movhi	r2,1025
 4004718:	108bf404 	addi	r2,r2,12240
 400471c:	dc000015 	stw	r16,0(sp)
 4004720:	14000017 	ldw	r16,0(r2)
 4004724:	dc400115 	stw	r17,4(sp)
 4004728:	dfc00215 	stw	ra,8(sp)
 400472c:	80800e17 	ldw	r2,56(r16)
 4004730:	2023883a 	mov	r17,r4
 4004734:	10002626 	beq	r2,zero,40047d0 <__sfp+0xc0>
 4004738:	8400b804 	addi	r16,r16,736
 400473c:	80800117 	ldw	r2,4(r16)
 4004740:	81000217 	ldw	r4,8(r16)
 4004744:	10ffffc4 	addi	r3,r2,-1
 4004748:	18000916 	blt	r3,zero,4004770 <__sfp+0x60>
 400474c:	2080030f 	ldh	r2,12(r4)
 4004750:	10000b26 	beq	r2,zero,4004780 <__sfp+0x70>
 4004754:	017fffc4 	movi	r5,-1
 4004758:	00000206 	br	4004764 <__sfp+0x54>
 400475c:	2080030f 	ldh	r2,12(r4)
 4004760:	10000726 	beq	r2,zero,4004780 <__sfp+0x70>
 4004764:	18ffffc4 	addi	r3,r3,-1
 4004768:	21001704 	addi	r4,r4,92
 400476c:	197ffb1e 	bne	r3,r5,400475c <__sfp+0x4c>
 4004770:	80800017 	ldw	r2,0(r16)
 4004774:	10001926 	beq	r2,zero,40047dc <__sfp+0xcc>
 4004778:	1021883a 	mov	r16,r2
 400477c:	003fef06 	br	400473c <__sfp+0x2c>
 4004780:	00bfffc4 	movi	r2,-1
 4004784:	00c00044 	movi	r3,1
 4004788:	2080038d 	sth	r2,14(r4)
 400478c:	20c0030d 	sth	r3,12(r4)
 4004790:	20000015 	stw	zero,0(r4)
 4004794:	20000215 	stw	zero,8(r4)
 4004798:	20000115 	stw	zero,4(r4)
 400479c:	20000415 	stw	zero,16(r4)
 40047a0:	20000515 	stw	zero,20(r4)
 40047a4:	20000615 	stw	zero,24(r4)
 40047a8:	20000c15 	stw	zero,48(r4)
 40047ac:	20000d15 	stw	zero,52(r4)
 40047b0:	20001115 	stw	zero,68(r4)
 40047b4:	20001215 	stw	zero,72(r4)
 40047b8:	2005883a 	mov	r2,r4
 40047bc:	dfc00217 	ldw	ra,8(sp)
 40047c0:	dc400117 	ldw	r17,4(sp)
 40047c4:	dc000017 	ldw	r16,0(sp)
 40047c8:	dec00304 	addi	sp,sp,12
 40047cc:	f800283a 	ret
 40047d0:	8009883a 	mov	r4,r16
 40047d4:	40045a80 	call	40045a8 <__sinit>
 40047d8:	003fd706 	br	4004738 <__sfp+0x28>
 40047dc:	8809883a 	mov	r4,r17
 40047e0:	01400104 	movi	r5,4
 40047e4:	40046a80 	call	40046a8 <__sfmoreglue>
 40047e8:	80800015 	stw	r2,0(r16)
 40047ec:	103fe21e 	bne	r2,zero,4004778 <__sfp+0x68>
 40047f0:	00800304 	movi	r2,12
 40047f4:	0009883a 	mov	r4,zero
 40047f8:	88800015 	stw	r2,0(r17)
 40047fc:	003fee06 	br	40047b8 <__sfp+0xa8>

04004800 <_fopen_r>:
 4004800:	defffa04 	addi	sp,sp,-24
 4004804:	dcc00415 	stw	r19,16(sp)
 4004808:	2827883a 	mov	r19,r5
 400480c:	300b883a 	mov	r5,r6
 4004810:	d80d883a 	mov	r6,sp
 4004814:	dc800315 	stw	r18,12(sp)
 4004818:	dc400215 	stw	r17,8(sp)
 400481c:	dc000115 	stw	r16,4(sp)
 4004820:	dfc00515 	stw	ra,20(sp)
 4004824:	2021883a 	mov	r16,r4
 4004828:	4009db00 	call	4009db0 <__sflags>
 400482c:	1025883a 	mov	r18,r2
 4004830:	8009883a 	mov	r4,r16
 4004834:	0023883a 	mov	r17,zero
 4004838:	1000081e 	bne	r2,zero,400485c <_fopen_r+0x5c>
 400483c:	8805883a 	mov	r2,r17
 4004840:	dfc00517 	ldw	ra,20(sp)
 4004844:	dcc00417 	ldw	r19,16(sp)
 4004848:	dc800317 	ldw	r18,12(sp)
 400484c:	dc400217 	ldw	r17,8(sp)
 4004850:	dc000117 	ldw	r16,4(sp)
 4004854:	dec00604 	addi	sp,sp,24
 4004858:	f800283a 	ret
 400485c:	40047100 	call	4004710 <__sfp>
 4004860:	1023883a 	mov	r17,r2
 4004864:	980b883a 	mov	r5,r19
 4004868:	8009883a 	mov	r4,r16
 400486c:	01c06d84 	movi	r7,438
 4004870:	103ff226 	beq	r2,zero,400483c <_fopen_r+0x3c>
 4004874:	d9800017 	ldw	r6,0(sp)
 4004878:	4005e100 	call	4005e10 <_open_r>
 400487c:	10001816 	blt	r2,zero,40048e0 <_fopen_r+0xe0>
 4004880:	00c10034 	movhi	r3,1024
 4004884:	18d8d204 	addi	r3,r3,25416
 4004888:	923fffcc 	andi	r8,r18,65535
 400488c:	8880038d 	sth	r2,14(r17)
 4004890:	00810034 	movhi	r2,1024
 4004894:	1098f104 	addi	r2,r2,25540
 4004898:	88800815 	stw	r2,32(r17)
 400489c:	88c00915 	stw	r3,36(r17)
 40048a0:	00810034 	movhi	r2,1024
 40048a4:	1098b804 	addi	r2,r2,25312
 40048a8:	00c10034 	movhi	r3,1024
 40048ac:	18d8b604 	addi	r3,r3,25304
 40048b0:	4200400c 	andi	r8,r8,256
 40048b4:	8c80030d 	sth	r18,12(r17)
 40048b8:	8009883a 	mov	r4,r16
 40048bc:	880b883a 	mov	r5,r17
 40048c0:	000d883a 	mov	r6,zero
 40048c4:	01c00084 	movi	r7,2
 40048c8:	88800a15 	stw	r2,40(r17)
 40048cc:	88c00b15 	stw	r3,44(r17)
 40048d0:	8c400715 	stw	r17,28(r17)
 40048d4:	403fd926 	beq	r8,zero,400483c <_fopen_r+0x3c>
 40048d8:	4004db00 	call	4004db0 <_fseek_r>
 40048dc:	003fd706 	br	400483c <_fopen_r+0x3c>
 40048e0:	40045980 	call	4004598 <__sfp_lock_acquire>
 40048e4:	8800030d 	sth	zero,12(r17)
 40048e8:	400459c0 	call	400459c <__sfp_lock_release>
 40048ec:	0023883a 	mov	r17,zero
 40048f0:	003fd206 	br	400483c <_fopen_r+0x3c>

040048f4 <fopen>:
 40048f4:	01810074 	movhi	r6,1025
 40048f8:	318bf304 	addi	r6,r6,12236
 40048fc:	2007883a 	mov	r3,r4
 4004900:	31000017 	ldw	r4,0(r6)
 4004904:	280d883a 	mov	r6,r5
 4004908:	180b883a 	mov	r5,r3
 400490c:	40048001 	jmpi	4004800 <_fopen_r>

04004910 <fprintf>:
 4004910:	defffc04 	addi	sp,sp,-16
 4004914:	dfc00115 	stw	ra,4(sp)
 4004918:	d9800215 	stw	r6,8(sp)
 400491c:	d9c00315 	stw	r7,12(sp)
 4004920:	d8800204 	addi	r2,sp,8
 4004924:	100d883a 	mov	r6,r2
 4004928:	d8800015 	stw	r2,0(sp)
 400492c:	400839c0 	call	400839c <__vfprintf_internal>
 4004930:	dfc00117 	ldw	ra,4(sp)
 4004934:	dec00404 	addi	sp,sp,16
 4004938:	f800283a 	ret

0400493c <_fprintf_r>:
 400493c:	defffd04 	addi	sp,sp,-12
 4004940:	2807883a 	mov	r3,r5
 4004944:	dfc00115 	stw	ra,4(sp)
 4004948:	d9c00215 	stw	r7,8(sp)
 400494c:	d8800204 	addi	r2,sp,8
 4004950:	300b883a 	mov	r5,r6
 4004954:	1809883a 	mov	r4,r3
 4004958:	100d883a 	mov	r6,r2
 400495c:	d8800015 	stw	r2,0(sp)
 4004960:	400839c0 	call	400839c <__vfprintf_internal>
 4004964:	dfc00117 	ldw	ra,4(sp)
 4004968:	dec00304 	addi	sp,sp,12
 400496c:	f800283a 	ret

04004970 <_malloc_trim_r>:
 4004970:	defffb04 	addi	sp,sp,-20
 4004974:	dcc00315 	stw	r19,12(sp)
 4004978:	04c10074 	movhi	r19,1025
 400497c:	9cc63a04 	addi	r19,r19,6376
 4004980:	dc800215 	stw	r18,8(sp)
 4004984:	dc400115 	stw	r17,4(sp)
 4004988:	dc000015 	stw	r16,0(sp)
 400498c:	2823883a 	mov	r17,r5
 4004990:	2025883a 	mov	r18,r4
 4004994:	dfc00415 	stw	ra,16(sp)
 4004998:	400d3b00 	call	400d3b0 <__malloc_lock>
 400499c:	98800217 	ldw	r2,8(r19)
 40049a0:	9009883a 	mov	r4,r18
 40049a4:	000b883a 	mov	r5,zero
 40049a8:	10c00117 	ldw	r3,4(r2)
 40049ac:	00bfff04 	movi	r2,-4
 40049b0:	18a0703a 	and	r16,r3,r2
 40049b4:	8463c83a 	sub	r17,r16,r17
 40049b8:	8c43fbc4 	addi	r17,r17,4079
 40049bc:	8822d33a 	srli	r17,r17,12
 40049c0:	0083ffc4 	movi	r2,4095
 40049c4:	8c7fffc4 	addi	r17,r17,-1
 40049c8:	8822933a 	slli	r17,r17,12
 40049cc:	1440060e 	bge	r2,r17,40049e8 <_malloc_trim_r+0x78>
 40049d0:	40061940 	call	4006194 <_sbrk_r>
 40049d4:	98c00217 	ldw	r3,8(r19)
 40049d8:	9009883a 	mov	r4,r18
 40049dc:	044bc83a 	sub	r5,zero,r17
 40049e0:	80c7883a 	add	r3,r16,r3
 40049e4:	10c00926 	beq	r2,r3,4004a0c <_malloc_trim_r+0x9c>
 40049e8:	400d3d00 	call	400d3d0 <__malloc_unlock>
 40049ec:	0005883a 	mov	r2,zero
 40049f0:	dfc00417 	ldw	ra,16(sp)
 40049f4:	dcc00317 	ldw	r19,12(sp)
 40049f8:	dc800217 	ldw	r18,8(sp)
 40049fc:	dc400117 	ldw	r17,4(sp)
 4004a00:	dc000017 	ldw	r16,0(sp)
 4004a04:	dec00504 	addi	sp,sp,20
 4004a08:	f800283a 	ret
 4004a0c:	9009883a 	mov	r4,r18
 4004a10:	40061940 	call	4006194 <_sbrk_r>
 4004a14:	844dc83a 	sub	r6,r16,r17
 4004a18:	00ffffc4 	movi	r3,-1
 4004a1c:	9009883a 	mov	r4,r18
 4004a20:	000b883a 	mov	r5,zero
 4004a24:	01c10074 	movhi	r7,1025
 4004a28:	39cc1504 	addi	r7,r7,12372
 4004a2c:	31800054 	ori	r6,r6,1
 4004a30:	10c00926 	beq	r2,r3,4004a58 <_malloc_trim_r+0xe8>
 4004a34:	38800017 	ldw	r2,0(r7)
 4004a38:	98c00217 	ldw	r3,8(r19)
 4004a3c:	9009883a 	mov	r4,r18
 4004a40:	1445c83a 	sub	r2,r2,r17
 4004a44:	38800015 	stw	r2,0(r7)
 4004a48:	19800115 	stw	r6,4(r3)
 4004a4c:	400d3d00 	call	400d3d0 <__malloc_unlock>
 4004a50:	00800044 	movi	r2,1
 4004a54:	003fe606 	br	40049f0 <_malloc_trim_r+0x80>
 4004a58:	40061940 	call	4006194 <_sbrk_r>
 4004a5c:	99800217 	ldw	r6,8(r19)
 4004a60:	100f883a 	mov	r7,r2
 4004a64:	9009883a 	mov	r4,r18
 4004a68:	1187c83a 	sub	r3,r2,r6
 4004a6c:	008003c4 	movi	r2,15
 4004a70:	19400054 	ori	r5,r3,1
 4004a74:	10ffdc0e 	bge	r2,r3,40049e8 <_malloc_trim_r+0x78>
 4004a78:	00810074 	movhi	r2,1025
 4004a7c:	108bf604 	addi	r2,r2,12248
 4004a80:	10c00017 	ldw	r3,0(r2)
 4004a84:	00810074 	movhi	r2,1025
 4004a88:	108c1504 	addi	r2,r2,12372
 4004a8c:	31400115 	stw	r5,4(r6)
 4004a90:	38c7c83a 	sub	r3,r7,r3
 4004a94:	10c00015 	stw	r3,0(r2)
 4004a98:	003fd306 	br	40049e8 <_malloc_trim_r+0x78>

04004a9c <_free_r>:
 4004a9c:	defffd04 	addi	sp,sp,-12
 4004aa0:	dc400115 	stw	r17,4(sp)
 4004aa4:	dc000015 	stw	r16,0(sp)
 4004aa8:	dfc00215 	stw	ra,8(sp)
 4004aac:	2821883a 	mov	r16,r5
 4004ab0:	2023883a 	mov	r17,r4
 4004ab4:	28005a26 	beq	r5,zero,4004c20 <_free_r+0x184>
 4004ab8:	400d3b00 	call	400d3b0 <__malloc_lock>
 4004abc:	823ffe04 	addi	r8,r16,-8
 4004ac0:	41400117 	ldw	r5,4(r8)
 4004ac4:	00bfff84 	movi	r2,-2
 4004ac8:	02810074 	movhi	r10,1025
 4004acc:	52863a04 	addi	r10,r10,6376
 4004ad0:	288e703a 	and	r7,r5,r2
 4004ad4:	41cd883a 	add	r6,r8,r7
 4004ad8:	30c00117 	ldw	r3,4(r6)
 4004adc:	51000217 	ldw	r4,8(r10)
 4004ae0:	00bfff04 	movi	r2,-4
 4004ae4:	1892703a 	and	r9,r3,r2
 4004ae8:	5017883a 	mov	r11,r10
 4004aec:	31006726 	beq	r6,r4,4004c8c <_free_r+0x1f0>
 4004af0:	2880004c 	andi	r2,r5,1
 4004af4:	1005003a 	cmpeq	r2,r2,zero
 4004af8:	32400115 	stw	r9,4(r6)
 4004afc:	10001a1e 	bne	r2,zero,4004b68 <_free_r+0xcc>
 4004b00:	000b883a 	mov	r5,zero
 4004b04:	3247883a 	add	r3,r6,r9
 4004b08:	18800117 	ldw	r2,4(r3)
 4004b0c:	1080004c 	andi	r2,r2,1
 4004b10:	1000231e 	bne	r2,zero,4004ba0 <_free_r+0x104>
 4004b14:	280ac03a 	cmpne	r5,r5,zero
 4004b18:	3a4f883a 	add	r7,r7,r9
 4004b1c:	2800451e 	bne	r5,zero,4004c34 <_free_r+0x198>
 4004b20:	31000217 	ldw	r4,8(r6)
 4004b24:	00810074 	movhi	r2,1025
 4004b28:	10863c04 	addi	r2,r2,6384
 4004b2c:	20807b26 	beq	r4,r2,4004d1c <_free_r+0x280>
 4004b30:	30800317 	ldw	r2,12(r6)
 4004b34:	3a07883a 	add	r3,r7,r8
 4004b38:	19c00015 	stw	r7,0(r3)
 4004b3c:	11000215 	stw	r4,8(r2)
 4004b40:	20800315 	stw	r2,12(r4)
 4004b44:	38800054 	ori	r2,r7,1
 4004b48:	40800115 	stw	r2,4(r8)
 4004b4c:	28001a26 	beq	r5,zero,4004bb8 <_free_r+0x11c>
 4004b50:	8809883a 	mov	r4,r17
 4004b54:	dfc00217 	ldw	ra,8(sp)
 4004b58:	dc400117 	ldw	r17,4(sp)
 4004b5c:	dc000017 	ldw	r16,0(sp)
 4004b60:	dec00304 	addi	sp,sp,12
 4004b64:	400d3d01 	jmpi	400d3d0 <__malloc_unlock>
 4004b68:	80bffe17 	ldw	r2,-8(r16)
 4004b6c:	50c00204 	addi	r3,r10,8
 4004b70:	4091c83a 	sub	r8,r8,r2
 4004b74:	41000217 	ldw	r4,8(r8)
 4004b78:	388f883a 	add	r7,r7,r2
 4004b7c:	20c06126 	beq	r4,r3,4004d04 <_free_r+0x268>
 4004b80:	40800317 	ldw	r2,12(r8)
 4004b84:	3247883a 	add	r3,r6,r9
 4004b88:	000b883a 	mov	r5,zero
 4004b8c:	11000215 	stw	r4,8(r2)
 4004b90:	20800315 	stw	r2,12(r4)
 4004b94:	18800117 	ldw	r2,4(r3)
 4004b98:	1080004c 	andi	r2,r2,1
 4004b9c:	103fdd26 	beq	r2,zero,4004b14 <_free_r+0x78>
 4004ba0:	38800054 	ori	r2,r7,1
 4004ba4:	3a07883a 	add	r3,r7,r8
 4004ba8:	280ac03a 	cmpne	r5,r5,zero
 4004bac:	40800115 	stw	r2,4(r8)
 4004bb0:	19c00015 	stw	r7,0(r3)
 4004bb4:	283fe61e 	bne	r5,zero,4004b50 <_free_r+0xb4>
 4004bb8:	00807fc4 	movi	r2,511
 4004bbc:	11c01f2e 	bgeu	r2,r7,4004c3c <_free_r+0x1a0>
 4004bc0:	3806d27a 	srli	r3,r7,9
 4004bc4:	1800481e 	bne	r3,zero,4004ce8 <_free_r+0x24c>
 4004bc8:	3804d0fa 	srli	r2,r7,3
 4004bcc:	100690fa 	slli	r3,r2,3
 4004bd0:	1acd883a 	add	r6,r3,r11
 4004bd4:	31400217 	ldw	r5,8(r6)
 4004bd8:	31405926 	beq	r6,r5,4004d40 <_free_r+0x2a4>
 4004bdc:	28800117 	ldw	r2,4(r5)
 4004be0:	00ffff04 	movi	r3,-4
 4004be4:	10c4703a 	and	r2,r2,r3
 4004be8:	3880022e 	bgeu	r7,r2,4004bf4 <_free_r+0x158>
 4004bec:	29400217 	ldw	r5,8(r5)
 4004bf0:	317ffa1e 	bne	r6,r5,4004bdc <_free_r+0x140>
 4004bf4:	29800317 	ldw	r6,12(r5)
 4004bf8:	41800315 	stw	r6,12(r8)
 4004bfc:	41400215 	stw	r5,8(r8)
 4004c00:	8809883a 	mov	r4,r17
 4004c04:	2a000315 	stw	r8,12(r5)
 4004c08:	32000215 	stw	r8,8(r6)
 4004c0c:	dfc00217 	ldw	ra,8(sp)
 4004c10:	dc400117 	ldw	r17,4(sp)
 4004c14:	dc000017 	ldw	r16,0(sp)
 4004c18:	dec00304 	addi	sp,sp,12
 4004c1c:	400d3d01 	jmpi	400d3d0 <__malloc_unlock>
 4004c20:	dfc00217 	ldw	ra,8(sp)
 4004c24:	dc400117 	ldw	r17,4(sp)
 4004c28:	dc000017 	ldw	r16,0(sp)
 4004c2c:	dec00304 	addi	sp,sp,12
 4004c30:	f800283a 	ret
 4004c34:	31000217 	ldw	r4,8(r6)
 4004c38:	003fbd06 	br	4004b30 <_free_r+0x94>
 4004c3c:	3806d0fa 	srli	r3,r7,3
 4004c40:	00800044 	movi	r2,1
 4004c44:	51400117 	ldw	r5,4(r10)
 4004c48:	180890fa 	slli	r4,r3,3
 4004c4c:	1807d0ba 	srai	r3,r3,2
 4004c50:	22c9883a 	add	r4,r4,r11
 4004c54:	21800217 	ldw	r6,8(r4)
 4004c58:	10c4983a 	sll	r2,r2,r3
 4004c5c:	41000315 	stw	r4,12(r8)
 4004c60:	41800215 	stw	r6,8(r8)
 4004c64:	288ab03a 	or	r5,r5,r2
 4004c68:	22000215 	stw	r8,8(r4)
 4004c6c:	8809883a 	mov	r4,r17
 4004c70:	51400115 	stw	r5,4(r10)
 4004c74:	32000315 	stw	r8,12(r6)
 4004c78:	dfc00217 	ldw	ra,8(sp)
 4004c7c:	dc400117 	ldw	r17,4(sp)
 4004c80:	dc000017 	ldw	r16,0(sp)
 4004c84:	dec00304 	addi	sp,sp,12
 4004c88:	400d3d01 	jmpi	400d3d0 <__malloc_unlock>
 4004c8c:	2880004c 	andi	r2,r5,1
 4004c90:	3a4d883a 	add	r6,r7,r9
 4004c94:	1000071e 	bne	r2,zero,4004cb4 <_free_r+0x218>
 4004c98:	80bffe17 	ldw	r2,-8(r16)
 4004c9c:	4091c83a 	sub	r8,r8,r2
 4004ca0:	41000317 	ldw	r4,12(r8)
 4004ca4:	40c00217 	ldw	r3,8(r8)
 4004ca8:	308d883a 	add	r6,r6,r2
 4004cac:	20c00215 	stw	r3,8(r4)
 4004cb0:	19000315 	stw	r4,12(r3)
 4004cb4:	00810074 	movhi	r2,1025
 4004cb8:	108bf504 	addi	r2,r2,12244
 4004cbc:	11000017 	ldw	r4,0(r2)
 4004cc0:	30c00054 	ori	r3,r6,1
 4004cc4:	52000215 	stw	r8,8(r10)
 4004cc8:	40c00115 	stw	r3,4(r8)
 4004ccc:	313fa036 	bltu	r6,r4,4004b50 <_free_r+0xb4>
 4004cd0:	00810074 	movhi	r2,1025
 4004cd4:	108c0904 	addi	r2,r2,12324
 4004cd8:	11400017 	ldw	r5,0(r2)
 4004cdc:	8809883a 	mov	r4,r17
 4004ce0:	40049700 	call	4004970 <_malloc_trim_r>
 4004ce4:	003f9a06 	br	4004b50 <_free_r+0xb4>
 4004ce8:	00800104 	movi	r2,4
 4004cec:	10c0072e 	bgeu	r2,r3,4004d0c <_free_r+0x270>
 4004cf0:	00800504 	movi	r2,20
 4004cf4:	10c01936 	bltu	r2,r3,4004d5c <_free_r+0x2c0>
 4004cf8:	188016c4 	addi	r2,r3,91
 4004cfc:	100690fa 	slli	r3,r2,3
 4004d00:	003fb306 	br	4004bd0 <_free_r+0x134>
 4004d04:	01400044 	movi	r5,1
 4004d08:	003f7e06 	br	4004b04 <_free_r+0x68>
 4004d0c:	3804d1ba 	srli	r2,r7,6
 4004d10:	10800e04 	addi	r2,r2,56
 4004d14:	100690fa 	slli	r3,r2,3
 4004d18:	003fad06 	br	4004bd0 <_free_r+0x134>
 4004d1c:	22000315 	stw	r8,12(r4)
 4004d20:	22000215 	stw	r8,8(r4)
 4004d24:	3a05883a 	add	r2,r7,r8
 4004d28:	38c00054 	ori	r3,r7,1
 4004d2c:	11c00015 	stw	r7,0(r2)
 4004d30:	41000215 	stw	r4,8(r8)
 4004d34:	40c00115 	stw	r3,4(r8)
 4004d38:	41000315 	stw	r4,12(r8)
 4004d3c:	003f8406 	br	4004b50 <_free_r+0xb4>
 4004d40:	1005d0ba 	srai	r2,r2,2
 4004d44:	00c00044 	movi	r3,1
 4004d48:	51000117 	ldw	r4,4(r10)
 4004d4c:	1886983a 	sll	r3,r3,r2
 4004d50:	20c8b03a 	or	r4,r4,r3
 4004d54:	51000115 	stw	r4,4(r10)
 4004d58:	003fa706 	br	4004bf8 <_free_r+0x15c>
 4004d5c:	00801504 	movi	r2,84
 4004d60:	10c00436 	bltu	r2,r3,4004d74 <_free_r+0x2d8>
 4004d64:	3804d33a 	srli	r2,r7,12
 4004d68:	10801b84 	addi	r2,r2,110
 4004d6c:	100690fa 	slli	r3,r2,3
 4004d70:	003f9706 	br	4004bd0 <_free_r+0x134>
 4004d74:	00805504 	movi	r2,340
 4004d78:	10c00436 	bltu	r2,r3,4004d8c <_free_r+0x2f0>
 4004d7c:	3804d3fa 	srli	r2,r7,15
 4004d80:	10801dc4 	addi	r2,r2,119
 4004d84:	100690fa 	slli	r3,r2,3
 4004d88:	003f9106 	br	4004bd0 <_free_r+0x134>
 4004d8c:	00815504 	movi	r2,1364
 4004d90:	10c0032e 	bgeu	r2,r3,4004da0 <_free_r+0x304>
 4004d94:	00801f84 	movi	r2,126
 4004d98:	00c0fc04 	movi	r3,1008
 4004d9c:	003f8c06 	br	4004bd0 <_free_r+0x134>
 4004da0:	3804d4ba 	srli	r2,r7,18
 4004da4:	10801f04 	addi	r2,r2,124
 4004da8:	100690fa 	slli	r3,r2,3
 4004dac:	003f8806 	br	4004bd0 <_free_r+0x134>

04004db0 <_fseek_r>:
 4004db0:	deffe804 	addi	sp,sp,-96
 4004db4:	dd801515 	stw	r22,84(sp)
 4004db8:	dcc01215 	stw	r19,72(sp)
 4004dbc:	dc801115 	stw	r18,68(sp)
 4004dc0:	dc000f15 	stw	r16,60(sp)
 4004dc4:	dfc01715 	stw	ra,92(sp)
 4004dc8:	ddc01615 	stw	r23,88(sp)
 4004dcc:	dd401415 	stw	r21,80(sp)
 4004dd0:	dd001315 	stw	r20,76(sp)
 4004dd4:	dc401015 	stw	r17,64(sp)
 4004dd8:	2025883a 	mov	r18,r4
 4004ddc:	2821883a 	mov	r16,r5
 4004de0:	302d883a 	mov	r22,r6
 4004de4:	3827883a 	mov	r19,r7
 4004de8:	20000226 	beq	r4,zero,4004df4 <_fseek_r+0x44>
 4004dec:	20800e17 	ldw	r2,56(r4)
 4004df0:	10007826 	beq	r2,zero,4004fd4 <_fseek_r+0x224>
 4004df4:	8080030b 	ldhu	r2,12(r16)
 4004df8:	00c04204 	movi	r3,264
 4004dfc:	1080420c 	andi	r2,r2,264
 4004e00:	10c07926 	beq	r2,r3,4004fe8 <_fseek_r+0x238>
 4004e04:	85400a17 	ldw	r21,40(r16)
 4004e08:	a800ea26 	beq	r21,zero,40051b4 <_fseek_r+0x404>
 4004e0c:	00800044 	movi	r2,1
 4004e10:	98805f26 	beq	r19,r2,4004f90 <_fseek_r+0x1e0>
 4004e14:	00800084 	movi	r2,2
 4004e18:	98801026 	beq	r19,r2,4004e5c <_fseek_r+0xac>
 4004e1c:	98000f26 	beq	r19,zero,4004e5c <_fseek_r+0xac>
 4004e20:	00800584 	movi	r2,22
 4004e24:	013fffc4 	movi	r4,-1
 4004e28:	90800015 	stw	r2,0(r18)
 4004e2c:	2005883a 	mov	r2,r4
 4004e30:	dfc01717 	ldw	ra,92(sp)
 4004e34:	ddc01617 	ldw	r23,88(sp)
 4004e38:	dd801517 	ldw	r22,84(sp)
 4004e3c:	dd401417 	ldw	r21,80(sp)
 4004e40:	dd001317 	ldw	r20,76(sp)
 4004e44:	dcc01217 	ldw	r19,72(sp)
 4004e48:	dc801117 	ldw	r18,68(sp)
 4004e4c:	dc401017 	ldw	r17,64(sp)
 4004e50:	dc000f17 	ldw	r16,60(sp)
 4004e54:	dec01804 	addi	sp,sp,96
 4004e58:	f800283a 	ret
 4004e5c:	81800417 	ldw	r6,16(r16)
 4004e60:	0023883a 	mov	r17,zero
 4004e64:	002f883a 	mov	r23,zero
 4004e68:	3000a626 	beq	r6,zero,4005104 <_fseek_r+0x354>
 4004e6c:	8100030b 	ldhu	r4,12(r16)
 4004e70:	2082068c 	andi	r2,r4,2074
 4004e74:	1000081e 	bne	r2,zero,4004e98 <_fseek_r+0xe8>
 4004e78:	2081000c 	andi	r2,r4,1024
 4004e7c:	10001b1e 	bne	r2,zero,4004eec <_fseek_r+0x13c>
 4004e80:	00810034 	movhi	r2,1024
 4004e84:	1098b804 	addi	r2,r2,25312
 4004e88:	a8800926 	beq	r21,r2,4004eb0 <_fseek_r+0x100>
 4004e8c:	8080030b 	ldhu	r2,12(r16)
 4004e90:	10820014 	ori	r2,r2,2048
 4004e94:	8080030d 	sth	r2,12(r16)
 4004e98:	9009883a 	mov	r4,r18
 4004e9c:	800b883a 	mov	r5,r16
 4004ea0:	40043100 	call	4004310 <_fflush_r>
 4004ea4:	1000a326 	beq	r2,zero,4005134 <_fseek_r+0x384>
 4004ea8:	013fffc4 	movi	r4,-1
 4004eac:	003fdf06 	br	4004e2c <_fseek_r+0x7c>
 4004eb0:	8140038f 	ldh	r5,14(r16)
 4004eb4:	283ff516 	blt	r5,zero,4004e8c <_fseek_r+0xdc>
 4004eb8:	9009883a 	mov	r4,r18
 4004ebc:	d80d883a 	mov	r6,sp
 4004ec0:	40052100 	call	4005210 <_fstat_r>
 4004ec4:	103ff11e 	bne	r2,zero,4004e8c <_fseek_r+0xdc>
 4004ec8:	d8800117 	ldw	r2,4(sp)
 4004ecc:	00e00014 	movui	r3,32768
 4004ed0:	10bc000c 	andi	r2,r2,61440
 4004ed4:	10ffed1e 	bne	r2,r3,4004e8c <_fseek_r+0xdc>
 4004ed8:	80c0030b 	ldhu	r3,12(r16)
 4004edc:	00810004 	movi	r2,1024
 4004ee0:	80801315 	stw	r2,76(r16)
 4004ee4:	1886b03a 	or	r3,r3,r2
 4004ee8:	80c0030d 	sth	r3,12(r16)
 4004eec:	9800701e 	bne	r19,zero,40050b0 <_fseek_r+0x300>
 4004ef0:	b029883a 	mov	r20,r22
 4004ef4:	b804c03a 	cmpne	r2,r23,zero
 4004ef8:	10003f1e 	bne	r2,zero,4004ff8 <_fseek_r+0x248>
 4004efc:	8100030b 	ldhu	r4,12(r16)
 4004f00:	2084000c 	andi	r2,r4,4096
 4004f04:	1000a126 	beq	r2,zero,400518c <_fseek_r+0x3dc>
 4004f08:	81801417 	ldw	r6,80(r16)
 4004f0c:	80c00117 	ldw	r3,4(r16)
 4004f10:	81400c17 	ldw	r5,48(r16)
 4004f14:	30e3c83a 	sub	r17,r6,r3
 4004f18:	28008026 	beq	r5,zero,400511c <_fseek_r+0x36c>
 4004f1c:	81c00f17 	ldw	r7,60(r16)
 4004f20:	89e3c83a 	sub	r17,r17,r7
 4004f24:	80800e17 	ldw	r2,56(r16)
 4004f28:	81800417 	ldw	r6,16(r16)
 4004f2c:	88c7883a 	add	r3,r17,r3
 4004f30:	1185c83a 	sub	r2,r2,r6
 4004f34:	11cf883a 	add	r7,r2,r7
 4004f38:	1887c83a 	sub	r3,r3,r2
 4004f3c:	2088000c 	andi	r2,r4,8192
 4004f40:	10003e1e 	bne	r2,zero,400503c <_fseek_r+0x28c>
 4004f44:	a0c03d16 	blt	r20,r3,400503c <_fseek_r+0x28c>
 4004f48:	38c5883a 	add	r2,r7,r3
 4004f4c:	a0803b2e 	bgeu	r20,r2,400503c <_fseek_r+0x28c>
 4004f50:	a0c5c83a 	sub	r2,r20,r3
 4004f54:	3887c83a 	sub	r3,r7,r2
 4004f58:	3085883a 	add	r2,r6,r2
 4004f5c:	80800015 	stw	r2,0(r16)
 4004f60:	80c00115 	stw	r3,4(r16)
 4004f64:	28000526 	beq	r5,zero,4004f7c <_fseek_r+0x1cc>
 4004f68:	80801004 	addi	r2,r16,64
 4004f6c:	28800226 	beq	r5,r2,4004f78 <_fseek_r+0x1c8>
 4004f70:	9009883a 	mov	r4,r18
 4004f74:	4004a9c0 	call	4004a9c <_free_r>
 4004f78:	80000c15 	stw	zero,48(r16)
 4004f7c:	8080030b 	ldhu	r2,12(r16)
 4004f80:	0009883a 	mov	r4,zero
 4004f84:	10bff7cc 	andi	r2,r2,65503
 4004f88:	8080030d 	sth	r2,12(r16)
 4004f8c:	003fa706 	br	4004e2c <_fseek_r+0x7c>
 4004f90:	9009883a 	mov	r4,r18
 4004f94:	800b883a 	mov	r5,r16
 4004f98:	40043100 	call	4004310 <_fflush_r>
 4004f9c:	8100030b 	ldhu	r4,12(r16)
 4004fa0:	2084000c 	andi	r2,r4,4096
 4004fa4:	10008726 	beq	r2,zero,40051c4 <_fseek_r+0x414>
 4004fa8:	84401417 	ldw	r17,80(r16)
 4004fac:	2080010c 	andi	r2,r4,4
 4004fb0:	1000171e 	bne	r2,zero,4005010 <_fseek_r+0x260>
 4004fb4:	2080020c 	andi	r2,r4,8
 4004fb8:	10003b26 	beq	r2,zero,40050a8 <_fseek_r+0x2f8>
 4004fbc:	80800017 	ldw	r2,0(r16)
 4004fc0:	10003926 	beq	r2,zero,40050a8 <_fseek_r+0x2f8>
 4004fc4:	81800417 	ldw	r6,16(r16)
 4004fc8:	1185c83a 	sub	r2,r2,r6
 4004fcc:	88a3883a 	add	r17,r17,r2
 4004fd0:	00001606 	br	400502c <_fseek_r+0x27c>
 4004fd4:	40045a80 	call	40045a8 <__sinit>
 4004fd8:	8080030b 	ldhu	r2,12(r16)
 4004fdc:	00c04204 	movi	r3,264
 4004fe0:	1080420c 	andi	r2,r2,264
 4004fe4:	10ff871e 	bne	r2,r3,4004e04 <_fseek_r+0x54>
 4004fe8:	9009883a 	mov	r4,r18
 4004fec:	800b883a 	mov	r5,r16
 4004ff0:	40043100 	call	4004310 <_fflush_r>
 4004ff4:	003f8306 	br	4004e04 <_fseek_r+0x54>
 4004ff8:	81400c17 	ldw	r5,48(r16)
 4004ffc:	28004526 	beq	r5,zero,4005114 <_fseek_r+0x364>
 4005000:	8100030b 	ldhu	r4,12(r16)
 4005004:	80c00117 	ldw	r3,4(r16)
 4005008:	81c00f17 	ldw	r7,60(r16)
 400500c:	003fc506 	br	4004f24 <_fseek_r+0x174>
 4005010:	80c00117 	ldw	r3,4(r16)
 4005014:	80800c17 	ldw	r2,48(r16)
 4005018:	88e3c83a 	sub	r17,r17,r3
 400501c:	10002226 	beq	r2,zero,40050a8 <_fseek_r+0x2f8>
 4005020:	81c00f17 	ldw	r7,60(r16)
 4005024:	81800417 	ldw	r6,16(r16)
 4005028:	89e3c83a 	sub	r17,r17,r7
 400502c:	b46d883a 	add	r22,r22,r17
 4005030:	0027883a 	mov	r19,zero
 4005034:	05c00044 	movi	r23,1
 4005038:	003f8b06 	br	4004e68 <_fseek_r+0xb8>
 400503c:	80801317 	ldw	r2,76(r16)
 4005040:	81400717 	ldw	r5,28(r16)
 4005044:	9009883a 	mov	r4,r18
 4005048:	0085c83a 	sub	r2,zero,r2
 400504c:	a0a2703a 	and	r17,r20,r2
 4005050:	880d883a 	mov	r6,r17
 4005054:	000f883a 	mov	r7,zero
 4005058:	a83ee83a 	callr	r21
 400505c:	00ffffc4 	movi	r3,-1
 4005060:	10ff8d26 	beq	r2,r3,4004e98 <_fseek_r+0xe8>
 4005064:	80800417 	ldw	r2,16(r16)
 4005068:	81400c17 	ldw	r5,48(r16)
 400506c:	80000115 	stw	zero,4(r16)
 4005070:	80800015 	stw	r2,0(r16)
 4005074:	28000526 	beq	r5,zero,400508c <_fseek_r+0x2dc>
 4005078:	80801004 	addi	r2,r16,64
 400507c:	28800226 	beq	r5,r2,4005088 <_fseek_r+0x2d8>
 4005080:	9009883a 	mov	r4,r18
 4005084:	4004a9c0 	call	4004a9c <_free_r>
 4005088:	80000c15 	stw	zero,48(r16)
 400508c:	8080030b 	ldhu	r2,12(r16)
 4005090:	a463c83a 	sub	r17,r20,r17
 4005094:	10bff7cc 	andi	r2,r2,65503
 4005098:	8080030d 	sth	r2,12(r16)
 400509c:	88000c1e 	bne	r17,zero,40050d0 <_fseek_r+0x320>
 40050a0:	0009883a 	mov	r4,zero
 40050a4:	003f6106 	br	4004e2c <_fseek_r+0x7c>
 40050a8:	81800417 	ldw	r6,16(r16)
 40050ac:	003fdf06 	br	400502c <_fseek_r+0x27c>
 40050b0:	8140038f 	ldh	r5,14(r16)
 40050b4:	9009883a 	mov	r4,r18
 40050b8:	d80d883a 	mov	r6,sp
 40050bc:	40052100 	call	4005210 <_fstat_r>
 40050c0:	103f751e 	bne	r2,zero,4004e98 <_fseek_r+0xe8>
 40050c4:	d8800417 	ldw	r2,16(sp)
 40050c8:	b0a9883a 	add	r20,r22,r2
 40050cc:	003f8906 	br	4004ef4 <_fseek_r+0x144>
 40050d0:	9009883a 	mov	r4,r18
 40050d4:	800b883a 	mov	r5,r16
 40050d8:	4005fb40 	call	4005fb4 <__srefill_r>
 40050dc:	103f6e1e 	bne	r2,zero,4004e98 <_fseek_r+0xe8>
 40050e0:	80c00117 	ldw	r3,4(r16)
 40050e4:	1c7f6c36 	bltu	r3,r17,4004e98 <_fseek_r+0xe8>
 40050e8:	80800017 	ldw	r2,0(r16)
 40050ec:	1c47c83a 	sub	r3,r3,r17
 40050f0:	0009883a 	mov	r4,zero
 40050f4:	1445883a 	add	r2,r2,r17
 40050f8:	80c00115 	stw	r3,4(r16)
 40050fc:	80800015 	stw	r2,0(r16)
 4005100:	003f4a06 	br	4004e2c <_fseek_r+0x7c>
 4005104:	9009883a 	mov	r4,r18
 4005108:	800b883a 	mov	r5,r16
 400510c:	40054040 	call	4005404 <__smakebuf_r>
 4005110:	003f5606 	br	4004e6c <_fseek_r+0xbc>
 4005114:	8100030b 	ldhu	r4,12(r16)
 4005118:	80c00117 	ldw	r3,4(r16)
 400511c:	80800017 	ldw	r2,0(r16)
 4005120:	81800417 	ldw	r6,16(r16)
 4005124:	1185c83a 	sub	r2,r2,r6
 4005128:	10cf883a 	add	r7,r2,r3
 400512c:	8887c83a 	sub	r3,r17,r2
 4005130:	003f8206 	br	4004f3c <_fseek_r+0x18c>
 4005134:	81400717 	ldw	r5,28(r16)
 4005138:	b00d883a 	mov	r6,r22
 400513c:	980f883a 	mov	r7,r19
 4005140:	9009883a 	mov	r4,r18
 4005144:	a83ee83a 	callr	r21
 4005148:	00ffffc4 	movi	r3,-1
 400514c:	10ff5626 	beq	r2,r3,4004ea8 <_fseek_r+0xf8>
 4005150:	81400c17 	ldw	r5,48(r16)
 4005154:	28000526 	beq	r5,zero,400516c <_fseek_r+0x3bc>
 4005158:	80801004 	addi	r2,r16,64
 400515c:	28800226 	beq	r5,r2,4005168 <_fseek_r+0x3b8>
 4005160:	9009883a 	mov	r4,r18
 4005164:	4004a9c0 	call	4004a9c <_free_r>
 4005168:	80000c15 	stw	zero,48(r16)
 400516c:	8080030b 	ldhu	r2,12(r16)
 4005170:	80c00417 	ldw	r3,16(r16)
 4005174:	0009883a 	mov	r4,zero
 4005178:	10bdf7cc 	andi	r2,r2,63455
 400517c:	8080030d 	sth	r2,12(r16)
 4005180:	80c00015 	stw	r3,0(r16)
 4005184:	80000115 	stw	zero,4(r16)
 4005188:	003f2806 	br	4004e2c <_fseek_r+0x7c>
 400518c:	81400717 	ldw	r5,28(r16)
 4005190:	000d883a 	mov	r6,zero
 4005194:	9009883a 	mov	r4,r18
 4005198:	01c00044 	movi	r7,1
 400519c:	a83ee83a 	callr	r21
 40051a0:	100d883a 	mov	r6,r2
 40051a4:	00bfffc4 	movi	r2,-1
 40051a8:	30bf3b26 	beq	r6,r2,4004e98 <_fseek_r+0xe8>
 40051ac:	8100030b 	ldhu	r4,12(r16)
 40051b0:	003f5606 	br	4004f0c <_fseek_r+0x15c>
 40051b4:	00800744 	movi	r2,29
 40051b8:	013fffc4 	movi	r4,-1
 40051bc:	90800015 	stw	r2,0(r18)
 40051c0:	003f1a06 	br	4004e2c <_fseek_r+0x7c>
 40051c4:	81400717 	ldw	r5,28(r16)
 40051c8:	980f883a 	mov	r7,r19
 40051cc:	9009883a 	mov	r4,r18
 40051d0:	000d883a 	mov	r6,zero
 40051d4:	a83ee83a 	callr	r21
 40051d8:	1023883a 	mov	r17,r2
 40051dc:	00bfffc4 	movi	r2,-1
 40051e0:	88bf3126 	beq	r17,r2,4004ea8 <_fseek_r+0xf8>
 40051e4:	8100030b 	ldhu	r4,12(r16)
 40051e8:	003f7006 	br	4004fac <_fseek_r+0x1fc>

040051ec <fseek>:
 40051ec:	00810074 	movhi	r2,1025
 40051f0:	108bf304 	addi	r2,r2,12236
 40051f4:	2013883a 	mov	r9,r4
 40051f8:	11000017 	ldw	r4,0(r2)
 40051fc:	2805883a 	mov	r2,r5
 4005200:	300f883a 	mov	r7,r6
 4005204:	480b883a 	mov	r5,r9
 4005208:	100d883a 	mov	r6,r2
 400520c:	4004db01 	jmpi	4004db0 <_fseek_r>

04005210 <_fstat_r>:
 4005210:	defffd04 	addi	sp,sp,-12
 4005214:	dc000015 	stw	r16,0(sp)
 4005218:	04010074 	movhi	r16,1025
 400521c:	840c0804 	addi	r16,r16,12320
 4005220:	dc400115 	stw	r17,4(sp)
 4005224:	80000015 	stw	zero,0(r16)
 4005228:	2023883a 	mov	r17,r4
 400522c:	2809883a 	mov	r4,r5
 4005230:	300b883a 	mov	r5,r6
 4005234:	dfc00215 	stw	ra,8(sp)
 4005238:	400cfa00 	call	400cfa0 <fstat>
 400523c:	1007883a 	mov	r3,r2
 4005240:	00bfffc4 	movi	r2,-1
 4005244:	18800626 	beq	r3,r2,4005260 <_fstat_r+0x50>
 4005248:	1805883a 	mov	r2,r3
 400524c:	dfc00217 	ldw	ra,8(sp)
 4005250:	dc400117 	ldw	r17,4(sp)
 4005254:	dc000017 	ldw	r16,0(sp)
 4005258:	dec00304 	addi	sp,sp,12
 400525c:	f800283a 	ret
 4005260:	80800017 	ldw	r2,0(r16)
 4005264:	103ff826 	beq	r2,zero,4005248 <_fstat_r+0x38>
 4005268:	88800015 	stw	r2,0(r17)
 400526c:	1805883a 	mov	r2,r3
 4005270:	dfc00217 	ldw	ra,8(sp)
 4005274:	dc400117 	ldw	r17,4(sp)
 4005278:	dc000017 	ldw	r16,0(sp)
 400527c:	dec00304 	addi	sp,sp,12
 4005280:	f800283a 	ret

04005284 <_fwalk_reent>:
 4005284:	defff704 	addi	sp,sp,-36
 4005288:	dcc00315 	stw	r19,12(sp)
 400528c:	24c0b804 	addi	r19,r4,736
 4005290:	dd800615 	stw	r22,24(sp)
 4005294:	dd400515 	stw	r21,20(sp)
 4005298:	dfc00815 	stw	ra,32(sp)
 400529c:	ddc00715 	stw	r23,28(sp)
 40052a0:	dd000415 	stw	r20,16(sp)
 40052a4:	dc800215 	stw	r18,8(sp)
 40052a8:	dc400115 	stw	r17,4(sp)
 40052ac:	dc000015 	stw	r16,0(sp)
 40052b0:	202b883a 	mov	r21,r4
 40052b4:	282d883a 	mov	r22,r5
 40052b8:	40045980 	call	4004598 <__sfp_lock_acquire>
 40052bc:	98002126 	beq	r19,zero,4005344 <_fwalk_reent+0xc0>
 40052c0:	002f883a 	mov	r23,zero
 40052c4:	9c800117 	ldw	r18,4(r19)
 40052c8:	9c000217 	ldw	r16,8(r19)
 40052cc:	90bfffc4 	addi	r2,r18,-1
 40052d0:	10000d16 	blt	r2,zero,4005308 <_fwalk_reent+0x84>
 40052d4:	0023883a 	mov	r17,zero
 40052d8:	053fffc4 	movi	r20,-1
 40052dc:	8080030f 	ldh	r2,12(r16)
 40052e0:	8c400044 	addi	r17,r17,1
 40052e4:	10000626 	beq	r2,zero,4005300 <_fwalk_reent+0x7c>
 40052e8:	8080038f 	ldh	r2,14(r16)
 40052ec:	800b883a 	mov	r5,r16
 40052f0:	a809883a 	mov	r4,r21
 40052f4:	15000226 	beq	r2,r20,4005300 <_fwalk_reent+0x7c>
 40052f8:	b03ee83a 	callr	r22
 40052fc:	b8aeb03a 	or	r23,r23,r2
 4005300:	84001704 	addi	r16,r16,92
 4005304:	947ff51e 	bne	r18,r17,40052dc <_fwalk_reent+0x58>
 4005308:	9cc00017 	ldw	r19,0(r19)
 400530c:	983fed1e 	bne	r19,zero,40052c4 <_fwalk_reent+0x40>
 4005310:	400459c0 	call	400459c <__sfp_lock_release>
 4005314:	b805883a 	mov	r2,r23
 4005318:	dfc00817 	ldw	ra,32(sp)
 400531c:	ddc00717 	ldw	r23,28(sp)
 4005320:	dd800617 	ldw	r22,24(sp)
 4005324:	dd400517 	ldw	r21,20(sp)
 4005328:	dd000417 	ldw	r20,16(sp)
 400532c:	dcc00317 	ldw	r19,12(sp)
 4005330:	dc800217 	ldw	r18,8(sp)
 4005334:	dc400117 	ldw	r17,4(sp)
 4005338:	dc000017 	ldw	r16,0(sp)
 400533c:	dec00904 	addi	sp,sp,36
 4005340:	f800283a 	ret
 4005344:	002f883a 	mov	r23,zero
 4005348:	003ff106 	br	4005310 <_fwalk_reent+0x8c>

0400534c <_fwalk>:
 400534c:	defff804 	addi	sp,sp,-32
 4005350:	dcc00315 	stw	r19,12(sp)
 4005354:	24c0b804 	addi	r19,r4,736
 4005358:	dd400515 	stw	r21,20(sp)
 400535c:	dfc00715 	stw	ra,28(sp)
 4005360:	dd800615 	stw	r22,24(sp)
 4005364:	dd000415 	stw	r20,16(sp)
 4005368:	dc800215 	stw	r18,8(sp)
 400536c:	dc400115 	stw	r17,4(sp)
 4005370:	dc000015 	stw	r16,0(sp)
 4005374:	282b883a 	mov	r21,r5
 4005378:	40045980 	call	4004598 <__sfp_lock_acquire>
 400537c:	98001f26 	beq	r19,zero,40053fc <_fwalk+0xb0>
 4005380:	002d883a 	mov	r22,zero
 4005384:	9c800117 	ldw	r18,4(r19)
 4005388:	9c000217 	ldw	r16,8(r19)
 400538c:	90bfffc4 	addi	r2,r18,-1
 4005390:	10000c16 	blt	r2,zero,40053c4 <_fwalk+0x78>
 4005394:	0023883a 	mov	r17,zero
 4005398:	053fffc4 	movi	r20,-1
 400539c:	8080030f 	ldh	r2,12(r16)
 40053a0:	8c400044 	addi	r17,r17,1
 40053a4:	10000526 	beq	r2,zero,40053bc <_fwalk+0x70>
 40053a8:	8080038f 	ldh	r2,14(r16)
 40053ac:	8009883a 	mov	r4,r16
 40053b0:	15000226 	beq	r2,r20,40053bc <_fwalk+0x70>
 40053b4:	a83ee83a 	callr	r21
 40053b8:	b0acb03a 	or	r22,r22,r2
 40053bc:	84001704 	addi	r16,r16,92
 40053c0:	947ff61e 	bne	r18,r17,400539c <_fwalk+0x50>
 40053c4:	9cc00017 	ldw	r19,0(r19)
 40053c8:	983fee1e 	bne	r19,zero,4005384 <_fwalk+0x38>
 40053cc:	400459c0 	call	400459c <__sfp_lock_release>
 40053d0:	b005883a 	mov	r2,r22
 40053d4:	dfc00717 	ldw	ra,28(sp)
 40053d8:	dd800617 	ldw	r22,24(sp)
 40053dc:	dd400517 	ldw	r21,20(sp)
 40053e0:	dd000417 	ldw	r20,16(sp)
 40053e4:	dcc00317 	ldw	r19,12(sp)
 40053e8:	dc800217 	ldw	r18,8(sp)
 40053ec:	dc400117 	ldw	r17,4(sp)
 40053f0:	dc000017 	ldw	r16,0(sp)
 40053f4:	dec00804 	addi	sp,sp,32
 40053f8:	f800283a 	ret
 40053fc:	002d883a 	mov	r22,zero
 4005400:	003ff206 	br	40053cc <_fwalk+0x80>

04005404 <__smakebuf_r>:
 4005404:	2880030b 	ldhu	r2,12(r5)
 4005408:	deffed04 	addi	sp,sp,-76
 400540c:	dc401015 	stw	r17,64(sp)
 4005410:	1080008c 	andi	r2,r2,2
 4005414:	dc000f15 	stw	r16,60(sp)
 4005418:	dfc01215 	stw	ra,72(sp)
 400541c:	dc801115 	stw	r18,68(sp)
 4005420:	2821883a 	mov	r16,r5
 4005424:	2023883a 	mov	r17,r4
 4005428:	10000b26 	beq	r2,zero,4005458 <__smakebuf_r+0x54>
 400542c:	28c010c4 	addi	r3,r5,67
 4005430:	00800044 	movi	r2,1
 4005434:	28800515 	stw	r2,20(r5)
 4005438:	28c00415 	stw	r3,16(r5)
 400543c:	28c00015 	stw	r3,0(r5)
 4005440:	dfc01217 	ldw	ra,72(sp)
 4005444:	dc801117 	ldw	r18,68(sp)
 4005448:	dc401017 	ldw	r17,64(sp)
 400544c:	dc000f17 	ldw	r16,60(sp)
 4005450:	dec01304 	addi	sp,sp,76
 4005454:	f800283a 	ret
 4005458:	2940038f 	ldh	r5,14(r5)
 400545c:	28002116 	blt	r5,zero,40054e4 <__smakebuf_r+0xe0>
 4005460:	d80d883a 	mov	r6,sp
 4005464:	40052100 	call	4005210 <_fstat_r>
 4005468:	10001e16 	blt	r2,zero,40054e4 <__smakebuf_r+0xe0>
 400546c:	d8800117 	ldw	r2,4(sp)
 4005470:	00e00014 	movui	r3,32768
 4005474:	113c000c 	andi	r4,r2,61440
 4005478:	20c03126 	beq	r4,r3,4005540 <__smakebuf_r+0x13c>
 400547c:	8080030b 	ldhu	r2,12(r16)
 4005480:	00c80004 	movi	r3,8192
 4005484:	10820014 	ori	r2,r2,2048
 4005488:	8080030d 	sth	r2,12(r16)
 400548c:	20c01e26 	beq	r4,r3,4005508 <__smakebuf_r+0x104>
 4005490:	04810004 	movi	r18,1024
 4005494:	8809883a 	mov	r4,r17
 4005498:	900b883a 	mov	r5,r18
 400549c:	40055980 	call	4005598 <_malloc_r>
 40054a0:	1009883a 	mov	r4,r2
 40054a4:	10003126 	beq	r2,zero,400556c <__smakebuf_r+0x168>
 40054a8:	80c0030b 	ldhu	r3,12(r16)
 40054ac:	00810034 	movhi	r2,1024
 40054b0:	1091a304 	addi	r2,r2,18060
 40054b4:	88800f15 	stw	r2,60(r17)
 40054b8:	18c02014 	ori	r3,r3,128
 40054bc:	84800515 	stw	r18,20(r16)
 40054c0:	80c0030d 	sth	r3,12(r16)
 40054c4:	81000415 	stw	r4,16(r16)
 40054c8:	81000015 	stw	r4,0(r16)
 40054cc:	dfc01217 	ldw	ra,72(sp)
 40054d0:	dc801117 	ldw	r18,68(sp)
 40054d4:	dc401017 	ldw	r17,64(sp)
 40054d8:	dc000f17 	ldw	r16,60(sp)
 40054dc:	dec01304 	addi	sp,sp,76
 40054e0:	f800283a 	ret
 40054e4:	80c0030b 	ldhu	r3,12(r16)
 40054e8:	1880200c 	andi	r2,r3,128
 40054ec:	10000426 	beq	r2,zero,4005500 <__smakebuf_r+0xfc>
 40054f0:	04801004 	movi	r18,64
 40054f4:	18820014 	ori	r2,r3,2048
 40054f8:	8080030d 	sth	r2,12(r16)
 40054fc:	003fe506 	br	4005494 <__smakebuf_r+0x90>
 4005500:	04810004 	movi	r18,1024
 4005504:	003ffb06 	br	40054f4 <__smakebuf_r+0xf0>
 4005508:	8140038f 	ldh	r5,14(r16)
 400550c:	8809883a 	mov	r4,r17
 4005510:	400a2ec0 	call	400a2ec <_isatty_r>
 4005514:	103fde26 	beq	r2,zero,4005490 <__smakebuf_r+0x8c>
 4005518:	8080030b 	ldhu	r2,12(r16)
 400551c:	80c010c4 	addi	r3,r16,67
 4005520:	04810004 	movi	r18,1024
 4005524:	10800054 	ori	r2,r2,1
 4005528:	8080030d 	sth	r2,12(r16)
 400552c:	00800044 	movi	r2,1
 4005530:	80c00415 	stw	r3,16(r16)
 4005534:	80800515 	stw	r2,20(r16)
 4005538:	80c00015 	stw	r3,0(r16)
 400553c:	003fd506 	br	4005494 <__smakebuf_r+0x90>
 4005540:	80c00a17 	ldw	r3,40(r16)
 4005544:	00810034 	movhi	r2,1024
 4005548:	1098b804 	addi	r2,r2,25312
 400554c:	18bfcb1e 	bne	r3,r2,400547c <__smakebuf_r+0x78>
 4005550:	8080030b 	ldhu	r2,12(r16)
 4005554:	00c10004 	movi	r3,1024
 4005558:	1825883a 	mov	r18,r3
 400555c:	10c4b03a 	or	r2,r2,r3
 4005560:	8080030d 	sth	r2,12(r16)
 4005564:	80c01315 	stw	r3,76(r16)
 4005568:	003fca06 	br	4005494 <__smakebuf_r+0x90>
 400556c:	8100030b 	ldhu	r4,12(r16)
 4005570:	2080800c 	andi	r2,r4,512
 4005574:	103fb21e 	bne	r2,zero,4005440 <__smakebuf_r+0x3c>
 4005578:	80c010c4 	addi	r3,r16,67
 400557c:	21000094 	ori	r4,r4,2
 4005580:	00800044 	movi	r2,1
 4005584:	80800515 	stw	r2,20(r16)
 4005588:	8100030d 	sth	r4,12(r16)
 400558c:	80c00415 	stw	r3,16(r16)
 4005590:	80c00015 	stw	r3,0(r16)
 4005594:	003faa06 	br	4005440 <__smakebuf_r+0x3c>

04005598 <_malloc_r>:
 4005598:	defff604 	addi	sp,sp,-40
 400559c:	28c002c4 	addi	r3,r5,11
 40055a0:	00800584 	movi	r2,22
 40055a4:	dc800215 	stw	r18,8(sp)
 40055a8:	dfc00915 	stw	ra,36(sp)
 40055ac:	df000815 	stw	fp,32(sp)
 40055b0:	ddc00715 	stw	r23,28(sp)
 40055b4:	dd800615 	stw	r22,24(sp)
 40055b8:	dd400515 	stw	r21,20(sp)
 40055bc:	dd000415 	stw	r20,16(sp)
 40055c0:	dcc00315 	stw	r19,12(sp)
 40055c4:	dc400115 	stw	r17,4(sp)
 40055c8:	dc000015 	stw	r16,0(sp)
 40055cc:	2025883a 	mov	r18,r4
 40055d0:	10c01236 	bltu	r2,r3,400561c <_malloc_r+0x84>
 40055d4:	04400404 	movi	r17,16
 40055d8:	8940142e 	bgeu	r17,r5,400562c <_malloc_r+0x94>
 40055dc:	00800304 	movi	r2,12
 40055e0:	0007883a 	mov	r3,zero
 40055e4:	90800015 	stw	r2,0(r18)
 40055e8:	1805883a 	mov	r2,r3
 40055ec:	dfc00917 	ldw	ra,36(sp)
 40055f0:	df000817 	ldw	fp,32(sp)
 40055f4:	ddc00717 	ldw	r23,28(sp)
 40055f8:	dd800617 	ldw	r22,24(sp)
 40055fc:	dd400517 	ldw	r21,20(sp)
 4005600:	dd000417 	ldw	r20,16(sp)
 4005604:	dcc00317 	ldw	r19,12(sp)
 4005608:	dc800217 	ldw	r18,8(sp)
 400560c:	dc400117 	ldw	r17,4(sp)
 4005610:	dc000017 	ldw	r16,0(sp)
 4005614:	dec00a04 	addi	sp,sp,40
 4005618:	f800283a 	ret
 400561c:	00bffe04 	movi	r2,-8
 4005620:	18a2703a 	and	r17,r3,r2
 4005624:	883fed16 	blt	r17,zero,40055dc <_malloc_r+0x44>
 4005628:	897fec36 	bltu	r17,r5,40055dc <_malloc_r+0x44>
 400562c:	9009883a 	mov	r4,r18
 4005630:	400d3b00 	call	400d3b0 <__malloc_lock>
 4005634:	00807dc4 	movi	r2,503
 4005638:	14402b2e 	bgeu	r2,r17,40056e8 <_malloc_r+0x150>
 400563c:	8806d27a 	srli	r3,r17,9
 4005640:	18003f1e 	bne	r3,zero,4005740 <_malloc_r+0x1a8>
 4005644:	880cd0fa 	srli	r6,r17,3
 4005648:	300490fa 	slli	r2,r6,3
 400564c:	02c10074 	movhi	r11,1025
 4005650:	5ac63a04 	addi	r11,r11,6376
 4005654:	12cb883a 	add	r5,r2,r11
 4005658:	2c000317 	ldw	r16,12(r5)
 400565c:	580f883a 	mov	r7,r11
 4005660:	2c00041e 	bne	r5,r16,4005674 <_malloc_r+0xdc>
 4005664:	00000a06 	br	4005690 <_malloc_r+0xf8>
 4005668:	1800860e 	bge	r3,zero,4005884 <_malloc_r+0x2ec>
 400566c:	84000317 	ldw	r16,12(r16)
 4005670:	2c000726 	beq	r5,r16,4005690 <_malloc_r+0xf8>
 4005674:	80800117 	ldw	r2,4(r16)
 4005678:	00ffff04 	movi	r3,-4
 400567c:	10c8703a 	and	r4,r2,r3
 4005680:	2447c83a 	sub	r3,r4,r17
 4005684:	008003c4 	movi	r2,15
 4005688:	10fff70e 	bge	r2,r3,4005668 <_malloc_r+0xd0>
 400568c:	31bfffc4 	addi	r6,r6,-1
 4005690:	32400044 	addi	r9,r6,1
 4005694:	02810074 	movhi	r10,1025
 4005698:	52863c04 	addi	r10,r10,6384
 400569c:	54000217 	ldw	r16,8(r10)
 40056a0:	8280a026 	beq	r16,r10,4005924 <_malloc_r+0x38c>
 40056a4:	80800117 	ldw	r2,4(r16)
 40056a8:	00ffff04 	movi	r3,-4
 40056ac:	10ca703a 	and	r5,r2,r3
 40056b0:	2c4dc83a 	sub	r6,r5,r17
 40056b4:	008003c4 	movi	r2,15
 40056b8:	11808316 	blt	r2,r6,40058c8 <_malloc_r+0x330>
 40056bc:	52800315 	stw	r10,12(r10)
 40056c0:	52800215 	stw	r10,8(r10)
 40056c4:	30002916 	blt	r6,zero,400576c <_malloc_r+0x1d4>
 40056c8:	8147883a 	add	r3,r16,r5
 40056cc:	18800117 	ldw	r2,4(r3)
 40056d0:	9009883a 	mov	r4,r18
 40056d4:	10800054 	ori	r2,r2,1
 40056d8:	18800115 	stw	r2,4(r3)
 40056dc:	400d3d00 	call	400d3d0 <__malloc_unlock>
 40056e0:	80c00204 	addi	r3,r16,8
 40056e4:	003fc006 	br	40055e8 <_malloc_r+0x50>
 40056e8:	02c10074 	movhi	r11,1025
 40056ec:	5ac63a04 	addi	r11,r11,6376
 40056f0:	8ac5883a 	add	r2,r17,r11
 40056f4:	14000317 	ldw	r16,12(r2)
 40056f8:	580f883a 	mov	r7,r11
 40056fc:	8806d0fa 	srli	r3,r17,3
 4005700:	14006c26 	beq	r2,r16,40058b4 <_malloc_r+0x31c>
 4005704:	80c00117 	ldw	r3,4(r16)
 4005708:	00bfff04 	movi	r2,-4
 400570c:	81800317 	ldw	r6,12(r16)
 4005710:	1886703a 	and	r3,r3,r2
 4005714:	80c7883a 	add	r3,r16,r3
 4005718:	18800117 	ldw	r2,4(r3)
 400571c:	81400217 	ldw	r5,8(r16)
 4005720:	9009883a 	mov	r4,r18
 4005724:	10800054 	ori	r2,r2,1
 4005728:	18800115 	stw	r2,4(r3)
 400572c:	31400215 	stw	r5,8(r6)
 4005730:	29800315 	stw	r6,12(r5)
 4005734:	400d3d00 	call	400d3d0 <__malloc_unlock>
 4005738:	80c00204 	addi	r3,r16,8
 400573c:	003faa06 	br	40055e8 <_malloc_r+0x50>
 4005740:	00800104 	movi	r2,4
 4005744:	10c0052e 	bgeu	r2,r3,400575c <_malloc_r+0x1c4>
 4005748:	00800504 	movi	r2,20
 400574c:	10c07836 	bltu	r2,r3,4005930 <_malloc_r+0x398>
 4005750:	198016c4 	addi	r6,r3,91
 4005754:	300490fa 	slli	r2,r6,3
 4005758:	003fbc06 	br	400564c <_malloc_r+0xb4>
 400575c:	8804d1ba 	srli	r2,r17,6
 4005760:	11800e04 	addi	r6,r2,56
 4005764:	300490fa 	slli	r2,r6,3
 4005768:	003fb806 	br	400564c <_malloc_r+0xb4>
 400576c:	00807fc4 	movi	r2,511
 4005770:	1140bb36 	bltu	r2,r5,4005a60 <_malloc_r+0x4c8>
 4005774:	2806d0fa 	srli	r3,r5,3
 4005778:	573ffe04 	addi	fp,r10,-8
 400577c:	00800044 	movi	r2,1
 4005780:	180890fa 	slli	r4,r3,3
 4005784:	1807d0ba 	srai	r3,r3,2
 4005788:	e1c00117 	ldw	r7,4(fp)
 400578c:	5909883a 	add	r4,r11,r4
 4005790:	21400217 	ldw	r5,8(r4)
 4005794:	10c4983a 	sll	r2,r2,r3
 4005798:	81000315 	stw	r4,12(r16)
 400579c:	81400215 	stw	r5,8(r16)
 40057a0:	388eb03a 	or	r7,r7,r2
 40057a4:	2c000315 	stw	r16,12(r5)
 40057a8:	24000215 	stw	r16,8(r4)
 40057ac:	e1c00115 	stw	r7,4(fp)
 40057b0:	4807883a 	mov	r3,r9
 40057b4:	4800cd16 	blt	r9,zero,4005aec <_malloc_r+0x554>
 40057b8:	1807d0ba 	srai	r3,r3,2
 40057bc:	00800044 	movi	r2,1
 40057c0:	10c8983a 	sll	r4,r2,r3
 40057c4:	39004436 	bltu	r7,r4,40058d8 <_malloc_r+0x340>
 40057c8:	21c4703a 	and	r2,r4,r7
 40057cc:	10000a1e 	bne	r2,zero,40057f8 <_malloc_r+0x260>
 40057d0:	2109883a 	add	r4,r4,r4
 40057d4:	00bfff04 	movi	r2,-4
 40057d8:	4884703a 	and	r2,r9,r2
 40057dc:	3906703a 	and	r3,r7,r4
 40057e0:	12400104 	addi	r9,r2,4
 40057e4:	1800041e 	bne	r3,zero,40057f8 <_malloc_r+0x260>
 40057e8:	2109883a 	add	r4,r4,r4
 40057ec:	3904703a 	and	r2,r7,r4
 40057f0:	4a400104 	addi	r9,r9,4
 40057f4:	103ffc26 	beq	r2,zero,40057e8 <_malloc_r+0x250>
 40057f8:	480490fa 	slli	r2,r9,3
 40057fc:	4819883a 	mov	r12,r9
 4005800:	023fff04 	movi	r8,-4
 4005804:	589b883a 	add	r13,r11,r2
 4005808:	6807883a 	mov	r3,r13
 400580c:	014003c4 	movi	r5,15
 4005810:	1c000317 	ldw	r16,12(r3)
 4005814:	1c00041e 	bne	r3,r16,4005828 <_malloc_r+0x290>
 4005818:	0000a706 	br	4005ab8 <_malloc_r+0x520>
 400581c:	3000ab0e 	bge	r6,zero,4005acc <_malloc_r+0x534>
 4005820:	84000317 	ldw	r16,12(r16)
 4005824:	1c00a426 	beq	r3,r16,4005ab8 <_malloc_r+0x520>
 4005828:	80800117 	ldw	r2,4(r16)
 400582c:	1204703a 	and	r2,r2,r8
 4005830:	144dc83a 	sub	r6,r2,r17
 4005834:	29bff90e 	bge	r5,r6,400581c <_malloc_r+0x284>
 4005838:	81000317 	ldw	r4,12(r16)
 400583c:	80c00217 	ldw	r3,8(r16)
 4005840:	89400054 	ori	r5,r17,1
 4005844:	8445883a 	add	r2,r16,r17
 4005848:	20c00215 	stw	r3,8(r4)
 400584c:	19000315 	stw	r4,12(r3)
 4005850:	81400115 	stw	r5,4(r16)
 4005854:	1187883a 	add	r3,r2,r6
 4005858:	31000054 	ori	r4,r6,1
 400585c:	50800315 	stw	r2,12(r10)
 4005860:	50800215 	stw	r2,8(r10)
 4005864:	19800015 	stw	r6,0(r3)
 4005868:	11000115 	stw	r4,4(r2)
 400586c:	12800215 	stw	r10,8(r2)
 4005870:	12800315 	stw	r10,12(r2)
 4005874:	9009883a 	mov	r4,r18
 4005878:	400d3d00 	call	400d3d0 <__malloc_unlock>
 400587c:	80c00204 	addi	r3,r16,8
 4005880:	003f5906 	br	40055e8 <_malloc_r+0x50>
 4005884:	8109883a 	add	r4,r16,r4
 4005888:	20800117 	ldw	r2,4(r4)
 400588c:	80c00217 	ldw	r3,8(r16)
 4005890:	81400317 	ldw	r5,12(r16)
 4005894:	10800054 	ori	r2,r2,1
 4005898:	20800115 	stw	r2,4(r4)
 400589c:	28c00215 	stw	r3,8(r5)
 40058a0:	19400315 	stw	r5,12(r3)
 40058a4:	9009883a 	mov	r4,r18
 40058a8:	400d3d00 	call	400d3d0 <__malloc_unlock>
 40058ac:	80c00204 	addi	r3,r16,8
 40058b0:	003f4d06 	br	40055e8 <_malloc_r+0x50>
 40058b4:	80800204 	addi	r2,r16,8
 40058b8:	14000317 	ldw	r16,12(r2)
 40058bc:	143f911e 	bne	r2,r16,4005704 <_malloc_r+0x16c>
 40058c0:	1a400084 	addi	r9,r3,2
 40058c4:	003f7306 	br	4005694 <_malloc_r+0xfc>
 40058c8:	88c00054 	ori	r3,r17,1
 40058cc:	8445883a 	add	r2,r16,r17
 40058d0:	80c00115 	stw	r3,4(r16)
 40058d4:	003fdf06 	br	4005854 <_malloc_r+0x2bc>
 40058d8:	e4000217 	ldw	r16,8(fp)
 40058dc:	00bfff04 	movi	r2,-4
 40058e0:	80c00117 	ldw	r3,4(r16)
 40058e4:	802d883a 	mov	r22,r16
 40058e8:	18aa703a 	and	r21,r3,r2
 40058ec:	ac401636 	bltu	r21,r17,4005948 <_malloc_r+0x3b0>
 40058f0:	ac49c83a 	sub	r4,r21,r17
 40058f4:	008003c4 	movi	r2,15
 40058f8:	1100130e 	bge	r2,r4,4005948 <_malloc_r+0x3b0>
 40058fc:	88800054 	ori	r2,r17,1
 4005900:	8447883a 	add	r3,r16,r17
 4005904:	80800115 	stw	r2,4(r16)
 4005908:	20800054 	ori	r2,r4,1
 400590c:	18800115 	stw	r2,4(r3)
 4005910:	e0c00215 	stw	r3,8(fp)
 4005914:	9009883a 	mov	r4,r18
 4005918:	400d3d00 	call	400d3d0 <__malloc_unlock>
 400591c:	80c00204 	addi	r3,r16,8
 4005920:	003f3106 	br	40055e8 <_malloc_r+0x50>
 4005924:	39c00117 	ldw	r7,4(r7)
 4005928:	573ffe04 	addi	fp,r10,-8
 400592c:	003fa006 	br	40057b0 <_malloc_r+0x218>
 4005930:	00801504 	movi	r2,84
 4005934:	10c06736 	bltu	r2,r3,4005ad4 <_malloc_r+0x53c>
 4005938:	8804d33a 	srli	r2,r17,12
 400593c:	11801b84 	addi	r6,r2,110
 4005940:	300490fa 	slli	r2,r6,3
 4005944:	003f4106 	br	400564c <_malloc_r+0xb4>
 4005948:	d0a01617 	ldw	r2,-32680(gp)
 400594c:	d0e00317 	ldw	r3,-32756(gp)
 4005950:	053fffc4 	movi	r20,-1
 4005954:	10800404 	addi	r2,r2,16
 4005958:	88a7883a 	add	r19,r17,r2
 400595c:	1d000326 	beq	r3,r20,400596c <_malloc_r+0x3d4>
 4005960:	98c3ffc4 	addi	r3,r19,4095
 4005964:	00bc0004 	movi	r2,-4096
 4005968:	18a6703a 	and	r19,r3,r2
 400596c:	9009883a 	mov	r4,r18
 4005970:	980b883a 	mov	r5,r19
 4005974:	40061940 	call	4006194 <_sbrk_r>
 4005978:	1009883a 	mov	r4,r2
 400597c:	15000426 	beq	r2,r20,4005990 <_malloc_r+0x3f8>
 4005980:	854b883a 	add	r5,r16,r21
 4005984:	1029883a 	mov	r20,r2
 4005988:	11405a2e 	bgeu	r2,r5,4005af4 <_malloc_r+0x55c>
 400598c:	87000c26 	beq	r16,fp,40059c0 <_malloc_r+0x428>
 4005990:	e4000217 	ldw	r16,8(fp)
 4005994:	80c00117 	ldw	r3,4(r16)
 4005998:	00bfff04 	movi	r2,-4
 400599c:	1884703a 	and	r2,r3,r2
 40059a0:	14400336 	bltu	r2,r17,40059b0 <_malloc_r+0x418>
 40059a4:	1449c83a 	sub	r4,r2,r17
 40059a8:	008003c4 	movi	r2,15
 40059ac:	113fd316 	blt	r2,r4,40058fc <_malloc_r+0x364>
 40059b0:	9009883a 	mov	r4,r18
 40059b4:	400d3d00 	call	400d3d0 <__malloc_unlock>
 40059b8:	0007883a 	mov	r3,zero
 40059bc:	003f0a06 	br	40055e8 <_malloc_r+0x50>
 40059c0:	05c10074 	movhi	r23,1025
 40059c4:	bdcc1504 	addi	r23,r23,12372
 40059c8:	b8800017 	ldw	r2,0(r23)
 40059cc:	988d883a 	add	r6,r19,r2
 40059d0:	b9800015 	stw	r6,0(r23)
 40059d4:	d0e00317 	ldw	r3,-32756(gp)
 40059d8:	00bfffc4 	movi	r2,-1
 40059dc:	18808e26 	beq	r3,r2,4005c18 <_malloc_r+0x680>
 40059e0:	2145c83a 	sub	r2,r4,r5
 40059e4:	3085883a 	add	r2,r6,r2
 40059e8:	b8800015 	stw	r2,0(r23)
 40059ec:	20c001cc 	andi	r3,r4,7
 40059f0:	18005f1e 	bne	r3,zero,4005b70 <_malloc_r+0x5d8>
 40059f4:	000b883a 	mov	r5,zero
 40059f8:	a4c5883a 	add	r2,r20,r19
 40059fc:	1083ffcc 	andi	r2,r2,4095
 4005a00:	00c40004 	movi	r3,4096
 4005a04:	1887c83a 	sub	r3,r3,r2
 4005a08:	28e7883a 	add	r19,r5,r3
 4005a0c:	9009883a 	mov	r4,r18
 4005a10:	980b883a 	mov	r5,r19
 4005a14:	40061940 	call	4006194 <_sbrk_r>
 4005a18:	1007883a 	mov	r3,r2
 4005a1c:	00bfffc4 	movi	r2,-1
 4005a20:	18807a26 	beq	r3,r2,4005c0c <_malloc_r+0x674>
 4005a24:	1d05c83a 	sub	r2,r3,r20
 4005a28:	9885883a 	add	r2,r19,r2
 4005a2c:	10c00054 	ori	r3,r2,1
 4005a30:	b8800017 	ldw	r2,0(r23)
 4005a34:	a021883a 	mov	r16,r20
 4005a38:	a0c00115 	stw	r3,4(r20)
 4005a3c:	9885883a 	add	r2,r19,r2
 4005a40:	b8800015 	stw	r2,0(r23)
 4005a44:	e5000215 	stw	r20,8(fp)
 4005a48:	b7003626 	beq	r22,fp,4005b24 <_malloc_r+0x58c>
 4005a4c:	018003c4 	movi	r6,15
 4005a50:	35404b36 	bltu	r6,r21,4005b80 <_malloc_r+0x5e8>
 4005a54:	00800044 	movi	r2,1
 4005a58:	a0800115 	stw	r2,4(r20)
 4005a5c:	003fcd06 	br	4005994 <_malloc_r+0x3fc>
 4005a60:	2808d27a 	srli	r4,r5,9
 4005a64:	2000371e 	bne	r4,zero,4005b44 <_malloc_r+0x5ac>
 4005a68:	2808d0fa 	srli	r4,r5,3
 4005a6c:	200690fa 	slli	r3,r4,3
 4005a70:	1ad1883a 	add	r8,r3,r11
 4005a74:	41800217 	ldw	r6,8(r8)
 4005a78:	41805b26 	beq	r8,r6,4005be8 <_malloc_r+0x650>
 4005a7c:	30800117 	ldw	r2,4(r6)
 4005a80:	00ffff04 	movi	r3,-4
 4005a84:	10c4703a 	and	r2,r2,r3
 4005a88:	2880022e 	bgeu	r5,r2,4005a94 <_malloc_r+0x4fc>
 4005a8c:	31800217 	ldw	r6,8(r6)
 4005a90:	41bffa1e 	bne	r8,r6,4005a7c <_malloc_r+0x4e4>
 4005a94:	32000317 	ldw	r8,12(r6)
 4005a98:	39c00117 	ldw	r7,4(r7)
 4005a9c:	82000315 	stw	r8,12(r16)
 4005aa0:	81800215 	stw	r6,8(r16)
 4005aa4:	07010074 	movhi	fp,1025
 4005aa8:	e7063a04 	addi	fp,fp,6376
 4005aac:	34000315 	stw	r16,12(r6)
 4005ab0:	44000215 	stw	r16,8(r8)
 4005ab4:	003f3e06 	br	40057b0 <_malloc_r+0x218>
 4005ab8:	63000044 	addi	r12,r12,1
 4005abc:	608000cc 	andi	r2,r12,3
 4005ac0:	10005d26 	beq	r2,zero,4005c38 <_malloc_r+0x6a0>
 4005ac4:	18c00204 	addi	r3,r3,8
 4005ac8:	003f5106 	br	4005810 <_malloc_r+0x278>
 4005acc:	8089883a 	add	r4,r16,r2
 4005ad0:	003f6d06 	br	4005888 <_malloc_r+0x2f0>
 4005ad4:	00805504 	movi	r2,340
 4005ad8:	10c02036 	bltu	r2,r3,4005b5c <_malloc_r+0x5c4>
 4005adc:	8804d3fa 	srli	r2,r17,15
 4005ae0:	11801dc4 	addi	r6,r2,119
 4005ae4:	300490fa 	slli	r2,r6,3
 4005ae8:	003ed806 	br	400564c <_malloc_r+0xb4>
 4005aec:	48c000c4 	addi	r3,r9,3
 4005af0:	003f3106 	br	40057b8 <_malloc_r+0x220>
 4005af4:	05c10074 	movhi	r23,1025
 4005af8:	bdcc1504 	addi	r23,r23,12372
 4005afc:	b8800017 	ldw	r2,0(r23)
 4005b00:	988d883a 	add	r6,r19,r2
 4005b04:	b9800015 	stw	r6,0(r23)
 4005b08:	293fb21e 	bne	r5,r4,40059d4 <_malloc_r+0x43c>
 4005b0c:	2083ffcc 	andi	r2,r4,4095
 4005b10:	103fb01e 	bne	r2,zero,40059d4 <_malloc_r+0x43c>
 4005b14:	e4000217 	ldw	r16,8(fp)
 4005b18:	9d45883a 	add	r2,r19,r21
 4005b1c:	10800054 	ori	r2,r2,1
 4005b20:	80800115 	stw	r2,4(r16)
 4005b24:	b8c00017 	ldw	r3,0(r23)
 4005b28:	d0a01717 	ldw	r2,-32676(gp)
 4005b2c:	10c0012e 	bgeu	r2,r3,4005b34 <_malloc_r+0x59c>
 4005b30:	d0e01715 	stw	r3,-32676(gp)
 4005b34:	d0a01817 	ldw	r2,-32672(gp)
 4005b38:	10ff962e 	bgeu	r2,r3,4005994 <_malloc_r+0x3fc>
 4005b3c:	d0e01815 	stw	r3,-32672(gp)
 4005b40:	003f9406 	br	4005994 <_malloc_r+0x3fc>
 4005b44:	00800104 	movi	r2,4
 4005b48:	11001e36 	bltu	r2,r4,4005bc4 <_malloc_r+0x62c>
 4005b4c:	2804d1ba 	srli	r2,r5,6
 4005b50:	11000e04 	addi	r4,r2,56
 4005b54:	200690fa 	slli	r3,r4,3
 4005b58:	003fc506 	br	4005a70 <_malloc_r+0x4d8>
 4005b5c:	00815504 	movi	r2,1364
 4005b60:	10c01d2e 	bgeu	r2,r3,4005bd8 <_malloc_r+0x640>
 4005b64:	01801f84 	movi	r6,126
 4005b68:	0080fc04 	movi	r2,1008
 4005b6c:	003eb706 	br	400564c <_malloc_r+0xb4>
 4005b70:	00800204 	movi	r2,8
 4005b74:	10cbc83a 	sub	r5,r2,r3
 4005b78:	2169883a 	add	r20,r4,r5
 4005b7c:	003f9e06 	br	40059f8 <_malloc_r+0x460>
 4005b80:	00bffe04 	movi	r2,-8
 4005b84:	a93ffd04 	addi	r4,r21,-12
 4005b88:	2088703a 	and	r4,r4,r2
 4005b8c:	b10b883a 	add	r5,r22,r4
 4005b90:	00c00144 	movi	r3,5
 4005b94:	28c00215 	stw	r3,8(r5)
 4005b98:	28c00115 	stw	r3,4(r5)
 4005b9c:	b0800117 	ldw	r2,4(r22)
 4005ba0:	1080004c 	andi	r2,r2,1
 4005ba4:	2084b03a 	or	r2,r4,r2
 4005ba8:	b0800115 	stw	r2,4(r22)
 4005bac:	313fdd2e 	bgeu	r6,r4,4005b24 <_malloc_r+0x58c>
 4005bb0:	b1400204 	addi	r5,r22,8
 4005bb4:	9009883a 	mov	r4,r18
 4005bb8:	4004a9c0 	call	4004a9c <_free_r>
 4005bbc:	e4000217 	ldw	r16,8(fp)
 4005bc0:	003fd806 	br	4005b24 <_malloc_r+0x58c>
 4005bc4:	00800504 	movi	r2,20
 4005bc8:	11001536 	bltu	r2,r4,4005c20 <_malloc_r+0x688>
 4005bcc:	210016c4 	addi	r4,r4,91
 4005bd0:	200690fa 	slli	r3,r4,3
 4005bd4:	003fa606 	br	4005a70 <_malloc_r+0x4d8>
 4005bd8:	8804d4ba 	srli	r2,r17,18
 4005bdc:	11801f04 	addi	r6,r2,124
 4005be0:	300490fa 	slli	r2,r6,3
 4005be4:	003e9906 	br	400564c <_malloc_r+0xb4>
 4005be8:	2009d0ba 	srai	r4,r4,2
 4005bec:	01410074 	movhi	r5,1025
 4005bf0:	29463a04 	addi	r5,r5,6376
 4005bf4:	00c00044 	movi	r3,1
 4005bf8:	28800117 	ldw	r2,4(r5)
 4005bfc:	1906983a 	sll	r3,r3,r4
 4005c00:	10c4b03a 	or	r2,r2,r3
 4005c04:	28800115 	stw	r2,4(r5)
 4005c08:	003fa306 	br	4005a98 <_malloc_r+0x500>
 4005c0c:	0027883a 	mov	r19,zero
 4005c10:	00c00044 	movi	r3,1
 4005c14:	003f8606 	br	4005a30 <_malloc_r+0x498>
 4005c18:	d1200315 	stw	r4,-32756(gp)
 4005c1c:	003f7306 	br	40059ec <_malloc_r+0x454>
 4005c20:	00801504 	movi	r2,84
 4005c24:	11001936 	bltu	r2,r4,4005c8c <_malloc_r+0x6f4>
 4005c28:	2804d33a 	srli	r2,r5,12
 4005c2c:	11001b84 	addi	r4,r2,110
 4005c30:	200690fa 	slli	r3,r4,3
 4005c34:	003f8e06 	br	4005a70 <_malloc_r+0x4d8>
 4005c38:	480b883a 	mov	r5,r9
 4005c3c:	6807883a 	mov	r3,r13
 4005c40:	288000cc 	andi	r2,r5,3
 4005c44:	18fffe04 	addi	r3,r3,-8
 4005c48:	297fffc4 	addi	r5,r5,-1
 4005c4c:	10001526 	beq	r2,zero,4005ca4 <_malloc_r+0x70c>
 4005c50:	18800217 	ldw	r2,8(r3)
 4005c54:	10fffa26 	beq	r2,r3,4005c40 <_malloc_r+0x6a8>
 4005c58:	2109883a 	add	r4,r4,r4
 4005c5c:	393f1e36 	bltu	r7,r4,40058d8 <_malloc_r+0x340>
 4005c60:	203f1d26 	beq	r4,zero,40058d8 <_malloc_r+0x340>
 4005c64:	21c4703a 	and	r2,r4,r7
 4005c68:	10000226 	beq	r2,zero,4005c74 <_malloc_r+0x6dc>
 4005c6c:	6013883a 	mov	r9,r12
 4005c70:	003ee106 	br	40057f8 <_malloc_r+0x260>
 4005c74:	2109883a 	add	r4,r4,r4
 4005c78:	3904703a 	and	r2,r7,r4
 4005c7c:	63000104 	addi	r12,r12,4
 4005c80:	103ffc26 	beq	r2,zero,4005c74 <_malloc_r+0x6dc>
 4005c84:	6013883a 	mov	r9,r12
 4005c88:	003edb06 	br	40057f8 <_malloc_r+0x260>
 4005c8c:	00805504 	movi	r2,340
 4005c90:	11000836 	bltu	r2,r4,4005cb4 <_malloc_r+0x71c>
 4005c94:	2804d3fa 	srli	r2,r5,15
 4005c98:	11001dc4 	addi	r4,r2,119
 4005c9c:	200690fa 	slli	r3,r4,3
 4005ca0:	003f7306 	br	4005a70 <_malloc_r+0x4d8>
 4005ca4:	0104303a 	nor	r2,zero,r4
 4005ca8:	388e703a 	and	r7,r7,r2
 4005cac:	e1c00115 	stw	r7,4(fp)
 4005cb0:	003fe906 	br	4005c58 <_malloc_r+0x6c0>
 4005cb4:	00815504 	movi	r2,1364
 4005cb8:	1100032e 	bgeu	r2,r4,4005cc8 <_malloc_r+0x730>
 4005cbc:	01001f84 	movi	r4,126
 4005cc0:	00c0fc04 	movi	r3,1008
 4005cc4:	003f6a06 	br	4005a70 <_malloc_r+0x4d8>
 4005cc8:	2804d4ba 	srli	r2,r5,18
 4005ccc:	11001f04 	addi	r4,r2,124
 4005cd0:	200690fa 	slli	r3,r4,3
 4005cd4:	003f6606 	br	4005a70 <_malloc_r+0x4d8>

04005cd8 <memcpy>:
 4005cd8:	01c003c4 	movi	r7,15
 4005cdc:	2007883a 	mov	r3,r4
 4005ce0:	3980032e 	bgeu	r7,r6,4005cf0 <memcpy+0x18>
 4005ce4:	2904b03a 	or	r2,r5,r4
 4005ce8:	108000cc 	andi	r2,r2,3
 4005cec:	10000926 	beq	r2,zero,4005d14 <memcpy+0x3c>
 4005cf0:	30000626 	beq	r6,zero,4005d0c <memcpy+0x34>
 4005cf4:	30cd883a 	add	r6,r6,r3
 4005cf8:	28800003 	ldbu	r2,0(r5)
 4005cfc:	29400044 	addi	r5,r5,1
 4005d00:	18800005 	stb	r2,0(r3)
 4005d04:	18c00044 	addi	r3,r3,1
 4005d08:	30fffb1e 	bne	r6,r3,4005cf8 <memcpy+0x20>
 4005d0c:	2005883a 	mov	r2,r4
 4005d10:	f800283a 	ret
 4005d14:	3811883a 	mov	r8,r7
 4005d18:	200f883a 	mov	r7,r4
 4005d1c:	28c00017 	ldw	r3,0(r5)
 4005d20:	31bffc04 	addi	r6,r6,-16
 4005d24:	38c00015 	stw	r3,0(r7)
 4005d28:	28800117 	ldw	r2,4(r5)
 4005d2c:	38800115 	stw	r2,4(r7)
 4005d30:	28c00217 	ldw	r3,8(r5)
 4005d34:	38c00215 	stw	r3,8(r7)
 4005d38:	28800317 	ldw	r2,12(r5)
 4005d3c:	29400404 	addi	r5,r5,16
 4005d40:	38800315 	stw	r2,12(r7)
 4005d44:	39c00404 	addi	r7,r7,16
 4005d48:	41bff436 	bltu	r8,r6,4005d1c <memcpy+0x44>
 4005d4c:	008000c4 	movi	r2,3
 4005d50:	1180072e 	bgeu	r2,r6,4005d70 <memcpy+0x98>
 4005d54:	1007883a 	mov	r3,r2
 4005d58:	28800017 	ldw	r2,0(r5)
 4005d5c:	31bfff04 	addi	r6,r6,-4
 4005d60:	29400104 	addi	r5,r5,4
 4005d64:	38800015 	stw	r2,0(r7)
 4005d68:	39c00104 	addi	r7,r7,4
 4005d6c:	19bffa36 	bltu	r3,r6,4005d58 <memcpy+0x80>
 4005d70:	3807883a 	mov	r3,r7
 4005d74:	003fde06 	br	4005cf0 <memcpy+0x18>

04005d78 <memset>:
 4005d78:	008000c4 	movi	r2,3
 4005d7c:	29403fcc 	andi	r5,r5,255
 4005d80:	2007883a 	mov	r3,r4
 4005d84:	1180022e 	bgeu	r2,r6,4005d90 <memset+0x18>
 4005d88:	2084703a 	and	r2,r4,r2
 4005d8c:	10000826 	beq	r2,zero,4005db0 <memset+0x38>
 4005d90:	30000526 	beq	r6,zero,4005da8 <memset+0x30>
 4005d94:	2805883a 	mov	r2,r5
 4005d98:	30cd883a 	add	r6,r6,r3
 4005d9c:	18800005 	stb	r2,0(r3)
 4005da0:	18c00044 	addi	r3,r3,1
 4005da4:	19bffd1e 	bne	r3,r6,4005d9c <memset+0x24>
 4005da8:	2005883a 	mov	r2,r4
 4005dac:	f800283a 	ret
 4005db0:	2804923a 	slli	r2,r5,8
 4005db4:	020003c4 	movi	r8,15
 4005db8:	200f883a 	mov	r7,r4
 4005dbc:	2884b03a 	or	r2,r5,r2
 4005dc0:	1006943a 	slli	r3,r2,16
 4005dc4:	10c6b03a 	or	r3,r2,r3
 4005dc8:	41800a2e 	bgeu	r8,r6,4005df4 <memset+0x7c>
 4005dcc:	4005883a 	mov	r2,r8
 4005dd0:	31bffc04 	addi	r6,r6,-16
 4005dd4:	38c00015 	stw	r3,0(r7)
 4005dd8:	38c00115 	stw	r3,4(r7)
 4005ddc:	38c00215 	stw	r3,8(r7)
 4005de0:	38c00315 	stw	r3,12(r7)
 4005de4:	39c00404 	addi	r7,r7,16
 4005de8:	11bff936 	bltu	r2,r6,4005dd0 <memset+0x58>
 4005dec:	008000c4 	movi	r2,3
 4005df0:	1180052e 	bgeu	r2,r6,4005e08 <memset+0x90>
 4005df4:	31bfff04 	addi	r6,r6,-4
 4005df8:	008000c4 	movi	r2,3
 4005dfc:	38c00015 	stw	r3,0(r7)
 4005e00:	39c00104 	addi	r7,r7,4
 4005e04:	11bffb36 	bltu	r2,r6,4005df4 <memset+0x7c>
 4005e08:	3807883a 	mov	r3,r7
 4005e0c:	003fe006 	br	4005d90 <memset+0x18>

04005e10 <_open_r>:
 4005e10:	defffd04 	addi	sp,sp,-12
 4005e14:	dc000015 	stw	r16,0(sp)
 4005e18:	04010074 	movhi	r16,1025
 4005e1c:	840c0804 	addi	r16,r16,12320
 4005e20:	dc400115 	stw	r17,4(sp)
 4005e24:	80000015 	stw	zero,0(r16)
 4005e28:	2023883a 	mov	r17,r4
 4005e2c:	2809883a 	mov	r4,r5
 4005e30:	300b883a 	mov	r5,r6
 4005e34:	380d883a 	mov	r6,r7
 4005e38:	dfc00215 	stw	ra,8(sp)
 4005e3c:	400d4cc0 	call	400d4cc <open>
 4005e40:	1007883a 	mov	r3,r2
 4005e44:	00bfffc4 	movi	r2,-1
 4005e48:	18800626 	beq	r3,r2,4005e64 <_open_r+0x54>
 4005e4c:	1805883a 	mov	r2,r3
 4005e50:	dfc00217 	ldw	ra,8(sp)
 4005e54:	dc400117 	ldw	r17,4(sp)
 4005e58:	dc000017 	ldw	r16,0(sp)
 4005e5c:	dec00304 	addi	sp,sp,12
 4005e60:	f800283a 	ret
 4005e64:	80800017 	ldw	r2,0(r16)
 4005e68:	103ff826 	beq	r2,zero,4005e4c <_open_r+0x3c>
 4005e6c:	88800015 	stw	r2,0(r17)
 4005e70:	1805883a 	mov	r2,r3
 4005e74:	dfc00217 	ldw	ra,8(sp)
 4005e78:	dc400117 	ldw	r17,4(sp)
 4005e7c:	dc000017 	ldw	r16,0(sp)
 4005e80:	dec00304 	addi	sp,sp,12
 4005e84:	f800283a 	ret

04005e88 <printf>:
 4005e88:	defffb04 	addi	sp,sp,-20
 4005e8c:	dfc00115 	stw	ra,4(sp)
 4005e90:	d9400215 	stw	r5,8(sp)
 4005e94:	d9800315 	stw	r6,12(sp)
 4005e98:	d9c00415 	stw	r7,16(sp)
 4005e9c:	00810074 	movhi	r2,1025
 4005ea0:	108bf304 	addi	r2,r2,12236
 4005ea4:	10c00017 	ldw	r3,0(r2)
 4005ea8:	200b883a 	mov	r5,r4
 4005eac:	d8800204 	addi	r2,sp,8
 4005eb0:	19000217 	ldw	r4,8(r3)
 4005eb4:	100d883a 	mov	r6,r2
 4005eb8:	d8800015 	stw	r2,0(sp)
 4005ebc:	400839c0 	call	400839c <__vfprintf_internal>
 4005ec0:	dfc00117 	ldw	ra,4(sp)
 4005ec4:	dec00504 	addi	sp,sp,20
 4005ec8:	f800283a 	ret

04005ecc <_printf_r>:
 4005ecc:	defffc04 	addi	sp,sp,-16
 4005ed0:	dfc00115 	stw	ra,4(sp)
 4005ed4:	d9800215 	stw	r6,8(sp)
 4005ed8:	d9c00315 	stw	r7,12(sp)
 4005edc:	280d883a 	mov	r6,r5
 4005ee0:	21400217 	ldw	r5,8(r4)
 4005ee4:	d8c00204 	addi	r3,sp,8
 4005ee8:	180f883a 	mov	r7,r3
 4005eec:	d8c00015 	stw	r3,0(sp)
 4005ef0:	40064f00 	call	40064f0 <___vfprintf_internal_r>
 4005ef4:	dfc00117 	ldw	ra,4(sp)
 4005ef8:	dec00404 	addi	sp,sp,16
 4005efc:	f800283a 	ret

04005f00 <_puts_r>:
 4005f00:	defff604 	addi	sp,sp,-40
 4005f04:	dc400715 	stw	r17,28(sp)
 4005f08:	2023883a 	mov	r17,r4
 4005f0c:	2809883a 	mov	r4,r5
 4005f10:	dfc00915 	stw	ra,36(sp)
 4005f14:	dcc00815 	stw	r19,32(sp)
 4005f18:	2827883a 	mov	r19,r5
 4005f1c:	40064240 	call	4006424 <strlen>
 4005f20:	89400217 	ldw	r5,8(r17)
 4005f24:	00c10074 	movhi	r3,1025
 4005f28:	18c4ab04 	addi	r3,r3,4780
 4005f2c:	01c00044 	movi	r7,1
 4005f30:	12000044 	addi	r8,r2,1
 4005f34:	d8c00515 	stw	r3,20(sp)
 4005f38:	d9c00615 	stw	r7,24(sp)
 4005f3c:	d8c00304 	addi	r3,sp,12
 4005f40:	01c00084 	movi	r7,2
 4005f44:	8809883a 	mov	r4,r17
 4005f48:	d80d883a 	mov	r6,sp
 4005f4c:	d8c00015 	stw	r3,0(sp)
 4005f50:	dcc00315 	stw	r19,12(sp)
 4005f54:	da000215 	stw	r8,8(sp)
 4005f58:	d9c00115 	stw	r7,4(sp)
 4005f5c:	d8800415 	stw	r2,16(sp)
 4005f60:	4009e500 	call	4009e50 <__sfvwrite_r>
 4005f64:	00ffffc4 	movi	r3,-1
 4005f68:	10000626 	beq	r2,zero,4005f84 <_puts_r+0x84>
 4005f6c:	1805883a 	mov	r2,r3
 4005f70:	dfc00917 	ldw	ra,36(sp)
 4005f74:	dcc00817 	ldw	r19,32(sp)
 4005f78:	dc400717 	ldw	r17,28(sp)
 4005f7c:	dec00a04 	addi	sp,sp,40
 4005f80:	f800283a 	ret
 4005f84:	00c00284 	movi	r3,10
 4005f88:	1805883a 	mov	r2,r3
 4005f8c:	dfc00917 	ldw	ra,36(sp)
 4005f90:	dcc00817 	ldw	r19,32(sp)
 4005f94:	dc400717 	ldw	r17,28(sp)
 4005f98:	dec00a04 	addi	sp,sp,40
 4005f9c:	f800283a 	ret

04005fa0 <puts>:
 4005fa0:	00810074 	movhi	r2,1025
 4005fa4:	108bf304 	addi	r2,r2,12236
 4005fa8:	200b883a 	mov	r5,r4
 4005fac:	11000017 	ldw	r4,0(r2)
 4005fb0:	4005f001 	jmpi	4005f00 <_puts_r>

04005fb4 <__srefill_r>:
 4005fb4:	defffd04 	addi	sp,sp,-12
 4005fb8:	dc400115 	stw	r17,4(sp)
 4005fbc:	dc000015 	stw	r16,0(sp)
 4005fc0:	dfc00215 	stw	ra,8(sp)
 4005fc4:	2023883a 	mov	r17,r4
 4005fc8:	2821883a 	mov	r16,r5
 4005fcc:	20000226 	beq	r4,zero,4005fd8 <__srefill_r+0x24>
 4005fd0:	20800e17 	ldw	r2,56(r4)
 4005fd4:	10004126 	beq	r2,zero,40060dc <__srefill_r+0x128>
 4005fd8:	80c0030b 	ldhu	r3,12(r16)
 4005fdc:	80000115 	stw	zero,4(r16)
 4005fe0:	1880080c 	andi	r2,r3,32
 4005fe4:	1000361e 	bne	r2,zero,40060c0 <__srefill_r+0x10c>
 4005fe8:	1880010c 	andi	r2,r3,4
 4005fec:	1000211e 	bne	r2,zero,4006074 <__srefill_r+0xc0>
 4005ff0:	1880040c 	andi	r2,r3,16
 4005ff4:	10005026 	beq	r2,zero,4006138 <__srefill_r+0x184>
 4005ff8:	1880020c 	andi	r2,r3,8
 4005ffc:	1000541e 	bne	r2,zero,4006150 <__srefill_r+0x19c>
 4006000:	8080030b 	ldhu	r2,12(r16)
 4006004:	10800114 	ori	r2,r2,4
 4006008:	8080030d 	sth	r2,12(r16)
 400600c:	80800417 	ldw	r2,16(r16)
 4006010:	10004526 	beq	r2,zero,4006128 <__srefill_r+0x174>
 4006014:	8080030b 	ldhu	r2,12(r16)
 4006018:	108000cc 	andi	r2,r2,3
 400601c:	1000361e 	bne	r2,zero,40060f8 <__srefill_r+0x144>
 4006020:	81800417 	ldw	r6,16(r16)
 4006024:	80c00817 	ldw	r3,32(r16)
 4006028:	81400717 	ldw	r5,28(r16)
 400602c:	81c00517 	ldw	r7,20(r16)
 4006030:	8809883a 	mov	r4,r17
 4006034:	81800015 	stw	r6,0(r16)
 4006038:	183ee83a 	callr	r3
 400603c:	80c0030b 	ldhu	r3,12(r16)
 4006040:	1009883a 	mov	r4,r2
 4006044:	80800115 	stw	r2,4(r16)
 4006048:	00b7ffc4 	movi	r2,-8193
 400604c:	1884703a 	and	r2,r3,r2
 4006050:	8080030d 	sth	r2,12(r16)
 4006054:	0100230e 	bge	zero,r4,40060e4 <__srefill_r+0x130>
 4006058:	0009883a 	mov	r4,zero
 400605c:	2005883a 	mov	r2,r4
 4006060:	dfc00217 	ldw	ra,8(sp)
 4006064:	dc400117 	ldw	r17,4(sp)
 4006068:	dc000017 	ldw	r16,0(sp)
 400606c:	dec00304 	addi	sp,sp,12
 4006070:	f800283a 	ret
 4006074:	81400c17 	ldw	r5,48(r16)
 4006078:	283fe426 	beq	r5,zero,400600c <__srefill_r+0x58>
 400607c:	80801004 	addi	r2,r16,64
 4006080:	28800226 	beq	r5,r2,400608c <__srefill_r+0xd8>
 4006084:	8809883a 	mov	r4,r17
 4006088:	4004a9c0 	call	4004a9c <_free_r>
 400608c:	80800f17 	ldw	r2,60(r16)
 4006090:	80000c15 	stw	zero,48(r16)
 4006094:	80800115 	stw	r2,4(r16)
 4006098:	103fdc26 	beq	r2,zero,400600c <__srefill_r+0x58>
 400609c:	80800e17 	ldw	r2,56(r16)
 40060a0:	0009883a 	mov	r4,zero
 40060a4:	80800015 	stw	r2,0(r16)
 40060a8:	2005883a 	mov	r2,r4
 40060ac:	dfc00217 	ldw	ra,8(sp)
 40060b0:	dc400117 	ldw	r17,4(sp)
 40060b4:	dc000017 	ldw	r16,0(sp)
 40060b8:	dec00304 	addi	sp,sp,12
 40060bc:	f800283a 	ret
 40060c0:	013fffc4 	movi	r4,-1
 40060c4:	2005883a 	mov	r2,r4
 40060c8:	dfc00217 	ldw	ra,8(sp)
 40060cc:	dc400117 	ldw	r17,4(sp)
 40060d0:	dc000017 	ldw	r16,0(sp)
 40060d4:	dec00304 	addi	sp,sp,12
 40060d8:	f800283a 	ret
 40060dc:	40045a80 	call	40045a8 <__sinit>
 40060e0:	003fbd06 	br	4005fd8 <__srefill_r+0x24>
 40060e4:	20000b1e 	bne	r4,zero,4006114 <__srefill_r+0x160>
 40060e8:	10800814 	ori	r2,r2,32
 40060ec:	013fffc4 	movi	r4,-1
 40060f0:	8080030d 	sth	r2,12(r16)
 40060f4:	003fd906 	br	400605c <__srefill_r+0xa8>
 40060f8:	00810074 	movhi	r2,1025
 40060fc:	108bf404 	addi	r2,r2,12240
 4006100:	11000017 	ldw	r4,0(r2)
 4006104:	01410034 	movhi	r5,1024
 4006108:	29585e04 	addi	r5,r5,24952
 400610c:	400534c0 	call	400534c <_fwalk>
 4006110:	003fc306 	br	4006020 <__srefill_r+0x6c>
 4006114:	10801014 	ori	r2,r2,64
 4006118:	013fffc4 	movi	r4,-1
 400611c:	8080030d 	sth	r2,12(r16)
 4006120:	80000115 	stw	zero,4(r16)
 4006124:	003fcd06 	br	400605c <__srefill_r+0xa8>
 4006128:	8809883a 	mov	r4,r17
 400612c:	800b883a 	mov	r5,r16
 4006130:	40054040 	call	4005404 <__smakebuf_r>
 4006134:	003fb706 	br	4006014 <__srefill_r+0x60>
 4006138:	18c01014 	ori	r3,r3,64
 400613c:	00800244 	movi	r2,9
 4006140:	013fffc4 	movi	r4,-1
 4006144:	88800015 	stw	r2,0(r17)
 4006148:	80c0030d 	sth	r3,12(r16)
 400614c:	003fc306 	br	400605c <__srefill_r+0xa8>
 4006150:	8809883a 	mov	r4,r17
 4006154:	800b883a 	mov	r5,r16
 4006158:	40043100 	call	4004310 <_fflush_r>
 400615c:	103fd81e 	bne	r2,zero,40060c0 <__srefill_r+0x10c>
 4006160:	8080030b 	ldhu	r2,12(r16)
 4006164:	80000215 	stw	zero,8(r16)
 4006168:	80000615 	stw	zero,24(r16)
 400616c:	10bffdcc 	andi	r2,r2,65527
 4006170:	8080030d 	sth	r2,12(r16)
 4006174:	003fa206 	br	4006000 <__srefill_r+0x4c>

04006178 <lflush>:
 4006178:	20c0030b 	ldhu	r3,12(r4)
 400617c:	01400244 	movi	r5,9
 4006180:	0005883a 	mov	r2,zero
 4006184:	18c0024c 	andi	r3,r3,9
 4006188:	19400126 	beq	r3,r5,4006190 <lflush+0x18>
 400618c:	f800283a 	ret
 4006190:	400450c1 	jmpi	400450c <fflush>

04006194 <_sbrk_r>:
 4006194:	defffd04 	addi	sp,sp,-12
 4006198:	dc000015 	stw	r16,0(sp)
 400619c:	04010074 	movhi	r16,1025
 40061a0:	840c0804 	addi	r16,r16,12320
 40061a4:	dc400115 	stw	r17,4(sp)
 40061a8:	80000015 	stw	zero,0(r16)
 40061ac:	2023883a 	mov	r17,r4
 40061b0:	2809883a 	mov	r4,r5
 40061b4:	dfc00215 	stw	ra,8(sp)
 40061b8:	400d8940 	call	400d894 <sbrk>
 40061bc:	1007883a 	mov	r3,r2
 40061c0:	00bfffc4 	movi	r2,-1
 40061c4:	18800626 	beq	r3,r2,40061e0 <_sbrk_r+0x4c>
 40061c8:	1805883a 	mov	r2,r3
 40061cc:	dfc00217 	ldw	ra,8(sp)
 40061d0:	dc400117 	ldw	r17,4(sp)
 40061d4:	dc000017 	ldw	r16,0(sp)
 40061d8:	dec00304 	addi	sp,sp,12
 40061dc:	f800283a 	ret
 40061e0:	80800017 	ldw	r2,0(r16)
 40061e4:	103ff826 	beq	r2,zero,40061c8 <_sbrk_r+0x34>
 40061e8:	88800015 	stw	r2,0(r17)
 40061ec:	1805883a 	mov	r2,r3
 40061f0:	dfc00217 	ldw	ra,8(sp)
 40061f4:	dc400117 	ldw	r17,4(sp)
 40061f8:	dc000017 	ldw	r16,0(sp)
 40061fc:	dec00304 	addi	sp,sp,12
 4006200:	f800283a 	ret

04006204 <sprintf>:
 4006204:	deffe504 	addi	sp,sp,-108
 4006208:	2013883a 	mov	r9,r4
 400620c:	dfc01815 	stw	ra,96(sp)
 4006210:	d9801915 	stw	r6,100(sp)
 4006214:	d9c01a15 	stw	r7,104(sp)
 4006218:	d8801904 	addi	r2,sp,100
 400621c:	d8800015 	stw	r2,0(sp)
 4006220:	00810074 	movhi	r2,1025
 4006224:	108bf304 	addi	r2,r2,12236
 4006228:	11000017 	ldw	r4,0(r2)
 400622c:	d9c00017 	ldw	r7,0(sp)
 4006230:	00808204 	movi	r2,520
 4006234:	00e00034 	movhi	r3,32768
 4006238:	18ffffc4 	addi	r3,r3,-1
 400623c:	280d883a 	mov	r6,r5
 4006240:	d880040d 	sth	r2,16(sp)
 4006244:	d9400104 	addi	r5,sp,4
 4006248:	00bfffc4 	movi	r2,-1
 400624c:	d8c00615 	stw	r3,24(sp)
 4006250:	d8c00315 	stw	r3,12(sp)
 4006254:	da400515 	stw	r9,20(sp)
 4006258:	d880048d 	sth	r2,18(sp)
 400625c:	da400115 	stw	r9,4(sp)
 4006260:	40064f00 	call	40064f0 <___vfprintf_internal_r>
 4006264:	d8c00117 	ldw	r3,4(sp)
 4006268:	18000005 	stb	zero,0(r3)
 400626c:	dfc01817 	ldw	ra,96(sp)
 4006270:	dec01b04 	addi	sp,sp,108
 4006274:	f800283a 	ret

04006278 <_sprintf_r>:
 4006278:	deffe604 	addi	sp,sp,-104
 400627c:	2813883a 	mov	r9,r5
 4006280:	dfc01815 	stw	ra,96(sp)
 4006284:	d9c01915 	stw	r7,100(sp)
 4006288:	d8801904 	addi	r2,sp,100
 400628c:	d8800015 	stw	r2,0(sp)
 4006290:	100f883a 	mov	r7,r2
 4006294:	00808204 	movi	r2,520
 4006298:	00e00034 	movhi	r3,32768
 400629c:	18ffffc4 	addi	r3,r3,-1
 40062a0:	d880040d 	sth	r2,16(sp)
 40062a4:	d9400104 	addi	r5,sp,4
 40062a8:	00bfffc4 	movi	r2,-1
 40062ac:	d8c00615 	stw	r3,24(sp)
 40062b0:	d8c00315 	stw	r3,12(sp)
 40062b4:	da400515 	stw	r9,20(sp)
 40062b8:	d880048d 	sth	r2,18(sp)
 40062bc:	da400115 	stw	r9,4(sp)
 40062c0:	40064f00 	call	40064f0 <___vfprintf_internal_r>
 40062c4:	d8c00117 	ldw	r3,4(sp)
 40062c8:	18000005 	stb	zero,0(r3)
 40062cc:	dfc01817 	ldw	ra,96(sp)
 40062d0:	dec01a04 	addi	sp,sp,104
 40062d4:	f800283a 	ret

040062d8 <__sclose>:
 40062d8:	2940038f 	ldh	r5,14(r5)
 40062dc:	40085741 	jmpi	4008574 <_close_r>

040062e0 <__sseek>:
 40062e0:	defffe04 	addi	sp,sp,-8
 40062e4:	dc000015 	stw	r16,0(sp)
 40062e8:	2821883a 	mov	r16,r5
 40062ec:	2940038f 	ldh	r5,14(r5)
 40062f0:	dfc00115 	stw	ra,4(sp)
 40062f4:	400a4200 	call	400a420 <_lseek_r>
 40062f8:	1007883a 	mov	r3,r2
 40062fc:	00bfffc4 	movi	r2,-1
 4006300:	18800926 	beq	r3,r2,4006328 <__sseek+0x48>
 4006304:	8080030b 	ldhu	r2,12(r16)
 4006308:	80c01415 	stw	r3,80(r16)
 400630c:	10840014 	ori	r2,r2,4096
 4006310:	8080030d 	sth	r2,12(r16)
 4006314:	1805883a 	mov	r2,r3
 4006318:	dfc00117 	ldw	ra,4(sp)
 400631c:	dc000017 	ldw	r16,0(sp)
 4006320:	dec00204 	addi	sp,sp,8
 4006324:	f800283a 	ret
 4006328:	8080030b 	ldhu	r2,12(r16)
 400632c:	10bbffcc 	andi	r2,r2,61439
 4006330:	8080030d 	sth	r2,12(r16)
 4006334:	1805883a 	mov	r2,r3
 4006338:	dfc00117 	ldw	ra,4(sp)
 400633c:	dc000017 	ldw	r16,0(sp)
 4006340:	dec00204 	addi	sp,sp,8
 4006344:	f800283a 	ret

04006348 <__swrite>:
 4006348:	2880030b 	ldhu	r2,12(r5)
 400634c:	defffb04 	addi	sp,sp,-20
 4006350:	dcc00315 	stw	r19,12(sp)
 4006354:	1080400c 	andi	r2,r2,256
 4006358:	dc800215 	stw	r18,8(sp)
 400635c:	dc400115 	stw	r17,4(sp)
 4006360:	dc000015 	stw	r16,0(sp)
 4006364:	3027883a 	mov	r19,r6
 4006368:	3825883a 	mov	r18,r7
 400636c:	dfc00415 	stw	ra,16(sp)
 4006370:	2821883a 	mov	r16,r5
 4006374:	000d883a 	mov	r6,zero
 4006378:	01c00084 	movi	r7,2
 400637c:	2023883a 	mov	r17,r4
 4006380:	10000226 	beq	r2,zero,400638c <__swrite+0x44>
 4006384:	2940038f 	ldh	r5,14(r5)
 4006388:	400a4200 	call	400a420 <_lseek_r>
 400638c:	8080030b 	ldhu	r2,12(r16)
 4006390:	8140038f 	ldh	r5,14(r16)
 4006394:	8809883a 	mov	r4,r17
 4006398:	10bbffcc 	andi	r2,r2,61439
 400639c:	980d883a 	mov	r6,r19
 40063a0:	900f883a 	mov	r7,r18
 40063a4:	8080030d 	sth	r2,12(r16)
 40063a8:	dfc00417 	ldw	ra,16(sp)
 40063ac:	dcc00317 	ldw	r19,12(sp)
 40063b0:	dc800217 	ldw	r18,8(sp)
 40063b4:	dc400117 	ldw	r17,4(sp)
 40063b8:	dc000017 	ldw	r16,0(sp)
 40063bc:	dec00504 	addi	sp,sp,20
 40063c0:	40083c01 	jmpi	40083c0 <_write_r>

040063c4 <__sread>:
 40063c4:	defffe04 	addi	sp,sp,-8
 40063c8:	dc000015 	stw	r16,0(sp)
 40063cc:	2821883a 	mov	r16,r5
 40063d0:	2940038f 	ldh	r5,14(r5)
 40063d4:	dfc00115 	stw	ra,4(sp)
 40063d8:	400b6500 	call	400b650 <_read_r>
 40063dc:	1007883a 	mov	r3,r2
 40063e0:	10000816 	blt	r2,zero,4006404 <__sread+0x40>
 40063e4:	80801417 	ldw	r2,80(r16)
 40063e8:	10c5883a 	add	r2,r2,r3
 40063ec:	80801415 	stw	r2,80(r16)
 40063f0:	1805883a 	mov	r2,r3
 40063f4:	dfc00117 	ldw	ra,4(sp)
 40063f8:	dc000017 	ldw	r16,0(sp)
 40063fc:	dec00204 	addi	sp,sp,8
 4006400:	f800283a 	ret
 4006404:	8080030b 	ldhu	r2,12(r16)
 4006408:	10bbffcc 	andi	r2,r2,61439
 400640c:	8080030d 	sth	r2,12(r16)
 4006410:	1805883a 	mov	r2,r3
 4006414:	dfc00117 	ldw	ra,4(sp)
 4006418:	dc000017 	ldw	r16,0(sp)
 400641c:	dec00204 	addi	sp,sp,8
 4006420:	f800283a 	ret

04006424 <strlen>:
 4006424:	208000cc 	andi	r2,r4,3
 4006428:	2011883a 	mov	r8,r4
 400642c:	1000161e 	bne	r2,zero,4006488 <strlen+0x64>
 4006430:	20c00017 	ldw	r3,0(r4)
 4006434:	017fbff4 	movhi	r5,65279
 4006438:	297fbfc4 	addi	r5,r5,-257
 400643c:	01e02074 	movhi	r7,32897
 4006440:	39e02004 	addi	r7,r7,-32640
 4006444:	1945883a 	add	r2,r3,r5
 4006448:	11c4703a 	and	r2,r2,r7
 400644c:	00c6303a 	nor	r3,zero,r3
 4006450:	1886703a 	and	r3,r3,r2
 4006454:	18000c1e 	bne	r3,zero,4006488 <strlen+0x64>
 4006458:	280d883a 	mov	r6,r5
 400645c:	380b883a 	mov	r5,r7
 4006460:	21000104 	addi	r4,r4,4
 4006464:	20800017 	ldw	r2,0(r4)
 4006468:	1187883a 	add	r3,r2,r6
 400646c:	1946703a 	and	r3,r3,r5
 4006470:	0084303a 	nor	r2,zero,r2
 4006474:	10c4703a 	and	r2,r2,r3
 4006478:	103ff926 	beq	r2,zero,4006460 <strlen+0x3c>
 400647c:	20800007 	ldb	r2,0(r4)
 4006480:	10000326 	beq	r2,zero,4006490 <strlen+0x6c>
 4006484:	21000044 	addi	r4,r4,1
 4006488:	20800007 	ldb	r2,0(r4)
 400648c:	103ffd1e 	bne	r2,zero,4006484 <strlen+0x60>
 4006490:	2205c83a 	sub	r2,r4,r8
 4006494:	f800283a 	ret

04006498 <__sprint_r>:
 4006498:	30800217 	ldw	r2,8(r6)
 400649c:	defffe04 	addi	sp,sp,-8
 40064a0:	dc000015 	stw	r16,0(sp)
 40064a4:	dfc00115 	stw	ra,4(sp)
 40064a8:	3021883a 	mov	r16,r6
 40064ac:	0007883a 	mov	r3,zero
 40064b0:	1000061e 	bne	r2,zero,40064cc <__sprint_r+0x34>
 40064b4:	1805883a 	mov	r2,r3
 40064b8:	30000115 	stw	zero,4(r6)
 40064bc:	dfc00117 	ldw	ra,4(sp)
 40064c0:	dc000017 	ldw	r16,0(sp)
 40064c4:	dec00204 	addi	sp,sp,8
 40064c8:	f800283a 	ret
 40064cc:	4009e500 	call	4009e50 <__sfvwrite_r>
 40064d0:	1007883a 	mov	r3,r2
 40064d4:	1805883a 	mov	r2,r3
 40064d8:	80000115 	stw	zero,4(r16)
 40064dc:	80000215 	stw	zero,8(r16)
 40064e0:	dfc00117 	ldw	ra,4(sp)
 40064e4:	dc000017 	ldw	r16,0(sp)
 40064e8:	dec00204 	addi	sp,sp,8
 40064ec:	f800283a 	ret

040064f0 <___vfprintf_internal_r>:
 40064f0:	defea404 	addi	sp,sp,-1392
 40064f4:	dd815815 	stw	r22,1376(sp)
 40064f8:	dc015215 	stw	r16,1352(sp)
 40064fc:	d9c15115 	stw	r7,1348(sp)
 4006500:	dfc15b15 	stw	ra,1388(sp)
 4006504:	df015a15 	stw	fp,1384(sp)
 4006508:	ddc15915 	stw	r23,1380(sp)
 400650c:	dd415715 	stw	r21,1372(sp)
 4006510:	dd015615 	stw	r20,1368(sp)
 4006514:	dcc15515 	stw	r19,1364(sp)
 4006518:	dc815415 	stw	r18,1360(sp)
 400651c:	dc415315 	stw	r17,1356(sp)
 4006520:	282d883a 	mov	r22,r5
 4006524:	3021883a 	mov	r16,r6
 4006528:	d9014f15 	stw	r4,1340(sp)
 400652c:	400a3640 	call	400a364 <_localeconv_r>
 4006530:	10800017 	ldw	r2,0(r2)
 4006534:	d9c15117 	ldw	r7,1348(sp)
 4006538:	d8814915 	stw	r2,1316(sp)
 400653c:	d8814f17 	ldw	r2,1340(sp)
 4006540:	10000226 	beq	r2,zero,400654c <___vfprintf_internal_r+0x5c>
 4006544:	10800e17 	ldw	r2,56(r2)
 4006548:	10020d26 	beq	r2,zero,4006d80 <___vfprintf_internal_r+0x890>
 400654c:	b080030b 	ldhu	r2,12(r22)
 4006550:	1080020c 	andi	r2,r2,8
 4006554:	10020e26 	beq	r2,zero,4006d90 <___vfprintf_internal_r+0x8a0>
 4006558:	b0800417 	ldw	r2,16(r22)
 400655c:	10020c26 	beq	r2,zero,4006d90 <___vfprintf_internal_r+0x8a0>
 4006560:	b200030b 	ldhu	r8,12(r22)
 4006564:	00800284 	movi	r2,10
 4006568:	40c0068c 	andi	r3,r8,26
 400656c:	18802f1e 	bne	r3,r2,400662c <___vfprintf_internal_r+0x13c>
 4006570:	b080038f 	ldh	r2,14(r22)
 4006574:	10002d16 	blt	r2,zero,400662c <___vfprintf_internal_r+0x13c>
 4006578:	b240038b 	ldhu	r9,14(r22)
 400657c:	b2800717 	ldw	r10,28(r22)
 4006580:	b2c00917 	ldw	r11,36(r22)
 4006584:	d9014f17 	ldw	r4,1340(sp)
 4006588:	dc402904 	addi	r17,sp,164
 400658c:	d8804004 	addi	r2,sp,256
 4006590:	00c10004 	movi	r3,1024
 4006594:	423fff4c 	andi	r8,r8,65533
 4006598:	800d883a 	mov	r6,r16
 400659c:	880b883a 	mov	r5,r17
 40065a0:	da002c0d 	sth	r8,176(sp)
 40065a4:	da402c8d 	sth	r9,178(sp)
 40065a8:	da803015 	stw	r10,192(sp)
 40065ac:	dac03215 	stw	r11,200(sp)
 40065b0:	d8802d15 	stw	r2,180(sp)
 40065b4:	d8c02e15 	stw	r3,184(sp)
 40065b8:	d8802915 	stw	r2,164(sp)
 40065bc:	d8c02b15 	stw	r3,172(sp)
 40065c0:	d8002f15 	stw	zero,188(sp)
 40065c4:	40064f00 	call	40064f0 <___vfprintf_internal_r>
 40065c8:	d8814b15 	stw	r2,1324(sp)
 40065cc:	10000416 	blt	r2,zero,40065e0 <___vfprintf_internal_r+0xf0>
 40065d0:	d9014f17 	ldw	r4,1340(sp)
 40065d4:	880b883a 	mov	r5,r17
 40065d8:	40043100 	call	4004310 <_fflush_r>
 40065dc:	1002321e 	bne	r2,zero,4006ea8 <___vfprintf_internal_r+0x9b8>
 40065e0:	d8802c0b 	ldhu	r2,176(sp)
 40065e4:	1080100c 	andi	r2,r2,64
 40065e8:	10000326 	beq	r2,zero,40065f8 <___vfprintf_internal_r+0x108>
 40065ec:	b080030b 	ldhu	r2,12(r22)
 40065f0:	10801014 	ori	r2,r2,64
 40065f4:	b080030d 	sth	r2,12(r22)
 40065f8:	d8814b17 	ldw	r2,1324(sp)
 40065fc:	dfc15b17 	ldw	ra,1388(sp)
 4006600:	df015a17 	ldw	fp,1384(sp)
 4006604:	ddc15917 	ldw	r23,1380(sp)
 4006608:	dd815817 	ldw	r22,1376(sp)
 400660c:	dd415717 	ldw	r21,1372(sp)
 4006610:	dd015617 	ldw	r20,1368(sp)
 4006614:	dcc15517 	ldw	r19,1364(sp)
 4006618:	dc815417 	ldw	r18,1360(sp)
 400661c:	dc415317 	ldw	r17,1356(sp)
 4006620:	dc015217 	ldw	r16,1352(sp)
 4006624:	dec15c04 	addi	sp,sp,1392
 4006628:	f800283a 	ret
 400662c:	0005883a 	mov	r2,zero
 4006630:	0007883a 	mov	r3,zero
 4006634:	dd401904 	addi	r21,sp,100
 4006638:	d8814215 	stw	r2,1288(sp)
 400663c:	802f883a 	mov	r23,r16
 4006640:	d8c14315 	stw	r3,1292(sp)
 4006644:	d8014b15 	stw	zero,1324(sp)
 4006648:	d8014815 	stw	zero,1312(sp)
 400664c:	d8014415 	stw	zero,1296(sp)
 4006650:	d8014715 	stw	zero,1308(sp)
 4006654:	dd400c15 	stw	r21,48(sp)
 4006658:	d8000e15 	stw	zero,56(sp)
 400665c:	d8000d15 	stw	zero,52(sp)
 4006660:	b8800007 	ldb	r2,0(r23)
 4006664:	10001926 	beq	r2,zero,40066cc <___vfprintf_internal_r+0x1dc>
 4006668:	00c00944 	movi	r3,37
 400666c:	10c01726 	beq	r2,r3,40066cc <___vfprintf_internal_r+0x1dc>
 4006670:	b821883a 	mov	r16,r23
 4006674:	00000106 	br	400667c <___vfprintf_internal_r+0x18c>
 4006678:	10c00326 	beq	r2,r3,4006688 <___vfprintf_internal_r+0x198>
 400667c:	84000044 	addi	r16,r16,1
 4006680:	80800007 	ldb	r2,0(r16)
 4006684:	103ffc1e 	bne	r2,zero,4006678 <___vfprintf_internal_r+0x188>
 4006688:	85e7c83a 	sub	r19,r16,r23
 400668c:	98000e26 	beq	r19,zero,40066c8 <___vfprintf_internal_r+0x1d8>
 4006690:	dc800e17 	ldw	r18,56(sp)
 4006694:	dc400d17 	ldw	r17,52(sp)
 4006698:	008001c4 	movi	r2,7
 400669c:	94e5883a 	add	r18,r18,r19
 40066a0:	8c400044 	addi	r17,r17,1
 40066a4:	adc00015 	stw	r23,0(r21)
 40066a8:	dc800e15 	stw	r18,56(sp)
 40066ac:	acc00115 	stw	r19,4(r21)
 40066b0:	dc400d15 	stw	r17,52(sp)
 40066b4:	14428b16 	blt	r2,r17,40070e4 <___vfprintf_internal_r+0xbf4>
 40066b8:	ad400204 	addi	r21,r21,8
 40066bc:	d9014b17 	ldw	r4,1324(sp)
 40066c0:	24c9883a 	add	r4,r4,r19
 40066c4:	d9014b15 	stw	r4,1324(sp)
 40066c8:	802f883a 	mov	r23,r16
 40066cc:	b8800007 	ldb	r2,0(r23)
 40066d0:	10013c26 	beq	r2,zero,4006bc4 <___vfprintf_internal_r+0x6d4>
 40066d4:	bdc00044 	addi	r23,r23,1
 40066d8:	d8000405 	stb	zero,16(sp)
 40066dc:	b8c00007 	ldb	r3,0(r23)
 40066e0:	04ffffc4 	movi	r19,-1
 40066e4:	d8014c15 	stw	zero,1328(sp)
 40066e8:	d8014a15 	stw	zero,1320(sp)
 40066ec:	d8c14d15 	stw	r3,1332(sp)
 40066f0:	bdc00044 	addi	r23,r23,1
 40066f4:	d9414d17 	ldw	r5,1332(sp)
 40066f8:	00801604 	movi	r2,88
 40066fc:	28fff804 	addi	r3,r5,-32
 4006700:	10c06036 	bltu	r2,r3,4006884 <___vfprintf_internal_r+0x394>
 4006704:	18c5883a 	add	r2,r3,r3
 4006708:	1085883a 	add	r2,r2,r2
 400670c:	00c10034 	movhi	r3,1024
 4006710:	18d9c804 	addi	r3,r3,26400
 4006714:	10c5883a 	add	r2,r2,r3
 4006718:	11000017 	ldw	r4,0(r2)
 400671c:	2000683a 	jmp	r4
 4006720:	04007694 	movui	r16,474
 4006724:	04006884 	movi	r16,418
 4006728:	04006884 	movi	r16,418
 400672c:	04007680 	call	400768 <__alt_mem_epcs+0x400768>
 4006730:	04006884 	movi	r16,418
 4006734:	04006884 	movi	r16,418
 4006738:	04006884 	movi	r16,418
 400673c:	04006884 	movi	r16,418
 4006740:	04006884 	movi	r16,418
 4006744:	04006884 	movi	r16,418
 4006748:	04007460 	cmpeqi	r16,zero,465
 400674c:	04007670 	cmpltui	r16,zero,473
 4006750:	04006884 	movi	r16,418
 4006754:	04007478 	rdprs	r16,zero,465
 4006758:	0400770c 	andi	r16,zero,476
 400675c:	04006884 	movi	r16,418
 4006760:	040076f8 	rdprs	r16,zero,475
 4006764:	040076c0 	call	40076c <__alt_mem_epcs+0x40076c>
 4006768:	040076c0 	call	40076c <__alt_mem_epcs+0x40076c>
 400676c:	040076c0 	call	40076c <__alt_mem_epcs+0x40076c>
 4006770:	040076c0 	call	40076c <__alt_mem_epcs+0x40076c>
 4006774:	040076c0 	call	40076c <__alt_mem_epcs+0x40076c>
 4006778:	040076c0 	call	40076c <__alt_mem_epcs+0x40076c>
 400677c:	040076c0 	call	40076c <__alt_mem_epcs+0x40076c>
 4006780:	040076c0 	call	40076c <__alt_mem_epcs+0x40076c>
 4006784:	040076c0 	call	40076c <__alt_mem_epcs+0x40076c>
 4006788:	04006884 	movi	r16,418
 400678c:	04006884 	movi	r16,418
 4006790:	04006884 	movi	r16,418
 4006794:	04006884 	movi	r16,418
 4006798:	04006884 	movi	r16,418
 400679c:	04006884 	movi	r16,418
 40067a0:	04006884 	movi	r16,418
 40067a4:	04006884 	movi	r16,418
 40067a8:	04006884 	movi	r16,418
 40067ac:	04006884 	movi	r16,418
 40067b0:	04006edc 	xori	r16,zero,443
 40067b4:	04007548 	cmpgei	r16,zero,469
 40067b8:	04006884 	movi	r16,418
 40067bc:	04007548 	cmpgei	r16,zero,469
 40067c0:	04006884 	movi	r16,418
 40067c4:	04006884 	movi	r16,418
 40067c8:	04006884 	movi	r16,418
 40067cc:	04006884 	movi	r16,418
 40067d0:	040076ac 	andhi	r16,zero,474
 40067d4:	04006884 	movi	r16,418
 40067d8:	04006884 	movi	r16,418
 40067dc:	04006f90 	cmplti	r16,zero,446
 40067e0:	04006884 	movi	r16,418
 40067e4:	04006884 	movi	r16,418
 40067e8:	04006884 	movi	r16,418
 40067ec:	04006884 	movi	r16,418
 40067f0:	04006884 	movi	r16,418
 40067f4:	04006fdc 	xori	r16,zero,447
 40067f8:	04006884 	movi	r16,418
 40067fc:	04006884 	movi	r16,418
 4006800:	040075fc 	xorhi	r16,zero,471
 4006804:	04006884 	movi	r16,418
 4006808:	04006884 	movi	r16,418
 400680c:	04006884 	movi	r16,418
 4006810:	04006884 	movi	r16,418
 4006814:	04006884 	movi	r16,418
 4006818:	04006884 	movi	r16,418
 400681c:	04006884 	movi	r16,418
 4006820:	04006884 	movi	r16,418
 4006824:	04006884 	movi	r16,418
 4006828:	04006884 	movi	r16,418
 400682c:	040075d0 	cmplti	r16,zero,471
 4006830:	04006ee8 	cmpgeui	r16,zero,443
 4006834:	04007548 	cmpgei	r16,zero,469
 4006838:	04007548 	cmpgei	r16,zero,469
 400683c:	04007548 	cmpgei	r16,zero,469
 4006840:	04007534 	movhi	r16,468
 4006844:	04006ee8 	cmpgeui	r16,zero,443
 4006848:	04006884 	movi	r16,418
 400684c:	04006884 	movi	r16,418
 4006850:	040074bc 	xorhi	r16,zero,466
 4006854:	04006884 	movi	r16,418
 4006858:	0400748c 	andi	r16,zero,466
 400685c:	04006f9c 	xori	r16,zero,446
 4006860:	040074ec 	andhi	r16,zero,467
 4006864:	040074d8 	cmpnei	r16,zero,467
 4006868:	04006884 	movi	r16,418
 400686c:	04007768 	cmpgeui	r16,zero,477
 4006870:	04006884 	movi	r16,418
 4006874:	04006fe8 	cmpgeui	r16,zero,447
 4006878:	04006884 	movi	r16,418
 400687c:	04006884 	movi	r16,418
 4006880:	04007660 	cmpeqi	r16,zero,473
 4006884:	d9014d17 	ldw	r4,1332(sp)
 4006888:	2000ce26 	beq	r4,zero,4006bc4 <___vfprintf_internal_r+0x6d4>
 400688c:	01400044 	movi	r5,1
 4006890:	d9800f04 	addi	r6,sp,60
 4006894:	d9c14015 	stw	r7,1280(sp)
 4006898:	d9414515 	stw	r5,1300(sp)
 400689c:	d9814115 	stw	r6,1284(sp)
 40068a0:	280f883a 	mov	r7,r5
 40068a4:	d9000f05 	stb	r4,60(sp)
 40068a8:	d8000405 	stb	zero,16(sp)
 40068ac:	d8014615 	stw	zero,1304(sp)
 40068b0:	d8c14c17 	ldw	r3,1328(sp)
 40068b4:	1880008c 	andi	r2,r3,2
 40068b8:	1005003a 	cmpeq	r2,r2,zero
 40068bc:	d8815015 	stw	r2,1344(sp)
 40068c0:	1000031e 	bne	r2,zero,40068d0 <___vfprintf_internal_r+0x3e0>
 40068c4:	d9014517 	ldw	r4,1300(sp)
 40068c8:	21000084 	addi	r4,r4,2
 40068cc:	d9014515 	stw	r4,1300(sp)
 40068d0:	d9414c17 	ldw	r5,1328(sp)
 40068d4:	2940210c 	andi	r5,r5,132
 40068d8:	d9414e15 	stw	r5,1336(sp)
 40068dc:	28002d1e 	bne	r5,zero,4006994 <___vfprintf_internal_r+0x4a4>
 40068e0:	d9814a17 	ldw	r6,1320(sp)
 40068e4:	d8814517 	ldw	r2,1300(sp)
 40068e8:	30a1c83a 	sub	r16,r6,r2
 40068ec:	0400290e 	bge	zero,r16,4006994 <___vfprintf_internal_r+0x4a4>
 40068f0:	00800404 	movi	r2,16
 40068f4:	1404580e 	bge	r2,r16,4007a58 <___vfprintf_internal_r+0x1568>
 40068f8:	dc800e17 	ldw	r18,56(sp)
 40068fc:	dc400d17 	ldw	r17,52(sp)
 4006900:	1027883a 	mov	r19,r2
 4006904:	07010074 	movhi	fp,1025
 4006908:	e704c784 	addi	fp,fp,4894
 400690c:	050001c4 	movi	r20,7
 4006910:	00000306 	br	4006920 <___vfprintf_internal_r+0x430>
 4006914:	843ffc04 	addi	r16,r16,-16
 4006918:	ad400204 	addi	r21,r21,8
 400691c:	9c00130e 	bge	r19,r16,400696c <___vfprintf_internal_r+0x47c>
 4006920:	94800404 	addi	r18,r18,16
 4006924:	8c400044 	addi	r17,r17,1
 4006928:	af000015 	stw	fp,0(r21)
 400692c:	acc00115 	stw	r19,4(r21)
 4006930:	dc800e15 	stw	r18,56(sp)
 4006934:	dc400d15 	stw	r17,52(sp)
 4006938:	a47ff60e 	bge	r20,r17,4006914 <___vfprintf_internal_r+0x424>
 400693c:	d9014f17 	ldw	r4,1340(sp)
 4006940:	b00b883a 	mov	r5,r22
 4006944:	d9800c04 	addi	r6,sp,48
 4006948:	d9c15115 	stw	r7,1348(sp)
 400694c:	40064980 	call	4006498 <__sprint_r>
 4006950:	d9c15117 	ldw	r7,1348(sp)
 4006954:	10009e1e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 4006958:	843ffc04 	addi	r16,r16,-16
 400695c:	dc800e17 	ldw	r18,56(sp)
 4006960:	dc400d17 	ldw	r17,52(sp)
 4006964:	dd401904 	addi	r21,sp,100
 4006968:	9c3fed16 	blt	r19,r16,4006920 <___vfprintf_internal_r+0x430>
 400696c:	9425883a 	add	r18,r18,r16
 4006970:	8c400044 	addi	r17,r17,1
 4006974:	008001c4 	movi	r2,7
 4006978:	af000015 	stw	fp,0(r21)
 400697c:	ac000115 	stw	r16,4(r21)
 4006980:	dc800e15 	stw	r18,56(sp)
 4006984:	dc400d15 	stw	r17,52(sp)
 4006988:	1441f516 	blt	r2,r17,4007160 <___vfprintf_internal_r+0xc70>
 400698c:	ad400204 	addi	r21,r21,8
 4006990:	00000206 	br	400699c <___vfprintf_internal_r+0x4ac>
 4006994:	dc800e17 	ldw	r18,56(sp)
 4006998:	dc400d17 	ldw	r17,52(sp)
 400699c:	d8800407 	ldb	r2,16(sp)
 40069a0:	10000b26 	beq	r2,zero,40069d0 <___vfprintf_internal_r+0x4e0>
 40069a4:	00800044 	movi	r2,1
 40069a8:	94800044 	addi	r18,r18,1
 40069ac:	8c400044 	addi	r17,r17,1
 40069b0:	a8800115 	stw	r2,4(r21)
 40069b4:	d8c00404 	addi	r3,sp,16
 40069b8:	008001c4 	movi	r2,7
 40069bc:	a8c00015 	stw	r3,0(r21)
 40069c0:	dc800e15 	stw	r18,56(sp)
 40069c4:	dc400d15 	stw	r17,52(sp)
 40069c8:	1441da16 	blt	r2,r17,4007134 <___vfprintf_internal_r+0xc44>
 40069cc:	ad400204 	addi	r21,r21,8
 40069d0:	d9015017 	ldw	r4,1344(sp)
 40069d4:	20000b1e 	bne	r4,zero,4006a04 <___vfprintf_internal_r+0x514>
 40069d8:	d8800444 	addi	r2,sp,17
 40069dc:	94800084 	addi	r18,r18,2
 40069e0:	8c400044 	addi	r17,r17,1
 40069e4:	a8800015 	stw	r2,0(r21)
 40069e8:	00c00084 	movi	r3,2
 40069ec:	008001c4 	movi	r2,7
 40069f0:	a8c00115 	stw	r3,4(r21)
 40069f4:	dc800e15 	stw	r18,56(sp)
 40069f8:	dc400d15 	stw	r17,52(sp)
 40069fc:	1441c216 	blt	r2,r17,4007108 <___vfprintf_internal_r+0xc18>
 4006a00:	ad400204 	addi	r21,r21,8
 4006a04:	d9414e17 	ldw	r5,1336(sp)
 4006a08:	00802004 	movi	r2,128
 4006a0c:	2880b126 	beq	r5,r2,4006cd4 <___vfprintf_internal_r+0x7e4>
 4006a10:	d8c14617 	ldw	r3,1304(sp)
 4006a14:	19e1c83a 	sub	r16,r3,r7
 4006a18:	0400260e 	bge	zero,r16,4006ab4 <___vfprintf_internal_r+0x5c4>
 4006a1c:	00800404 	movi	r2,16
 4006a20:	1403c90e 	bge	r2,r16,4007948 <___vfprintf_internal_r+0x1458>
 4006a24:	1027883a 	mov	r19,r2
 4006a28:	07010074 	movhi	fp,1025
 4006a2c:	e704c384 	addi	fp,fp,4878
 4006a30:	050001c4 	movi	r20,7
 4006a34:	00000306 	br	4006a44 <___vfprintf_internal_r+0x554>
 4006a38:	843ffc04 	addi	r16,r16,-16
 4006a3c:	ad400204 	addi	r21,r21,8
 4006a40:	9c00130e 	bge	r19,r16,4006a90 <___vfprintf_internal_r+0x5a0>
 4006a44:	94800404 	addi	r18,r18,16
 4006a48:	8c400044 	addi	r17,r17,1
 4006a4c:	af000015 	stw	fp,0(r21)
 4006a50:	acc00115 	stw	r19,4(r21)
 4006a54:	dc800e15 	stw	r18,56(sp)
 4006a58:	dc400d15 	stw	r17,52(sp)
 4006a5c:	a47ff60e 	bge	r20,r17,4006a38 <___vfprintf_internal_r+0x548>
 4006a60:	d9014f17 	ldw	r4,1340(sp)
 4006a64:	b00b883a 	mov	r5,r22
 4006a68:	d9800c04 	addi	r6,sp,48
 4006a6c:	d9c15115 	stw	r7,1348(sp)
 4006a70:	40064980 	call	4006498 <__sprint_r>
 4006a74:	d9c15117 	ldw	r7,1348(sp)
 4006a78:	1000551e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 4006a7c:	843ffc04 	addi	r16,r16,-16
 4006a80:	dc800e17 	ldw	r18,56(sp)
 4006a84:	dc400d17 	ldw	r17,52(sp)
 4006a88:	dd401904 	addi	r21,sp,100
 4006a8c:	9c3fed16 	blt	r19,r16,4006a44 <___vfprintf_internal_r+0x554>
 4006a90:	9425883a 	add	r18,r18,r16
 4006a94:	8c400044 	addi	r17,r17,1
 4006a98:	008001c4 	movi	r2,7
 4006a9c:	af000015 	stw	fp,0(r21)
 4006aa0:	ac000115 	stw	r16,4(r21)
 4006aa4:	dc800e15 	stw	r18,56(sp)
 4006aa8:	dc400d15 	stw	r17,52(sp)
 4006aac:	14418216 	blt	r2,r17,40070b8 <___vfprintf_internal_r+0xbc8>
 4006ab0:	ad400204 	addi	r21,r21,8
 4006ab4:	d9014c17 	ldw	r4,1328(sp)
 4006ab8:	2080400c 	andi	r2,r4,256
 4006abc:	10004a1e 	bne	r2,zero,4006be8 <___vfprintf_internal_r+0x6f8>
 4006ac0:	d9414117 	ldw	r5,1284(sp)
 4006ac4:	91e5883a 	add	r18,r18,r7
 4006ac8:	8c400044 	addi	r17,r17,1
 4006acc:	008001c4 	movi	r2,7
 4006ad0:	a9400015 	stw	r5,0(r21)
 4006ad4:	a9c00115 	stw	r7,4(r21)
 4006ad8:	dc800e15 	stw	r18,56(sp)
 4006adc:	dc400d15 	stw	r17,52(sp)
 4006ae0:	14416716 	blt	r2,r17,4007080 <___vfprintf_internal_r+0xb90>
 4006ae4:	a8c00204 	addi	r3,r21,8
 4006ae8:	d9814c17 	ldw	r6,1328(sp)
 4006aec:	3080010c 	andi	r2,r6,4
 4006af0:	10002826 	beq	r2,zero,4006b94 <___vfprintf_internal_r+0x6a4>
 4006af4:	d8814a17 	ldw	r2,1320(sp)
 4006af8:	d9014517 	ldw	r4,1300(sp)
 4006afc:	1121c83a 	sub	r16,r2,r4
 4006b00:	0400240e 	bge	zero,r16,4006b94 <___vfprintf_internal_r+0x6a4>
 4006b04:	00800404 	movi	r2,16
 4006b08:	14044f0e 	bge	r2,r16,4007c48 <___vfprintf_internal_r+0x1758>
 4006b0c:	dc400d17 	ldw	r17,52(sp)
 4006b10:	1027883a 	mov	r19,r2
 4006b14:	07010074 	movhi	fp,1025
 4006b18:	e704c784 	addi	fp,fp,4894
 4006b1c:	050001c4 	movi	r20,7
 4006b20:	00000306 	br	4006b30 <___vfprintf_internal_r+0x640>
 4006b24:	843ffc04 	addi	r16,r16,-16
 4006b28:	18c00204 	addi	r3,r3,8
 4006b2c:	9c00110e 	bge	r19,r16,4006b74 <___vfprintf_internal_r+0x684>
 4006b30:	94800404 	addi	r18,r18,16
 4006b34:	8c400044 	addi	r17,r17,1
 4006b38:	1f000015 	stw	fp,0(r3)
 4006b3c:	1cc00115 	stw	r19,4(r3)
 4006b40:	dc800e15 	stw	r18,56(sp)
 4006b44:	dc400d15 	stw	r17,52(sp)
 4006b48:	a47ff60e 	bge	r20,r17,4006b24 <___vfprintf_internal_r+0x634>
 4006b4c:	d9014f17 	ldw	r4,1340(sp)
 4006b50:	b00b883a 	mov	r5,r22
 4006b54:	d9800c04 	addi	r6,sp,48
 4006b58:	40064980 	call	4006498 <__sprint_r>
 4006b5c:	10001c1e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 4006b60:	843ffc04 	addi	r16,r16,-16
 4006b64:	dc800e17 	ldw	r18,56(sp)
 4006b68:	dc400d17 	ldw	r17,52(sp)
 4006b6c:	d8c01904 	addi	r3,sp,100
 4006b70:	9c3fef16 	blt	r19,r16,4006b30 <___vfprintf_internal_r+0x640>
 4006b74:	9425883a 	add	r18,r18,r16
 4006b78:	8c400044 	addi	r17,r17,1
 4006b7c:	008001c4 	movi	r2,7
 4006b80:	1f000015 	stw	fp,0(r3)
 4006b84:	1c000115 	stw	r16,4(r3)
 4006b88:	dc800e15 	stw	r18,56(sp)
 4006b8c:	dc400d15 	stw	r17,52(sp)
 4006b90:	1440cb16 	blt	r2,r17,4006ec0 <___vfprintf_internal_r+0x9d0>
 4006b94:	d8814a17 	ldw	r2,1320(sp)
 4006b98:	d9414517 	ldw	r5,1300(sp)
 4006b9c:	1140010e 	bge	r2,r5,4006ba4 <___vfprintf_internal_r+0x6b4>
 4006ba0:	2805883a 	mov	r2,r5
 4006ba4:	d9814b17 	ldw	r6,1324(sp)
 4006ba8:	308d883a 	add	r6,r6,r2
 4006bac:	d9814b15 	stw	r6,1324(sp)
 4006bb0:	90013b1e 	bne	r18,zero,40070a0 <___vfprintf_internal_r+0xbb0>
 4006bb4:	d9c14017 	ldw	r7,1280(sp)
 4006bb8:	dd401904 	addi	r21,sp,100
 4006bbc:	d8000d15 	stw	zero,52(sp)
 4006bc0:	003ea706 	br	4006660 <___vfprintf_internal_r+0x170>
 4006bc4:	d8800e17 	ldw	r2,56(sp)
 4006bc8:	10053f1e 	bne	r2,zero,40080c8 <___vfprintf_internal_r+0x1bd8>
 4006bcc:	d8000d15 	stw	zero,52(sp)
 4006bd0:	b080030b 	ldhu	r2,12(r22)
 4006bd4:	1080100c 	andi	r2,r2,64
 4006bd8:	103e8726 	beq	r2,zero,40065f8 <___vfprintf_internal_r+0x108>
 4006bdc:	00bfffc4 	movi	r2,-1
 4006be0:	d8814b15 	stw	r2,1324(sp)
 4006be4:	003e8406 	br	40065f8 <___vfprintf_internal_r+0x108>
 4006be8:	d9814d17 	ldw	r6,1332(sp)
 4006bec:	00801944 	movi	r2,101
 4006bf0:	11806e16 	blt	r2,r6,4006dac <___vfprintf_internal_r+0x8bc>
 4006bf4:	d9414717 	ldw	r5,1308(sp)
 4006bf8:	00c00044 	movi	r3,1
 4006bfc:	1943430e 	bge	r3,r5,400790c <___vfprintf_internal_r+0x141c>
 4006c00:	d8814117 	ldw	r2,1284(sp)
 4006c04:	94800044 	addi	r18,r18,1
 4006c08:	8c400044 	addi	r17,r17,1
 4006c0c:	a8800015 	stw	r2,0(r21)
 4006c10:	008001c4 	movi	r2,7
 4006c14:	a8c00115 	stw	r3,4(r21)
 4006c18:	dc800e15 	stw	r18,56(sp)
 4006c1c:	dc400d15 	stw	r17,52(sp)
 4006c20:	1441ca16 	blt	r2,r17,400734c <___vfprintf_internal_r+0xe5c>
 4006c24:	a8c00204 	addi	r3,r21,8
 4006c28:	d9014917 	ldw	r4,1316(sp)
 4006c2c:	00800044 	movi	r2,1
 4006c30:	94800044 	addi	r18,r18,1
 4006c34:	8c400044 	addi	r17,r17,1
 4006c38:	18800115 	stw	r2,4(r3)
 4006c3c:	008001c4 	movi	r2,7
 4006c40:	19000015 	stw	r4,0(r3)
 4006c44:	dc800e15 	stw	r18,56(sp)
 4006c48:	dc400d15 	stw	r17,52(sp)
 4006c4c:	1441b616 	blt	r2,r17,4007328 <___vfprintf_internal_r+0xe38>
 4006c50:	1cc00204 	addi	r19,r3,8
 4006c54:	d9014217 	ldw	r4,1288(sp)
 4006c58:	d9414317 	ldw	r5,1292(sp)
 4006c5c:	000d883a 	mov	r6,zero
 4006c60:	000f883a 	mov	r7,zero
 4006c64:	40038e00 	call	40038e0 <__nedf2>
 4006c68:	10017426 	beq	r2,zero,400723c <___vfprintf_internal_r+0xd4c>
 4006c6c:	d9414717 	ldw	r5,1308(sp)
 4006c70:	d9814117 	ldw	r6,1284(sp)
 4006c74:	8c400044 	addi	r17,r17,1
 4006c78:	2c85883a 	add	r2,r5,r18
 4006c7c:	14bfffc4 	addi	r18,r2,-1
 4006c80:	28bfffc4 	addi	r2,r5,-1
 4006c84:	30c00044 	addi	r3,r6,1
 4006c88:	98800115 	stw	r2,4(r19)
 4006c8c:	008001c4 	movi	r2,7
 4006c90:	98c00015 	stw	r3,0(r19)
 4006c94:	dc800e15 	stw	r18,56(sp)
 4006c98:	dc400d15 	stw	r17,52(sp)
 4006c9c:	14418e16 	blt	r2,r17,40072d8 <___vfprintf_internal_r+0xde8>
 4006ca0:	9cc00204 	addi	r19,r19,8
 4006ca4:	d9414817 	ldw	r5,1312(sp)
 4006ca8:	d8800804 	addi	r2,sp,32
 4006cac:	8c400044 	addi	r17,r17,1
 4006cb0:	9165883a 	add	r18,r18,r5
 4006cb4:	98800015 	stw	r2,0(r19)
 4006cb8:	008001c4 	movi	r2,7
 4006cbc:	99400115 	stw	r5,4(r19)
 4006cc0:	dc800e15 	stw	r18,56(sp)
 4006cc4:	dc400d15 	stw	r17,52(sp)
 4006cc8:	1440ed16 	blt	r2,r17,4007080 <___vfprintf_internal_r+0xb90>
 4006ccc:	98c00204 	addi	r3,r19,8
 4006cd0:	003f8506 	br	4006ae8 <___vfprintf_internal_r+0x5f8>
 4006cd4:	d9814a17 	ldw	r6,1320(sp)
 4006cd8:	d8814517 	ldw	r2,1300(sp)
 4006cdc:	30a1c83a 	sub	r16,r6,r2
 4006ce0:	043f4b0e 	bge	zero,r16,4006a10 <___vfprintf_internal_r+0x520>
 4006ce4:	00800404 	movi	r2,16
 4006ce8:	1404340e 	bge	r2,r16,4007dbc <___vfprintf_internal_r+0x18cc>
 4006cec:	1027883a 	mov	r19,r2
 4006cf0:	07010074 	movhi	fp,1025
 4006cf4:	e704c384 	addi	fp,fp,4878
 4006cf8:	050001c4 	movi	r20,7
 4006cfc:	00000306 	br	4006d0c <___vfprintf_internal_r+0x81c>
 4006d00:	843ffc04 	addi	r16,r16,-16
 4006d04:	ad400204 	addi	r21,r21,8
 4006d08:	9c00130e 	bge	r19,r16,4006d58 <___vfprintf_internal_r+0x868>
 4006d0c:	94800404 	addi	r18,r18,16
 4006d10:	8c400044 	addi	r17,r17,1
 4006d14:	af000015 	stw	fp,0(r21)
 4006d18:	acc00115 	stw	r19,4(r21)
 4006d1c:	dc800e15 	stw	r18,56(sp)
 4006d20:	dc400d15 	stw	r17,52(sp)
 4006d24:	a47ff60e 	bge	r20,r17,4006d00 <___vfprintf_internal_r+0x810>
 4006d28:	d9014f17 	ldw	r4,1340(sp)
 4006d2c:	b00b883a 	mov	r5,r22
 4006d30:	d9800c04 	addi	r6,sp,48
 4006d34:	d9c15115 	stw	r7,1348(sp)
 4006d38:	40064980 	call	4006498 <__sprint_r>
 4006d3c:	d9c15117 	ldw	r7,1348(sp)
 4006d40:	103fa31e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 4006d44:	843ffc04 	addi	r16,r16,-16
 4006d48:	dc800e17 	ldw	r18,56(sp)
 4006d4c:	dc400d17 	ldw	r17,52(sp)
 4006d50:	dd401904 	addi	r21,sp,100
 4006d54:	9c3fed16 	blt	r19,r16,4006d0c <___vfprintf_internal_r+0x81c>
 4006d58:	9425883a 	add	r18,r18,r16
 4006d5c:	8c400044 	addi	r17,r17,1
 4006d60:	008001c4 	movi	r2,7
 4006d64:	af000015 	stw	fp,0(r21)
 4006d68:	ac000115 	stw	r16,4(r21)
 4006d6c:	dc800e15 	stw	r18,56(sp)
 4006d70:	dc400d15 	stw	r17,52(sp)
 4006d74:	14416116 	blt	r2,r17,40072fc <___vfprintf_internal_r+0xe0c>
 4006d78:	ad400204 	addi	r21,r21,8
 4006d7c:	003f2406 	br	4006a10 <___vfprintf_internal_r+0x520>
 4006d80:	d9014f17 	ldw	r4,1340(sp)
 4006d84:	40045a80 	call	40045a8 <__sinit>
 4006d88:	d9c15117 	ldw	r7,1348(sp)
 4006d8c:	003def06 	br	400654c <___vfprintf_internal_r+0x5c>
 4006d90:	d9014f17 	ldw	r4,1340(sp)
 4006d94:	b00b883a 	mov	r5,r22
 4006d98:	d9c15115 	stw	r7,1348(sp)
 4006d9c:	40084380 	call	4008438 <__swsetup_r>
 4006da0:	d9c15117 	ldw	r7,1348(sp)
 4006da4:	103dee26 	beq	r2,zero,4006560 <___vfprintf_internal_r+0x70>
 4006da8:	003f8c06 	br	4006bdc <___vfprintf_internal_r+0x6ec>
 4006dac:	d9014217 	ldw	r4,1288(sp)
 4006db0:	d9414317 	ldw	r5,1292(sp)
 4006db4:	000d883a 	mov	r6,zero
 4006db8:	000f883a 	mov	r7,zero
 4006dbc:	40038580 	call	4003858 <__eqdf2>
 4006dc0:	1000f21e 	bne	r2,zero,400718c <___vfprintf_internal_r+0xc9c>
 4006dc4:	00810074 	movhi	r2,1025
 4006dc8:	1084c304 	addi	r2,r2,4876
 4006dcc:	94800044 	addi	r18,r18,1
 4006dd0:	8c400044 	addi	r17,r17,1
 4006dd4:	a8800015 	stw	r2,0(r21)
 4006dd8:	00c00044 	movi	r3,1
 4006ddc:	008001c4 	movi	r2,7
 4006de0:	a8c00115 	stw	r3,4(r21)
 4006de4:	dc800e15 	stw	r18,56(sp)
 4006de8:	dc400d15 	stw	r17,52(sp)
 4006dec:	1442fa16 	blt	r2,r17,40079d8 <___vfprintf_internal_r+0x14e8>
 4006df0:	a8c00204 	addi	r3,r21,8
 4006df4:	d8800517 	ldw	r2,20(sp)
 4006df8:	d9014717 	ldw	r4,1308(sp)
 4006dfc:	11015c0e 	bge	r2,r4,4007370 <___vfprintf_internal_r+0xe80>
 4006e00:	dc400d17 	ldw	r17,52(sp)
 4006e04:	d9814917 	ldw	r6,1316(sp)
 4006e08:	00800044 	movi	r2,1
 4006e0c:	94800044 	addi	r18,r18,1
 4006e10:	8c400044 	addi	r17,r17,1
 4006e14:	18800115 	stw	r2,4(r3)
 4006e18:	008001c4 	movi	r2,7
 4006e1c:	19800015 	stw	r6,0(r3)
 4006e20:	dc800e15 	stw	r18,56(sp)
 4006e24:	dc400d15 	stw	r17,52(sp)
 4006e28:	14431016 	blt	r2,r17,4007a6c <___vfprintf_internal_r+0x157c>
 4006e2c:	18c00204 	addi	r3,r3,8
 4006e30:	d8814717 	ldw	r2,1308(sp)
 4006e34:	143fffc4 	addi	r16,r2,-1
 4006e38:	043f2b0e 	bge	zero,r16,4006ae8 <___vfprintf_internal_r+0x5f8>
 4006e3c:	00800404 	movi	r2,16
 4006e40:	1402a20e 	bge	r2,r16,40078cc <___vfprintf_internal_r+0x13dc>
 4006e44:	dc400d17 	ldw	r17,52(sp)
 4006e48:	1027883a 	mov	r19,r2
 4006e4c:	07010074 	movhi	fp,1025
 4006e50:	e704c384 	addi	fp,fp,4878
 4006e54:	050001c4 	movi	r20,7
 4006e58:	00000306 	br	4006e68 <___vfprintf_internal_r+0x978>
 4006e5c:	18c00204 	addi	r3,r3,8
 4006e60:	843ffc04 	addi	r16,r16,-16
 4006e64:	9c029c0e 	bge	r19,r16,40078d8 <___vfprintf_internal_r+0x13e8>
 4006e68:	94800404 	addi	r18,r18,16
 4006e6c:	8c400044 	addi	r17,r17,1
 4006e70:	1f000015 	stw	fp,0(r3)
 4006e74:	1cc00115 	stw	r19,4(r3)
 4006e78:	dc800e15 	stw	r18,56(sp)
 4006e7c:	dc400d15 	stw	r17,52(sp)
 4006e80:	a47ff60e 	bge	r20,r17,4006e5c <___vfprintf_internal_r+0x96c>
 4006e84:	d9014f17 	ldw	r4,1340(sp)
 4006e88:	b00b883a 	mov	r5,r22
 4006e8c:	d9800c04 	addi	r6,sp,48
 4006e90:	40064980 	call	4006498 <__sprint_r>
 4006e94:	103f4e1e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 4006e98:	dc800e17 	ldw	r18,56(sp)
 4006e9c:	dc400d17 	ldw	r17,52(sp)
 4006ea0:	d8c01904 	addi	r3,sp,100
 4006ea4:	003fee06 	br	4006e60 <___vfprintf_internal_r+0x970>
 4006ea8:	d8802c0b 	ldhu	r2,176(sp)
 4006eac:	00ffffc4 	movi	r3,-1
 4006eb0:	d8c14b15 	stw	r3,1324(sp)
 4006eb4:	1080100c 	andi	r2,r2,64
 4006eb8:	103dcc1e 	bne	r2,zero,40065ec <___vfprintf_internal_r+0xfc>
 4006ebc:	003dce06 	br	40065f8 <___vfprintf_internal_r+0x108>
 4006ec0:	d9014f17 	ldw	r4,1340(sp)
 4006ec4:	b00b883a 	mov	r5,r22
 4006ec8:	d9800c04 	addi	r6,sp,48
 4006ecc:	40064980 	call	4006498 <__sprint_r>
 4006ed0:	103f3f1e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 4006ed4:	dc800e17 	ldw	r18,56(sp)
 4006ed8:	003f2e06 	br	4006b94 <___vfprintf_internal_r+0x6a4>
 4006edc:	d9414c17 	ldw	r5,1328(sp)
 4006ee0:	29400414 	ori	r5,r5,16
 4006ee4:	d9414c15 	stw	r5,1328(sp)
 4006ee8:	d9814c17 	ldw	r6,1328(sp)
 4006eec:	3080080c 	andi	r2,r6,32
 4006ef0:	10014f1e 	bne	r2,zero,4007430 <___vfprintf_internal_r+0xf40>
 4006ef4:	d8c14c17 	ldw	r3,1328(sp)
 4006ef8:	1880040c 	andi	r2,r3,16
 4006efc:	1002ea1e 	bne	r2,zero,4007aa8 <___vfprintf_internal_r+0x15b8>
 4006f00:	d9014c17 	ldw	r4,1328(sp)
 4006f04:	2080100c 	andi	r2,r4,64
 4006f08:	1002e726 	beq	r2,zero,4007aa8 <___vfprintf_internal_r+0x15b8>
 4006f0c:	3880000f 	ldh	r2,0(r7)
 4006f10:	39c00104 	addi	r7,r7,4
 4006f14:	d9c14015 	stw	r7,1280(sp)
 4006f18:	1023d7fa 	srai	r17,r2,31
 4006f1c:	1021883a 	mov	r16,r2
 4006f20:	88037216 	blt	r17,zero,4007cec <___vfprintf_internal_r+0x17fc>
 4006f24:	01000044 	movi	r4,1
 4006f28:	98000416 	blt	r19,zero,4006f3c <___vfprintf_internal_r+0xa4c>
 4006f2c:	d8c14c17 	ldw	r3,1328(sp)
 4006f30:	00bfdfc4 	movi	r2,-129
 4006f34:	1886703a 	and	r3,r3,r2
 4006f38:	d8c14c15 	stw	r3,1328(sp)
 4006f3c:	8444b03a 	or	r2,r16,r17
 4006f40:	1002261e 	bne	r2,zero,40077dc <___vfprintf_internal_r+0x12ec>
 4006f44:	9802251e 	bne	r19,zero,40077dc <___vfprintf_internal_r+0x12ec>
 4006f48:	20803fcc 	andi	r2,r4,255
 4006f4c:	10029b26 	beq	r2,zero,40079bc <___vfprintf_internal_r+0x14cc>
 4006f50:	d8c01904 	addi	r3,sp,100
 4006f54:	dd000f04 	addi	r20,sp,60
 4006f58:	d8c14115 	stw	r3,1284(sp)
 4006f5c:	d8c14117 	ldw	r3,1284(sp)
 4006f60:	dcc14515 	stw	r19,1300(sp)
 4006f64:	a0c5c83a 	sub	r2,r20,r3
 4006f68:	11c00a04 	addi	r7,r2,40
 4006f6c:	99c0010e 	bge	r19,r7,4006f74 <___vfprintf_internal_r+0xa84>
 4006f70:	d9c14515 	stw	r7,1300(sp)
 4006f74:	dcc14615 	stw	r19,1304(sp)
 4006f78:	d8800407 	ldb	r2,16(sp)
 4006f7c:	103e4c26 	beq	r2,zero,40068b0 <___vfprintf_internal_r+0x3c0>
 4006f80:	d8814517 	ldw	r2,1300(sp)
 4006f84:	10800044 	addi	r2,r2,1
 4006f88:	d8814515 	stw	r2,1300(sp)
 4006f8c:	003e4806 	br	40068b0 <___vfprintf_internal_r+0x3c0>
 4006f90:	d9814c17 	ldw	r6,1328(sp)
 4006f94:	31800414 	ori	r6,r6,16
 4006f98:	d9814c15 	stw	r6,1328(sp)
 4006f9c:	d8c14c17 	ldw	r3,1328(sp)
 4006fa0:	1880080c 	andi	r2,r3,32
 4006fa4:	1001271e 	bne	r2,zero,4007444 <___vfprintf_internal_r+0xf54>
 4006fa8:	d9414c17 	ldw	r5,1328(sp)
 4006fac:	2880040c 	andi	r2,r5,16
 4006fb0:	1002b61e 	bne	r2,zero,4007a8c <___vfprintf_internal_r+0x159c>
 4006fb4:	d9814c17 	ldw	r6,1328(sp)
 4006fb8:	3080100c 	andi	r2,r6,64
 4006fbc:	1002b326 	beq	r2,zero,4007a8c <___vfprintf_internal_r+0x159c>
 4006fc0:	3c00000b 	ldhu	r16,0(r7)
 4006fc4:	0009883a 	mov	r4,zero
 4006fc8:	39c00104 	addi	r7,r7,4
 4006fcc:	0023883a 	mov	r17,zero
 4006fd0:	d9c14015 	stw	r7,1280(sp)
 4006fd4:	d8000405 	stb	zero,16(sp)
 4006fd8:	003fd306 	br	4006f28 <___vfprintf_internal_r+0xa38>
 4006fdc:	d9014c17 	ldw	r4,1328(sp)
 4006fe0:	21000414 	ori	r4,r4,16
 4006fe4:	d9014c15 	stw	r4,1328(sp)
 4006fe8:	d9414c17 	ldw	r5,1328(sp)
 4006fec:	2880080c 	andi	r2,r5,32
 4006ff0:	1001081e 	bne	r2,zero,4007414 <___vfprintf_internal_r+0xf24>
 4006ff4:	d8c14c17 	ldw	r3,1328(sp)
 4006ff8:	1880040c 	andi	r2,r3,16
 4006ffc:	1002b01e 	bne	r2,zero,4007ac0 <___vfprintf_internal_r+0x15d0>
 4007000:	d9014c17 	ldw	r4,1328(sp)
 4007004:	2080100c 	andi	r2,r4,64
 4007008:	1002ad26 	beq	r2,zero,4007ac0 <___vfprintf_internal_r+0x15d0>
 400700c:	3c00000b 	ldhu	r16,0(r7)
 4007010:	01000044 	movi	r4,1
 4007014:	39c00104 	addi	r7,r7,4
 4007018:	0023883a 	mov	r17,zero
 400701c:	d9c14015 	stw	r7,1280(sp)
 4007020:	d8000405 	stb	zero,16(sp)
 4007024:	003fc006 	br	4006f28 <___vfprintf_internal_r+0xa38>
 4007028:	d9014f17 	ldw	r4,1340(sp)
 400702c:	b00b883a 	mov	r5,r22
 4007030:	d9800c04 	addi	r6,sp,48
 4007034:	40064980 	call	4006498 <__sprint_r>
 4007038:	103ee51e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 400703c:	dc800e17 	ldw	r18,56(sp)
 4007040:	d8c01904 	addi	r3,sp,100
 4007044:	d9814c17 	ldw	r6,1328(sp)
 4007048:	3080004c 	andi	r2,r6,1
 400704c:	1005003a 	cmpeq	r2,r2,zero
 4007050:	103ea51e 	bne	r2,zero,4006ae8 <___vfprintf_internal_r+0x5f8>
 4007054:	00800044 	movi	r2,1
 4007058:	dc400d17 	ldw	r17,52(sp)
 400705c:	18800115 	stw	r2,4(r3)
 4007060:	d8814917 	ldw	r2,1316(sp)
 4007064:	94800044 	addi	r18,r18,1
 4007068:	8c400044 	addi	r17,r17,1
 400706c:	18800015 	stw	r2,0(r3)
 4007070:	008001c4 	movi	r2,7
 4007074:	dc800e15 	stw	r18,56(sp)
 4007078:	dc400d15 	stw	r17,52(sp)
 400707c:	14421e0e 	bge	r2,r17,40078f8 <___vfprintf_internal_r+0x1408>
 4007080:	d9014f17 	ldw	r4,1340(sp)
 4007084:	b00b883a 	mov	r5,r22
 4007088:	d9800c04 	addi	r6,sp,48
 400708c:	40064980 	call	4006498 <__sprint_r>
 4007090:	103ecf1e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 4007094:	dc800e17 	ldw	r18,56(sp)
 4007098:	d8c01904 	addi	r3,sp,100
 400709c:	003e9206 	br	4006ae8 <___vfprintf_internal_r+0x5f8>
 40070a0:	d9014f17 	ldw	r4,1340(sp)
 40070a4:	b00b883a 	mov	r5,r22
 40070a8:	d9800c04 	addi	r6,sp,48
 40070ac:	40064980 	call	4006498 <__sprint_r>
 40070b0:	103ec026 	beq	r2,zero,4006bb4 <___vfprintf_internal_r+0x6c4>
 40070b4:	003ec606 	br	4006bd0 <___vfprintf_internal_r+0x6e0>
 40070b8:	d9014f17 	ldw	r4,1340(sp)
 40070bc:	b00b883a 	mov	r5,r22
 40070c0:	d9800c04 	addi	r6,sp,48
 40070c4:	d9c15115 	stw	r7,1348(sp)
 40070c8:	40064980 	call	4006498 <__sprint_r>
 40070cc:	d9c15117 	ldw	r7,1348(sp)
 40070d0:	103ebf1e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 40070d4:	dc800e17 	ldw	r18,56(sp)
 40070d8:	dc400d17 	ldw	r17,52(sp)
 40070dc:	dd401904 	addi	r21,sp,100
 40070e0:	003e7406 	br	4006ab4 <___vfprintf_internal_r+0x5c4>
 40070e4:	d9014f17 	ldw	r4,1340(sp)
 40070e8:	b00b883a 	mov	r5,r22
 40070ec:	d9800c04 	addi	r6,sp,48
 40070f0:	d9c15115 	stw	r7,1348(sp)
 40070f4:	40064980 	call	4006498 <__sprint_r>
 40070f8:	d9c15117 	ldw	r7,1348(sp)
 40070fc:	103eb41e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 4007100:	dd401904 	addi	r21,sp,100
 4007104:	003d6d06 	br	40066bc <___vfprintf_internal_r+0x1cc>
 4007108:	d9014f17 	ldw	r4,1340(sp)
 400710c:	b00b883a 	mov	r5,r22
 4007110:	d9800c04 	addi	r6,sp,48
 4007114:	d9c15115 	stw	r7,1348(sp)
 4007118:	40064980 	call	4006498 <__sprint_r>
 400711c:	d9c15117 	ldw	r7,1348(sp)
 4007120:	103eab1e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 4007124:	dc800e17 	ldw	r18,56(sp)
 4007128:	dc400d17 	ldw	r17,52(sp)
 400712c:	dd401904 	addi	r21,sp,100
 4007130:	003e3406 	br	4006a04 <___vfprintf_internal_r+0x514>
 4007134:	d9014f17 	ldw	r4,1340(sp)
 4007138:	b00b883a 	mov	r5,r22
 400713c:	d9800c04 	addi	r6,sp,48
 4007140:	d9c15115 	stw	r7,1348(sp)
 4007144:	40064980 	call	4006498 <__sprint_r>
 4007148:	d9c15117 	ldw	r7,1348(sp)
 400714c:	103ea01e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 4007150:	dc800e17 	ldw	r18,56(sp)
 4007154:	dc400d17 	ldw	r17,52(sp)
 4007158:	dd401904 	addi	r21,sp,100
 400715c:	003e1c06 	br	40069d0 <___vfprintf_internal_r+0x4e0>
 4007160:	d9014f17 	ldw	r4,1340(sp)
 4007164:	b00b883a 	mov	r5,r22
 4007168:	d9800c04 	addi	r6,sp,48
 400716c:	d9c15115 	stw	r7,1348(sp)
 4007170:	40064980 	call	4006498 <__sprint_r>
 4007174:	d9c15117 	ldw	r7,1348(sp)
 4007178:	103e951e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 400717c:	dc800e17 	ldw	r18,56(sp)
 4007180:	dc400d17 	ldw	r17,52(sp)
 4007184:	dd401904 	addi	r21,sp,100
 4007188:	003e0406 	br	400699c <___vfprintf_internal_r+0x4ac>
 400718c:	d9000517 	ldw	r4,20(sp)
 4007190:	0102520e 	bge	zero,r4,4007adc <___vfprintf_internal_r+0x15ec>
 4007194:	d9814717 	ldw	r6,1308(sp)
 4007198:	21807a16 	blt	r4,r6,4007384 <___vfprintf_internal_r+0xe94>
 400719c:	d8814117 	ldw	r2,1284(sp)
 40071a0:	91a5883a 	add	r18,r18,r6
 40071a4:	8c400044 	addi	r17,r17,1
 40071a8:	a8800015 	stw	r2,0(r21)
 40071ac:	008001c4 	movi	r2,7
 40071b0:	a9800115 	stw	r6,4(r21)
 40071b4:	dc800e15 	stw	r18,56(sp)
 40071b8:	dc400d15 	stw	r17,52(sp)
 40071bc:	1442f616 	blt	r2,r17,4007d98 <___vfprintf_internal_r+0x18a8>
 40071c0:	a8c00204 	addi	r3,r21,8
 40071c4:	d9414717 	ldw	r5,1308(sp)
 40071c8:	2161c83a 	sub	r16,r4,r5
 40071cc:	043f9d0e 	bge	zero,r16,4007044 <___vfprintf_internal_r+0xb54>
 40071d0:	00800404 	movi	r2,16
 40071d4:	1402130e 	bge	r2,r16,4007a24 <___vfprintf_internal_r+0x1534>
 40071d8:	dc400d17 	ldw	r17,52(sp)
 40071dc:	1027883a 	mov	r19,r2
 40071e0:	07010074 	movhi	fp,1025
 40071e4:	e704c384 	addi	fp,fp,4878
 40071e8:	050001c4 	movi	r20,7
 40071ec:	00000306 	br	40071fc <___vfprintf_internal_r+0xd0c>
 40071f0:	18c00204 	addi	r3,r3,8
 40071f4:	843ffc04 	addi	r16,r16,-16
 40071f8:	9c020d0e 	bge	r19,r16,4007a30 <___vfprintf_internal_r+0x1540>
 40071fc:	94800404 	addi	r18,r18,16
 4007200:	8c400044 	addi	r17,r17,1
 4007204:	1f000015 	stw	fp,0(r3)
 4007208:	1cc00115 	stw	r19,4(r3)
 400720c:	dc800e15 	stw	r18,56(sp)
 4007210:	dc400d15 	stw	r17,52(sp)
 4007214:	a47ff60e 	bge	r20,r17,40071f0 <___vfprintf_internal_r+0xd00>
 4007218:	d9014f17 	ldw	r4,1340(sp)
 400721c:	b00b883a 	mov	r5,r22
 4007220:	d9800c04 	addi	r6,sp,48
 4007224:	40064980 	call	4006498 <__sprint_r>
 4007228:	103e691e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 400722c:	dc800e17 	ldw	r18,56(sp)
 4007230:	dc400d17 	ldw	r17,52(sp)
 4007234:	d8c01904 	addi	r3,sp,100
 4007238:	003fee06 	br	40071f4 <___vfprintf_internal_r+0xd04>
 400723c:	d8814717 	ldw	r2,1308(sp)
 4007240:	143fffc4 	addi	r16,r2,-1
 4007244:	043e970e 	bge	zero,r16,4006ca4 <___vfprintf_internal_r+0x7b4>
 4007248:	00800404 	movi	r2,16
 400724c:	1400180e 	bge	r2,r16,40072b0 <___vfprintf_internal_r+0xdc0>
 4007250:	1029883a 	mov	r20,r2
 4007254:	07010074 	movhi	fp,1025
 4007258:	e704c384 	addi	fp,fp,4878
 400725c:	054001c4 	movi	r21,7
 4007260:	00000306 	br	4007270 <___vfprintf_internal_r+0xd80>
 4007264:	9cc00204 	addi	r19,r19,8
 4007268:	843ffc04 	addi	r16,r16,-16
 400726c:	a400120e 	bge	r20,r16,40072b8 <___vfprintf_internal_r+0xdc8>
 4007270:	94800404 	addi	r18,r18,16
 4007274:	8c400044 	addi	r17,r17,1
 4007278:	9f000015 	stw	fp,0(r19)
 400727c:	9d000115 	stw	r20,4(r19)
 4007280:	dc800e15 	stw	r18,56(sp)
 4007284:	dc400d15 	stw	r17,52(sp)
 4007288:	ac7ff60e 	bge	r21,r17,4007264 <___vfprintf_internal_r+0xd74>
 400728c:	d9014f17 	ldw	r4,1340(sp)
 4007290:	b00b883a 	mov	r5,r22
 4007294:	d9800c04 	addi	r6,sp,48
 4007298:	40064980 	call	4006498 <__sprint_r>
 400729c:	103e4c1e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 40072a0:	dc800e17 	ldw	r18,56(sp)
 40072a4:	dc400d17 	ldw	r17,52(sp)
 40072a8:	dcc01904 	addi	r19,sp,100
 40072ac:	003fee06 	br	4007268 <___vfprintf_internal_r+0xd78>
 40072b0:	07010074 	movhi	fp,1025
 40072b4:	e704c384 	addi	fp,fp,4878
 40072b8:	9425883a 	add	r18,r18,r16
 40072bc:	8c400044 	addi	r17,r17,1
 40072c0:	008001c4 	movi	r2,7
 40072c4:	9f000015 	stw	fp,0(r19)
 40072c8:	9c000115 	stw	r16,4(r19)
 40072cc:	dc800e15 	stw	r18,56(sp)
 40072d0:	dc400d15 	stw	r17,52(sp)
 40072d4:	147e720e 	bge	r2,r17,4006ca0 <___vfprintf_internal_r+0x7b0>
 40072d8:	d9014f17 	ldw	r4,1340(sp)
 40072dc:	b00b883a 	mov	r5,r22
 40072e0:	d9800c04 	addi	r6,sp,48
 40072e4:	40064980 	call	4006498 <__sprint_r>
 40072e8:	103e391e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 40072ec:	dc800e17 	ldw	r18,56(sp)
 40072f0:	dc400d17 	ldw	r17,52(sp)
 40072f4:	dcc01904 	addi	r19,sp,100
 40072f8:	003e6a06 	br	4006ca4 <___vfprintf_internal_r+0x7b4>
 40072fc:	d9014f17 	ldw	r4,1340(sp)
 4007300:	b00b883a 	mov	r5,r22
 4007304:	d9800c04 	addi	r6,sp,48
 4007308:	d9c15115 	stw	r7,1348(sp)
 400730c:	40064980 	call	4006498 <__sprint_r>
 4007310:	d9c15117 	ldw	r7,1348(sp)
 4007314:	103e2e1e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 4007318:	dc800e17 	ldw	r18,56(sp)
 400731c:	dc400d17 	ldw	r17,52(sp)
 4007320:	dd401904 	addi	r21,sp,100
 4007324:	003dba06 	br	4006a10 <___vfprintf_internal_r+0x520>
 4007328:	d9014f17 	ldw	r4,1340(sp)
 400732c:	b00b883a 	mov	r5,r22
 4007330:	d9800c04 	addi	r6,sp,48
 4007334:	40064980 	call	4006498 <__sprint_r>
 4007338:	103e251e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 400733c:	dc800e17 	ldw	r18,56(sp)
 4007340:	dc400d17 	ldw	r17,52(sp)
 4007344:	dcc01904 	addi	r19,sp,100
 4007348:	003e4206 	br	4006c54 <___vfprintf_internal_r+0x764>
 400734c:	d9014f17 	ldw	r4,1340(sp)
 4007350:	b00b883a 	mov	r5,r22
 4007354:	d9800c04 	addi	r6,sp,48
 4007358:	40064980 	call	4006498 <__sprint_r>
 400735c:	103e1c1e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 4007360:	dc800e17 	ldw	r18,56(sp)
 4007364:	dc400d17 	ldw	r17,52(sp)
 4007368:	d8c01904 	addi	r3,sp,100
 400736c:	003e2e06 	br	4006c28 <___vfprintf_internal_r+0x738>
 4007370:	d9414c17 	ldw	r5,1328(sp)
 4007374:	2880004c 	andi	r2,r5,1
 4007378:	1005003a 	cmpeq	r2,r2,zero
 400737c:	103dda1e 	bne	r2,zero,4006ae8 <___vfprintf_internal_r+0x5f8>
 4007380:	003e9f06 	br	4006e00 <___vfprintf_internal_r+0x910>
 4007384:	d8c14117 	ldw	r3,1284(sp)
 4007388:	9125883a 	add	r18,r18,r4
 400738c:	8c400044 	addi	r17,r17,1
 4007390:	008001c4 	movi	r2,7
 4007394:	a8c00015 	stw	r3,0(r21)
 4007398:	a9000115 	stw	r4,4(r21)
 400739c:	dc800e15 	stw	r18,56(sp)
 40073a0:	dc400d15 	stw	r17,52(sp)
 40073a4:	14426616 	blt	r2,r17,4007d40 <___vfprintf_internal_r+0x1850>
 40073a8:	a8c00204 	addi	r3,r21,8
 40073ac:	d9414917 	ldw	r5,1316(sp)
 40073b0:	00800044 	movi	r2,1
 40073b4:	94800044 	addi	r18,r18,1
 40073b8:	8c400044 	addi	r17,r17,1
 40073bc:	18800115 	stw	r2,4(r3)
 40073c0:	008001c4 	movi	r2,7
 40073c4:	19400015 	stw	r5,0(r3)
 40073c8:	dc800e15 	stw	r18,56(sp)
 40073cc:	dc400d15 	stw	r17,52(sp)
 40073d0:	2021883a 	mov	r16,r4
 40073d4:	14425016 	blt	r2,r17,4007d18 <___vfprintf_internal_r+0x1828>
 40073d8:	19400204 	addi	r5,r3,8
 40073dc:	d9814717 	ldw	r6,1308(sp)
 40073e0:	8c400044 	addi	r17,r17,1
 40073e4:	dc400d15 	stw	r17,52(sp)
 40073e8:	3107c83a 	sub	r3,r6,r4
 40073ec:	d9014117 	ldw	r4,1284(sp)
 40073f0:	90e5883a 	add	r18,r18,r3
 40073f4:	28c00115 	stw	r3,4(r5)
 40073f8:	8105883a 	add	r2,r16,r4
 40073fc:	28800015 	stw	r2,0(r5)
 4007400:	008001c4 	movi	r2,7
 4007404:	dc800e15 	stw	r18,56(sp)
 4007408:	147f1d16 	blt	r2,r17,4007080 <___vfprintf_internal_r+0xb90>
 400740c:	28c00204 	addi	r3,r5,8
 4007410:	003db506 	br	4006ae8 <___vfprintf_internal_r+0x5f8>
 4007414:	3c000017 	ldw	r16,0(r7)
 4007418:	3c400117 	ldw	r17,4(r7)
 400741c:	39800204 	addi	r6,r7,8
 4007420:	01000044 	movi	r4,1
 4007424:	d9814015 	stw	r6,1280(sp)
 4007428:	d8000405 	stb	zero,16(sp)
 400742c:	003ebe06 	br	4006f28 <___vfprintf_internal_r+0xa38>
 4007430:	3c000017 	ldw	r16,0(r7)
 4007434:	3c400117 	ldw	r17,4(r7)
 4007438:	38800204 	addi	r2,r7,8
 400743c:	d8814015 	stw	r2,1280(sp)
 4007440:	003eb706 	br	4006f20 <___vfprintf_internal_r+0xa30>
 4007444:	3c000017 	ldw	r16,0(r7)
 4007448:	3c400117 	ldw	r17,4(r7)
 400744c:	39000204 	addi	r4,r7,8
 4007450:	d9014015 	stw	r4,1280(sp)
 4007454:	0009883a 	mov	r4,zero
 4007458:	d8000405 	stb	zero,16(sp)
 400745c:	003eb206 	br	4006f28 <___vfprintf_internal_r+0xa38>
 4007460:	38c00017 	ldw	r3,0(r7)
 4007464:	39c00104 	addi	r7,r7,4
 4007468:	d8c14a15 	stw	r3,1320(sp)
 400746c:	1800d10e 	bge	r3,zero,40077b4 <___vfprintf_internal_r+0x12c4>
 4007470:	00c7c83a 	sub	r3,zero,r3
 4007474:	d8c14a15 	stw	r3,1320(sp)
 4007478:	d9014c17 	ldw	r4,1328(sp)
 400747c:	b8c00007 	ldb	r3,0(r23)
 4007480:	21000114 	ori	r4,r4,4
 4007484:	d9014c15 	stw	r4,1328(sp)
 4007488:	003c9806 	br	40066ec <___vfprintf_internal_r+0x1fc>
 400748c:	d9814c17 	ldw	r6,1328(sp)
 4007490:	3080080c 	andi	r2,r6,32
 4007494:	1001f026 	beq	r2,zero,4007c58 <___vfprintf_internal_r+0x1768>
 4007498:	d9014b17 	ldw	r4,1324(sp)
 400749c:	38800017 	ldw	r2,0(r7)
 40074a0:	39c00104 	addi	r7,r7,4
 40074a4:	d9c14015 	stw	r7,1280(sp)
 40074a8:	2007d7fa 	srai	r3,r4,31
 40074ac:	d9c14017 	ldw	r7,1280(sp)
 40074b0:	11000015 	stw	r4,0(r2)
 40074b4:	10c00115 	stw	r3,4(r2)
 40074b8:	003c6906 	br	4006660 <___vfprintf_internal_r+0x170>
 40074bc:	b8c00007 	ldb	r3,0(r23)
 40074c0:	00801b04 	movi	r2,108
 40074c4:	18824f26 	beq	r3,r2,4007e04 <___vfprintf_internal_r+0x1914>
 40074c8:	d9414c17 	ldw	r5,1328(sp)
 40074cc:	29400414 	ori	r5,r5,16
 40074d0:	d9414c15 	stw	r5,1328(sp)
 40074d4:	003c8506 	br	40066ec <___vfprintf_internal_r+0x1fc>
 40074d8:	d9814c17 	ldw	r6,1328(sp)
 40074dc:	b8c00007 	ldb	r3,0(r23)
 40074e0:	31800814 	ori	r6,r6,32
 40074e4:	d9814c15 	stw	r6,1328(sp)
 40074e8:	003c8006 	br	40066ec <___vfprintf_internal_r+0x1fc>
 40074ec:	d8814c17 	ldw	r2,1328(sp)
 40074f0:	3c000017 	ldw	r16,0(r7)
 40074f4:	00c01e04 	movi	r3,120
 40074f8:	10800094 	ori	r2,r2,2
 40074fc:	d8814c15 	stw	r2,1328(sp)
 4007500:	39c00104 	addi	r7,r7,4
 4007504:	01410074 	movhi	r5,1025
 4007508:	2944ac04 	addi	r5,r5,4784
 400750c:	00800c04 	movi	r2,48
 4007510:	0023883a 	mov	r17,zero
 4007514:	01000084 	movi	r4,2
 4007518:	d9c14015 	stw	r7,1280(sp)
 400751c:	d8c14d15 	stw	r3,1332(sp)
 4007520:	d9414415 	stw	r5,1296(sp)
 4007524:	d8800445 	stb	r2,17(sp)
 4007528:	d8c00485 	stb	r3,18(sp)
 400752c:	d8000405 	stb	zero,16(sp)
 4007530:	003e7d06 	br	4006f28 <___vfprintf_internal_r+0xa38>
 4007534:	d8814c17 	ldw	r2,1328(sp)
 4007538:	b8c00007 	ldb	r3,0(r23)
 400753c:	10801014 	ori	r2,r2,64
 4007540:	d8814c15 	stw	r2,1328(sp)
 4007544:	003c6906 	br	40066ec <___vfprintf_internal_r+0x1fc>
 4007548:	d9414c17 	ldw	r5,1328(sp)
 400754c:	2880020c 	andi	r2,r5,8
 4007550:	1001df26 	beq	r2,zero,4007cd0 <___vfprintf_internal_r+0x17e0>
 4007554:	39800017 	ldw	r6,0(r7)
 4007558:	38800204 	addi	r2,r7,8
 400755c:	d8814015 	stw	r2,1280(sp)
 4007560:	d9814215 	stw	r6,1288(sp)
 4007564:	39c00117 	ldw	r7,4(r7)
 4007568:	d9c14315 	stw	r7,1292(sp)
 400756c:	d9014217 	ldw	r4,1288(sp)
 4007570:	d9414317 	ldw	r5,1292(sp)
 4007574:	400bcbc0 	call	400bcbc <__isinfd>
 4007578:	10021726 	beq	r2,zero,4007dd8 <___vfprintf_internal_r+0x18e8>
 400757c:	d9014217 	ldw	r4,1288(sp)
 4007580:	d9414317 	ldw	r5,1292(sp)
 4007584:	000d883a 	mov	r6,zero
 4007588:	000f883a 	mov	r7,zero
 400758c:	400cab00 	call	400cab0 <__ltdf2>
 4007590:	1002ca16 	blt	r2,zero,40080bc <___vfprintf_internal_r+0x1bcc>
 4007594:	d9414d17 	ldw	r5,1332(sp)
 4007598:	008011c4 	movi	r2,71
 400759c:	11420a16 	blt	r2,r5,4007dc8 <___vfprintf_internal_r+0x18d8>
 40075a0:	01810074 	movhi	r6,1025
 40075a4:	3184b104 	addi	r6,r6,4804
 40075a8:	d9814115 	stw	r6,1284(sp)
 40075ac:	d9014c17 	ldw	r4,1328(sp)
 40075b0:	00c000c4 	movi	r3,3
 40075b4:	00bfdfc4 	movi	r2,-129
 40075b8:	2088703a 	and	r4,r4,r2
 40075bc:	180f883a 	mov	r7,r3
 40075c0:	d8c14515 	stw	r3,1300(sp)
 40075c4:	d9014c15 	stw	r4,1328(sp)
 40075c8:	d8014615 	stw	zero,1304(sp)
 40075cc:	003e6a06 	br	4006f78 <___vfprintf_internal_r+0xa88>
 40075d0:	38800017 	ldw	r2,0(r7)
 40075d4:	00c00044 	movi	r3,1
 40075d8:	39c00104 	addi	r7,r7,4
 40075dc:	d9c14015 	stw	r7,1280(sp)
 40075e0:	d9000f04 	addi	r4,sp,60
 40075e4:	180f883a 	mov	r7,r3
 40075e8:	d8c14515 	stw	r3,1300(sp)
 40075ec:	d9014115 	stw	r4,1284(sp)
 40075f0:	d8800f05 	stb	r2,60(sp)
 40075f4:	d8000405 	stb	zero,16(sp)
 40075f8:	003cac06 	br	40068ac <___vfprintf_internal_r+0x3bc>
 40075fc:	01410074 	movhi	r5,1025
 4007600:	2944b704 	addi	r5,r5,4828
 4007604:	d9414415 	stw	r5,1296(sp)
 4007608:	d9814c17 	ldw	r6,1328(sp)
 400760c:	3080080c 	andi	r2,r6,32
 4007610:	1000f926 	beq	r2,zero,40079f8 <___vfprintf_internal_r+0x1508>
 4007614:	3c000017 	ldw	r16,0(r7)
 4007618:	3c400117 	ldw	r17,4(r7)
 400761c:	38800204 	addi	r2,r7,8
 4007620:	d8814015 	stw	r2,1280(sp)
 4007624:	d9414c17 	ldw	r5,1328(sp)
 4007628:	2880004c 	andi	r2,r5,1
 400762c:	1005003a 	cmpeq	r2,r2,zero
 4007630:	1000b31e 	bne	r2,zero,4007900 <___vfprintf_internal_r+0x1410>
 4007634:	8444b03a 	or	r2,r16,r17
 4007638:	1000b126 	beq	r2,zero,4007900 <___vfprintf_internal_r+0x1410>
 400763c:	d9814d17 	ldw	r6,1332(sp)
 4007640:	29400094 	ori	r5,r5,2
 4007644:	00800c04 	movi	r2,48
 4007648:	01000084 	movi	r4,2
 400764c:	d9414c15 	stw	r5,1328(sp)
 4007650:	d8800445 	stb	r2,17(sp)
 4007654:	d9800485 	stb	r6,18(sp)
 4007658:	d8000405 	stb	zero,16(sp)
 400765c:	003e3206 	br	4006f28 <___vfprintf_internal_r+0xa38>
 4007660:	01810074 	movhi	r6,1025
 4007664:	3184ac04 	addi	r6,r6,4784
 4007668:	d9814415 	stw	r6,1296(sp)
 400766c:	003fe606 	br	4007608 <___vfprintf_internal_r+0x1118>
 4007670:	00800ac4 	movi	r2,43
 4007674:	d8800405 	stb	r2,16(sp)
 4007678:	b8c00007 	ldb	r3,0(r23)
 400767c:	003c1b06 	br	40066ec <___vfprintf_internal_r+0x1fc>
 4007680:	d8814c17 	ldw	r2,1328(sp)
 4007684:	b8c00007 	ldb	r3,0(r23)
 4007688:	10800054 	ori	r2,r2,1
 400768c:	d8814c15 	stw	r2,1328(sp)
 4007690:	003c1606 	br	40066ec <___vfprintf_internal_r+0x1fc>
 4007694:	d8800407 	ldb	r2,16(sp)
 4007698:	1000461e 	bne	r2,zero,40077b4 <___vfprintf_internal_r+0x12c4>
 400769c:	00800804 	movi	r2,32
 40076a0:	d8800405 	stb	r2,16(sp)
 40076a4:	b8c00007 	ldb	r3,0(r23)
 40076a8:	003c1006 	br	40066ec <___vfprintf_internal_r+0x1fc>
 40076ac:	d9814c17 	ldw	r6,1328(sp)
 40076b0:	b8c00007 	ldb	r3,0(r23)
 40076b4:	31800214 	ori	r6,r6,8
 40076b8:	d9814c15 	stw	r6,1328(sp)
 40076bc:	003c0b06 	br	40066ec <___vfprintf_internal_r+0x1fc>
 40076c0:	0007883a 	mov	r3,zero
 40076c4:	01000244 	movi	r4,9
 40076c8:	188002a4 	muli	r2,r3,10
 40076cc:	b8c00007 	ldb	r3,0(r23)
 40076d0:	d9814d17 	ldw	r6,1332(sp)
 40076d4:	bdc00044 	addi	r23,r23,1
 40076d8:	d8c14d15 	stw	r3,1332(sp)
 40076dc:	d9414d17 	ldw	r5,1332(sp)
 40076e0:	3085883a 	add	r2,r6,r2
 40076e4:	10fff404 	addi	r3,r2,-48
 40076e8:	28bff404 	addi	r2,r5,-48
 40076ec:	20bff62e 	bgeu	r4,r2,40076c8 <___vfprintf_internal_r+0x11d8>
 40076f0:	d8c14a15 	stw	r3,1320(sp)
 40076f4:	003bff06 	br	40066f4 <___vfprintf_internal_r+0x204>
 40076f8:	d9414c17 	ldw	r5,1328(sp)
 40076fc:	b8c00007 	ldb	r3,0(r23)
 4007700:	29402014 	ori	r5,r5,128
 4007704:	d9414c15 	stw	r5,1328(sp)
 4007708:	003bf806 	br	40066ec <___vfprintf_internal_r+0x1fc>
 400770c:	b8c00007 	ldb	r3,0(r23)
 4007710:	00800a84 	movi	r2,42
 4007714:	bdc00044 	addi	r23,r23,1
 4007718:	18831526 	beq	r3,r2,4008370 <___vfprintf_internal_r+0x1e80>
 400771c:	d8c14d15 	stw	r3,1332(sp)
 4007720:	18bff404 	addi	r2,r3,-48
 4007724:	00c00244 	movi	r3,9
 4007728:	18827836 	bltu	r3,r2,400810c <___vfprintf_internal_r+0x1c1c>
 400772c:	000d883a 	mov	r6,zero
 4007730:	308002a4 	muli	r2,r6,10
 4007734:	b9800007 	ldb	r6,0(r23)
 4007738:	d9414d17 	ldw	r5,1332(sp)
 400773c:	bdc00044 	addi	r23,r23,1
 4007740:	d9814d15 	stw	r6,1332(sp)
 4007744:	d9014d17 	ldw	r4,1332(sp)
 4007748:	1145883a 	add	r2,r2,r5
 400774c:	11bff404 	addi	r6,r2,-48
 4007750:	20bff404 	addi	r2,r4,-48
 4007754:	18bff62e 	bgeu	r3,r2,4007730 <___vfprintf_internal_r+0x1240>
 4007758:	3027883a 	mov	r19,r6
 400775c:	303be50e 	bge	r6,zero,40066f4 <___vfprintf_internal_r+0x204>
 4007760:	04ffffc4 	movi	r19,-1
 4007764:	003be306 	br	40066f4 <___vfprintf_internal_r+0x204>
 4007768:	d8000405 	stb	zero,16(sp)
 400776c:	39800017 	ldw	r6,0(r7)
 4007770:	39c00104 	addi	r7,r7,4
 4007774:	d9c14015 	stw	r7,1280(sp)
 4007778:	d9814115 	stw	r6,1284(sp)
 400777c:	3001c926 	beq	r6,zero,4007ea4 <___vfprintf_internal_r+0x19b4>
 4007780:	98000e16 	blt	r19,zero,40077bc <___vfprintf_internal_r+0x12cc>
 4007784:	d9014117 	ldw	r4,1284(sp)
 4007788:	000b883a 	mov	r5,zero
 400778c:	980d883a 	mov	r6,r19
 4007790:	400a4980 	call	400a498 <memchr>
 4007794:	10025926 	beq	r2,zero,40080fc <___vfprintf_internal_r+0x1c0c>
 4007798:	d8c14117 	ldw	r3,1284(sp)
 400779c:	10cfc83a 	sub	r7,r2,r3
 40077a0:	99c19e16 	blt	r19,r7,4007e1c <___vfprintf_internal_r+0x192c>
 40077a4:	d9c14515 	stw	r7,1300(sp)
 40077a8:	38000916 	blt	r7,zero,40077d0 <___vfprintf_internal_r+0x12e0>
 40077ac:	d8014615 	stw	zero,1304(sp)
 40077b0:	003df106 	br	4006f78 <___vfprintf_internal_r+0xa88>
 40077b4:	b8c00007 	ldb	r3,0(r23)
 40077b8:	003bcc06 	br	40066ec <___vfprintf_internal_r+0x1fc>
 40077bc:	d9014117 	ldw	r4,1284(sp)
 40077c0:	40064240 	call	4006424 <strlen>
 40077c4:	d8814515 	stw	r2,1300(sp)
 40077c8:	100f883a 	mov	r7,r2
 40077cc:	103ff70e 	bge	r2,zero,40077ac <___vfprintf_internal_r+0x12bc>
 40077d0:	d8014515 	stw	zero,1300(sp)
 40077d4:	d8014615 	stw	zero,1304(sp)
 40077d8:	003de706 	br	4006f78 <___vfprintf_internal_r+0xa88>
 40077dc:	20c03fcc 	andi	r3,r4,255
 40077e0:	00800044 	movi	r2,1
 40077e4:	18802d26 	beq	r3,r2,400789c <___vfprintf_internal_r+0x13ac>
 40077e8:	18800e36 	bltu	r3,r2,4007824 <___vfprintf_internal_r+0x1334>
 40077ec:	00800084 	movi	r2,2
 40077f0:	1880fa26 	beq	r3,r2,4007bdc <___vfprintf_internal_r+0x16ec>
 40077f4:	01010074 	movhi	r4,1025
 40077f8:	2104bc04 	addi	r4,r4,4848
 40077fc:	40064240 	call	4006424 <strlen>
 4007800:	100f883a 	mov	r7,r2
 4007804:	dcc14515 	stw	r19,1300(sp)
 4007808:	9880010e 	bge	r19,r2,4007810 <___vfprintf_internal_r+0x1320>
 400780c:	d8814515 	stw	r2,1300(sp)
 4007810:	00810074 	movhi	r2,1025
 4007814:	1084bc04 	addi	r2,r2,4848
 4007818:	dcc14615 	stw	r19,1304(sp)
 400781c:	d8814115 	stw	r2,1284(sp)
 4007820:	003dd506 	br	4006f78 <___vfprintf_internal_r+0xa88>
 4007824:	d9401904 	addi	r5,sp,100
 4007828:	dd000f04 	addi	r20,sp,60
 400782c:	d9414115 	stw	r5,1284(sp)
 4007830:	880a977a 	slli	r5,r17,29
 4007834:	d9814117 	ldw	r6,1284(sp)
 4007838:	8004d0fa 	srli	r2,r16,3
 400783c:	8806d0fa 	srli	r3,r17,3
 4007840:	810001cc 	andi	r4,r16,7
 4007844:	2884b03a 	or	r2,r5,r2
 4007848:	31bfffc4 	addi	r6,r6,-1
 400784c:	21000c04 	addi	r4,r4,48
 4007850:	d9814115 	stw	r6,1284(sp)
 4007854:	10cab03a 	or	r5,r2,r3
 4007858:	31000005 	stb	r4,0(r6)
 400785c:	1021883a 	mov	r16,r2
 4007860:	1823883a 	mov	r17,r3
 4007864:	283ff21e 	bne	r5,zero,4007830 <___vfprintf_internal_r+0x1340>
 4007868:	d8c14c17 	ldw	r3,1328(sp)
 400786c:	1880004c 	andi	r2,r3,1
 4007870:	1005003a 	cmpeq	r2,r2,zero
 4007874:	103db91e 	bne	r2,zero,4006f5c <___vfprintf_internal_r+0xa6c>
 4007878:	20803fcc 	andi	r2,r4,255
 400787c:	1080201c 	xori	r2,r2,128
 4007880:	10bfe004 	addi	r2,r2,-128
 4007884:	00c00c04 	movi	r3,48
 4007888:	10fdb426 	beq	r2,r3,4006f5c <___vfprintf_internal_r+0xa6c>
 400788c:	31bfffc4 	addi	r6,r6,-1
 4007890:	d9814115 	stw	r6,1284(sp)
 4007894:	30c00005 	stb	r3,0(r6)
 4007898:	003db006 	br	4006f5c <___vfprintf_internal_r+0xa6c>
 400789c:	88800068 	cmpgeui	r2,r17,1
 40078a0:	10002c1e 	bne	r2,zero,4007954 <___vfprintf_internal_r+0x1464>
 40078a4:	8800021e 	bne	r17,zero,40078b0 <___vfprintf_internal_r+0x13c0>
 40078a8:	00800244 	movi	r2,9
 40078ac:	14002936 	bltu	r2,r16,4007954 <___vfprintf_internal_r+0x1464>
 40078b0:	d90018c4 	addi	r4,sp,99
 40078b4:	dd000f04 	addi	r20,sp,60
 40078b8:	d9014115 	stw	r4,1284(sp)
 40078bc:	d9014117 	ldw	r4,1284(sp)
 40078c0:	80800c04 	addi	r2,r16,48
 40078c4:	20800005 	stb	r2,0(r4)
 40078c8:	003da406 	br	4006f5c <___vfprintf_internal_r+0xa6c>
 40078cc:	dc400d17 	ldw	r17,52(sp)
 40078d0:	07010074 	movhi	fp,1025
 40078d4:	e704c384 	addi	fp,fp,4878
 40078d8:	9425883a 	add	r18,r18,r16
 40078dc:	8c400044 	addi	r17,r17,1
 40078e0:	008001c4 	movi	r2,7
 40078e4:	1f000015 	stw	fp,0(r3)
 40078e8:	1c000115 	stw	r16,4(r3)
 40078ec:	dc800e15 	stw	r18,56(sp)
 40078f0:	dc400d15 	stw	r17,52(sp)
 40078f4:	147de216 	blt	r2,r17,4007080 <___vfprintf_internal_r+0xb90>
 40078f8:	18c00204 	addi	r3,r3,8
 40078fc:	003c7a06 	br	4006ae8 <___vfprintf_internal_r+0x5f8>
 4007900:	01000084 	movi	r4,2
 4007904:	d8000405 	stb	zero,16(sp)
 4007908:	003d8706 	br	4006f28 <___vfprintf_internal_r+0xa38>
 400790c:	d9814c17 	ldw	r6,1328(sp)
 4007910:	30c4703a 	and	r2,r6,r3
 4007914:	1005003a 	cmpeq	r2,r2,zero
 4007918:	103cb926 	beq	r2,zero,4006c00 <___vfprintf_internal_r+0x710>
 400791c:	d9014117 	ldw	r4,1284(sp)
 4007920:	94800044 	addi	r18,r18,1
 4007924:	8c400044 	addi	r17,r17,1
 4007928:	008001c4 	movi	r2,7
 400792c:	a9000015 	stw	r4,0(r21)
 4007930:	a8c00115 	stw	r3,4(r21)
 4007934:	dc800e15 	stw	r18,56(sp)
 4007938:	dc400d15 	stw	r17,52(sp)
 400793c:	147e6616 	blt	r2,r17,40072d8 <___vfprintf_internal_r+0xde8>
 4007940:	acc00204 	addi	r19,r21,8
 4007944:	003cd706 	br	4006ca4 <___vfprintf_internal_r+0x7b4>
 4007948:	07010074 	movhi	fp,1025
 400794c:	e704c384 	addi	fp,fp,4878
 4007950:	003c4f06 	br	4006a90 <___vfprintf_internal_r+0x5a0>
 4007954:	dd000f04 	addi	r20,sp,60
 4007958:	dc801904 	addi	r18,sp,100
 400795c:	8009883a 	mov	r4,r16
 4007960:	880b883a 	mov	r5,r17
 4007964:	01800284 	movi	r6,10
 4007968:	000f883a 	mov	r7,zero
 400796c:	400c4780 	call	400c478 <__umoddi3>
 4007970:	12000c04 	addi	r8,r2,48
 4007974:	94bfffc4 	addi	r18,r18,-1
 4007978:	8009883a 	mov	r4,r16
 400797c:	880b883a 	mov	r5,r17
 4007980:	01800284 	movi	r6,10
 4007984:	000f883a 	mov	r7,zero
 4007988:	92000005 	stb	r8,0(r18)
 400798c:	400be9c0 	call	400be9c <__udivdi3>
 4007990:	1009883a 	mov	r4,r2
 4007994:	1021883a 	mov	r16,r2
 4007998:	18800068 	cmpgeui	r2,r3,1
 400799c:	1823883a 	mov	r17,r3
 40079a0:	103fee1e 	bne	r2,zero,400795c <___vfprintf_internal_r+0x146c>
 40079a4:	1800021e 	bne	r3,zero,40079b0 <___vfprintf_internal_r+0x14c0>
 40079a8:	00800244 	movi	r2,9
 40079ac:	113feb36 	bltu	r2,r4,400795c <___vfprintf_internal_r+0x146c>
 40079b0:	94bfffc4 	addi	r18,r18,-1
 40079b4:	dc814115 	stw	r18,1284(sp)
 40079b8:	003fc006 	br	40078bc <___vfprintf_internal_r+0x13cc>
 40079bc:	d9014c17 	ldw	r4,1328(sp)
 40079c0:	2080004c 	andi	r2,r4,1
 40079c4:	10009a1e 	bne	r2,zero,4007c30 <___vfprintf_internal_r+0x1740>
 40079c8:	d9401904 	addi	r5,sp,100
 40079cc:	dd000f04 	addi	r20,sp,60
 40079d0:	d9414115 	stw	r5,1284(sp)
 40079d4:	003d6106 	br	4006f5c <___vfprintf_internal_r+0xa6c>
 40079d8:	d9014f17 	ldw	r4,1340(sp)
 40079dc:	b00b883a 	mov	r5,r22
 40079e0:	d9800c04 	addi	r6,sp,48
 40079e4:	40064980 	call	4006498 <__sprint_r>
 40079e8:	103c791e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 40079ec:	dc800e17 	ldw	r18,56(sp)
 40079f0:	d8c01904 	addi	r3,sp,100
 40079f4:	003cff06 	br	4006df4 <___vfprintf_internal_r+0x904>
 40079f8:	d8c14c17 	ldw	r3,1328(sp)
 40079fc:	1880040c 	andi	r2,r3,16
 4007a00:	1000711e 	bne	r2,zero,4007bc8 <___vfprintf_internal_r+0x16d8>
 4007a04:	d9014c17 	ldw	r4,1328(sp)
 4007a08:	2080100c 	andi	r2,r4,64
 4007a0c:	10006e26 	beq	r2,zero,4007bc8 <___vfprintf_internal_r+0x16d8>
 4007a10:	3c00000b 	ldhu	r16,0(r7)
 4007a14:	0023883a 	mov	r17,zero
 4007a18:	39c00104 	addi	r7,r7,4
 4007a1c:	d9c14015 	stw	r7,1280(sp)
 4007a20:	003f0006 	br	4007624 <___vfprintf_internal_r+0x1134>
 4007a24:	dc400d17 	ldw	r17,52(sp)
 4007a28:	07010074 	movhi	fp,1025
 4007a2c:	e704c384 	addi	fp,fp,4878
 4007a30:	9425883a 	add	r18,r18,r16
 4007a34:	8c400044 	addi	r17,r17,1
 4007a38:	008001c4 	movi	r2,7
 4007a3c:	1f000015 	stw	fp,0(r3)
 4007a40:	1c000115 	stw	r16,4(r3)
 4007a44:	dc800e15 	stw	r18,56(sp)
 4007a48:	dc400d15 	stw	r17,52(sp)
 4007a4c:	147d7616 	blt	r2,r17,4007028 <___vfprintf_internal_r+0xb38>
 4007a50:	18c00204 	addi	r3,r3,8
 4007a54:	003d7b06 	br	4007044 <___vfprintf_internal_r+0xb54>
 4007a58:	dc800e17 	ldw	r18,56(sp)
 4007a5c:	dc400d17 	ldw	r17,52(sp)
 4007a60:	07010074 	movhi	fp,1025
 4007a64:	e704c784 	addi	fp,fp,4894
 4007a68:	003bc006 	br	400696c <___vfprintf_internal_r+0x47c>
 4007a6c:	d9014f17 	ldw	r4,1340(sp)
 4007a70:	b00b883a 	mov	r5,r22
 4007a74:	d9800c04 	addi	r6,sp,48
 4007a78:	40064980 	call	4006498 <__sprint_r>
 4007a7c:	103c541e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 4007a80:	dc800e17 	ldw	r18,56(sp)
 4007a84:	d8c01904 	addi	r3,sp,100
 4007a88:	003ce906 	br	4006e30 <___vfprintf_internal_r+0x940>
 4007a8c:	3c000017 	ldw	r16,0(r7)
 4007a90:	0009883a 	mov	r4,zero
 4007a94:	39c00104 	addi	r7,r7,4
 4007a98:	0023883a 	mov	r17,zero
 4007a9c:	d9c14015 	stw	r7,1280(sp)
 4007aa0:	d8000405 	stb	zero,16(sp)
 4007aa4:	003d2006 	br	4006f28 <___vfprintf_internal_r+0xa38>
 4007aa8:	38800017 	ldw	r2,0(r7)
 4007aac:	39c00104 	addi	r7,r7,4
 4007ab0:	d9c14015 	stw	r7,1280(sp)
 4007ab4:	1023d7fa 	srai	r17,r2,31
 4007ab8:	1021883a 	mov	r16,r2
 4007abc:	003d1806 	br	4006f20 <___vfprintf_internal_r+0xa30>
 4007ac0:	3c000017 	ldw	r16,0(r7)
 4007ac4:	01000044 	movi	r4,1
 4007ac8:	39c00104 	addi	r7,r7,4
 4007acc:	0023883a 	mov	r17,zero
 4007ad0:	d9c14015 	stw	r7,1280(sp)
 4007ad4:	d8000405 	stb	zero,16(sp)
 4007ad8:	003d1306 	br	4006f28 <___vfprintf_internal_r+0xa38>
 4007adc:	00810074 	movhi	r2,1025
 4007ae0:	1084c304 	addi	r2,r2,4876
 4007ae4:	94800044 	addi	r18,r18,1
 4007ae8:	8c400044 	addi	r17,r17,1
 4007aec:	a8800015 	stw	r2,0(r21)
 4007af0:	00c00044 	movi	r3,1
 4007af4:	008001c4 	movi	r2,7
 4007af8:	a8c00115 	stw	r3,4(r21)
 4007afc:	dc800e15 	stw	r18,56(sp)
 4007b00:	dc400d15 	stw	r17,52(sp)
 4007b04:	1440ca16 	blt	r2,r17,4007e30 <___vfprintf_internal_r+0x1940>
 4007b08:	a8c00204 	addi	r3,r21,8
 4007b0c:	2000061e 	bne	r4,zero,4007b28 <___vfprintf_internal_r+0x1638>
 4007b10:	d9414717 	ldw	r5,1308(sp)
 4007b14:	2800041e 	bne	r5,zero,4007b28 <___vfprintf_internal_r+0x1638>
 4007b18:	d9814c17 	ldw	r6,1328(sp)
 4007b1c:	3080004c 	andi	r2,r6,1
 4007b20:	1005003a 	cmpeq	r2,r2,zero
 4007b24:	103bf01e 	bne	r2,zero,4006ae8 <___vfprintf_internal_r+0x5f8>
 4007b28:	00800044 	movi	r2,1
 4007b2c:	dc400d17 	ldw	r17,52(sp)
 4007b30:	18800115 	stw	r2,4(r3)
 4007b34:	d8814917 	ldw	r2,1316(sp)
 4007b38:	94800044 	addi	r18,r18,1
 4007b3c:	8c400044 	addi	r17,r17,1
 4007b40:	18800015 	stw	r2,0(r3)
 4007b44:	008001c4 	movi	r2,7
 4007b48:	dc800e15 	stw	r18,56(sp)
 4007b4c:	dc400d15 	stw	r17,52(sp)
 4007b50:	1440ca16 	blt	r2,r17,4007e7c <___vfprintf_internal_r+0x198c>
 4007b54:	18c00204 	addi	r3,r3,8
 4007b58:	0121c83a 	sub	r16,zero,r4
 4007b5c:	0400500e 	bge	zero,r16,4007ca0 <___vfprintf_internal_r+0x17b0>
 4007b60:	00800404 	movi	r2,16
 4007b64:	1400800e 	bge	r2,r16,4007d68 <___vfprintf_internal_r+0x1878>
 4007b68:	1027883a 	mov	r19,r2
 4007b6c:	07010074 	movhi	fp,1025
 4007b70:	e704c384 	addi	fp,fp,4878
 4007b74:	050001c4 	movi	r20,7
 4007b78:	00000306 	br	4007b88 <___vfprintf_internal_r+0x1698>
 4007b7c:	18c00204 	addi	r3,r3,8
 4007b80:	843ffc04 	addi	r16,r16,-16
 4007b84:	9c007a0e 	bge	r19,r16,4007d70 <___vfprintf_internal_r+0x1880>
 4007b88:	94800404 	addi	r18,r18,16
 4007b8c:	8c400044 	addi	r17,r17,1
 4007b90:	1f000015 	stw	fp,0(r3)
 4007b94:	1cc00115 	stw	r19,4(r3)
 4007b98:	dc800e15 	stw	r18,56(sp)
 4007b9c:	dc400d15 	stw	r17,52(sp)
 4007ba0:	a47ff60e 	bge	r20,r17,4007b7c <___vfprintf_internal_r+0x168c>
 4007ba4:	d9014f17 	ldw	r4,1340(sp)
 4007ba8:	b00b883a 	mov	r5,r22
 4007bac:	d9800c04 	addi	r6,sp,48
 4007bb0:	40064980 	call	4006498 <__sprint_r>
 4007bb4:	103c061e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 4007bb8:	dc800e17 	ldw	r18,56(sp)
 4007bbc:	dc400d17 	ldw	r17,52(sp)
 4007bc0:	d8c01904 	addi	r3,sp,100
 4007bc4:	003fee06 	br	4007b80 <___vfprintf_internal_r+0x1690>
 4007bc8:	3c000017 	ldw	r16,0(r7)
 4007bcc:	0023883a 	mov	r17,zero
 4007bd0:	39c00104 	addi	r7,r7,4
 4007bd4:	d9c14015 	stw	r7,1280(sp)
 4007bd8:	003e9206 	br	4007624 <___vfprintf_internal_r+0x1134>
 4007bdc:	d9401904 	addi	r5,sp,100
 4007be0:	dd000f04 	addi	r20,sp,60
 4007be4:	d9414115 	stw	r5,1284(sp)
 4007be8:	d9814417 	ldw	r6,1296(sp)
 4007bec:	880a973a 	slli	r5,r17,28
 4007bf0:	8004d13a 	srli	r2,r16,4
 4007bf4:	810003cc 	andi	r4,r16,15
 4007bf8:	3109883a 	add	r4,r6,r4
 4007bfc:	2884b03a 	or	r2,r5,r2
 4007c00:	21400003 	ldbu	r5,0(r4)
 4007c04:	d9014117 	ldw	r4,1284(sp)
 4007c08:	8806d13a 	srli	r3,r17,4
 4007c0c:	1021883a 	mov	r16,r2
 4007c10:	213fffc4 	addi	r4,r4,-1
 4007c14:	d9014115 	stw	r4,1284(sp)
 4007c18:	d9814117 	ldw	r6,1284(sp)
 4007c1c:	10c8b03a 	or	r4,r2,r3
 4007c20:	1823883a 	mov	r17,r3
 4007c24:	31400005 	stb	r5,0(r6)
 4007c28:	203fef1e 	bne	r4,zero,4007be8 <___vfprintf_internal_r+0x16f8>
 4007c2c:	003ccb06 	br	4006f5c <___vfprintf_internal_r+0xa6c>
 4007c30:	00800c04 	movi	r2,48
 4007c34:	d98018c4 	addi	r6,sp,99
 4007c38:	dd000f04 	addi	r20,sp,60
 4007c3c:	d88018c5 	stb	r2,99(sp)
 4007c40:	d9814115 	stw	r6,1284(sp)
 4007c44:	003cc506 	br	4006f5c <___vfprintf_internal_r+0xa6c>
 4007c48:	dc400d17 	ldw	r17,52(sp)
 4007c4c:	07010074 	movhi	fp,1025
 4007c50:	e704c784 	addi	fp,fp,4894
 4007c54:	003bc706 	br	4006b74 <___vfprintf_internal_r+0x684>
 4007c58:	d9414c17 	ldw	r5,1328(sp)
 4007c5c:	2880040c 	andi	r2,r5,16
 4007c60:	10007c26 	beq	r2,zero,4007e54 <___vfprintf_internal_r+0x1964>
 4007c64:	38800017 	ldw	r2,0(r7)
 4007c68:	39c00104 	addi	r7,r7,4
 4007c6c:	d9c14015 	stw	r7,1280(sp)
 4007c70:	d9814b17 	ldw	r6,1324(sp)
 4007c74:	d9c14017 	ldw	r7,1280(sp)
 4007c78:	11800015 	stw	r6,0(r2)
 4007c7c:	003a7806 	br	4006660 <___vfprintf_internal_r+0x170>
 4007c80:	d9014f17 	ldw	r4,1340(sp)
 4007c84:	b00b883a 	mov	r5,r22
 4007c88:	d9800c04 	addi	r6,sp,48
 4007c8c:	40064980 	call	4006498 <__sprint_r>
 4007c90:	103bcf1e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 4007c94:	dc800e17 	ldw	r18,56(sp)
 4007c98:	dc400d17 	ldw	r17,52(sp)
 4007c9c:	d8c01904 	addi	r3,sp,100
 4007ca0:	d9014717 	ldw	r4,1308(sp)
 4007ca4:	d9414117 	ldw	r5,1284(sp)
 4007ca8:	8c400044 	addi	r17,r17,1
 4007cac:	9125883a 	add	r18,r18,r4
 4007cb0:	008001c4 	movi	r2,7
 4007cb4:	19400015 	stw	r5,0(r3)
 4007cb8:	19000115 	stw	r4,4(r3)
 4007cbc:	dc800e15 	stw	r18,56(sp)
 4007cc0:	dc400d15 	stw	r17,52(sp)
 4007cc4:	147cee16 	blt	r2,r17,4007080 <___vfprintf_internal_r+0xb90>
 4007cc8:	18c00204 	addi	r3,r3,8
 4007ccc:	003b8606 	br	4006ae8 <___vfprintf_internal_r+0x5f8>
 4007cd0:	38c00017 	ldw	r3,0(r7)
 4007cd4:	39000204 	addi	r4,r7,8
 4007cd8:	d9014015 	stw	r4,1280(sp)
 4007cdc:	d8c14215 	stw	r3,1288(sp)
 4007ce0:	39c00117 	ldw	r7,4(r7)
 4007ce4:	d9c14315 	stw	r7,1292(sp)
 4007ce8:	003e2006 	br	400756c <___vfprintf_internal_r+0x107c>
 4007cec:	0005883a 	mov	r2,zero
 4007cf0:	1409c83a 	sub	r4,r2,r16
 4007cf4:	1105803a 	cmpltu	r2,r2,r4
 4007cf8:	044bc83a 	sub	r5,zero,r17
 4007cfc:	2885c83a 	sub	r2,r5,r2
 4007d00:	2021883a 	mov	r16,r4
 4007d04:	1023883a 	mov	r17,r2
 4007d08:	01000044 	movi	r4,1
 4007d0c:	00800b44 	movi	r2,45
 4007d10:	d8800405 	stb	r2,16(sp)
 4007d14:	003c8406 	br	4006f28 <___vfprintf_internal_r+0xa38>
 4007d18:	d9014f17 	ldw	r4,1340(sp)
 4007d1c:	b00b883a 	mov	r5,r22
 4007d20:	d9800c04 	addi	r6,sp,48
 4007d24:	40064980 	call	4006498 <__sprint_r>
 4007d28:	103ba91e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 4007d2c:	dc800e17 	ldw	r18,56(sp)
 4007d30:	dc400d17 	ldw	r17,52(sp)
 4007d34:	d9000517 	ldw	r4,20(sp)
 4007d38:	d9401904 	addi	r5,sp,100
 4007d3c:	003da706 	br	40073dc <___vfprintf_internal_r+0xeec>
 4007d40:	d9014f17 	ldw	r4,1340(sp)
 4007d44:	b00b883a 	mov	r5,r22
 4007d48:	d9800c04 	addi	r6,sp,48
 4007d4c:	40064980 	call	4006498 <__sprint_r>
 4007d50:	103b9f1e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 4007d54:	dc800e17 	ldw	r18,56(sp)
 4007d58:	dc400d17 	ldw	r17,52(sp)
 4007d5c:	d9000517 	ldw	r4,20(sp)
 4007d60:	d8c01904 	addi	r3,sp,100
 4007d64:	003d9106 	br	40073ac <___vfprintf_internal_r+0xebc>
 4007d68:	07010074 	movhi	fp,1025
 4007d6c:	e704c384 	addi	fp,fp,4878
 4007d70:	9425883a 	add	r18,r18,r16
 4007d74:	8c400044 	addi	r17,r17,1
 4007d78:	008001c4 	movi	r2,7
 4007d7c:	1f000015 	stw	fp,0(r3)
 4007d80:	1c000115 	stw	r16,4(r3)
 4007d84:	dc800e15 	stw	r18,56(sp)
 4007d88:	dc400d15 	stw	r17,52(sp)
 4007d8c:	147fbc16 	blt	r2,r17,4007c80 <___vfprintf_internal_r+0x1790>
 4007d90:	18c00204 	addi	r3,r3,8
 4007d94:	003fc206 	br	4007ca0 <___vfprintf_internal_r+0x17b0>
 4007d98:	d9014f17 	ldw	r4,1340(sp)
 4007d9c:	b00b883a 	mov	r5,r22
 4007da0:	d9800c04 	addi	r6,sp,48
 4007da4:	40064980 	call	4006498 <__sprint_r>
 4007da8:	103b891e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 4007dac:	dc800e17 	ldw	r18,56(sp)
 4007db0:	d9000517 	ldw	r4,20(sp)
 4007db4:	d8c01904 	addi	r3,sp,100
 4007db8:	003d0206 	br	40071c4 <___vfprintf_internal_r+0xcd4>
 4007dbc:	07010074 	movhi	fp,1025
 4007dc0:	e704c384 	addi	fp,fp,4878
 4007dc4:	003be406 	br	4006d58 <___vfprintf_internal_r+0x868>
 4007dc8:	00810074 	movhi	r2,1025
 4007dcc:	1084b204 	addi	r2,r2,4808
 4007dd0:	d8814115 	stw	r2,1284(sp)
 4007dd4:	003df506 	br	40075ac <___vfprintf_internal_r+0x10bc>
 4007dd8:	d9014217 	ldw	r4,1288(sp)
 4007ddc:	d9414317 	ldw	r5,1292(sp)
 4007de0:	400bcfc0 	call	400bcfc <__isnand>
 4007de4:	10003926 	beq	r2,zero,4007ecc <___vfprintf_internal_r+0x19dc>
 4007de8:	d9414d17 	ldw	r5,1332(sp)
 4007dec:	008011c4 	movi	r2,71
 4007df0:	1140ce16 	blt	r2,r5,400812c <___vfprintf_internal_r+0x1c3c>
 4007df4:	01810074 	movhi	r6,1025
 4007df8:	3184b304 	addi	r6,r6,4812
 4007dfc:	d9814115 	stw	r6,1284(sp)
 4007e00:	003dea06 	br	40075ac <___vfprintf_internal_r+0x10bc>
 4007e04:	d9014c17 	ldw	r4,1328(sp)
 4007e08:	bdc00044 	addi	r23,r23,1
 4007e0c:	b8c00007 	ldb	r3,0(r23)
 4007e10:	21000814 	ori	r4,r4,32
 4007e14:	d9014c15 	stw	r4,1328(sp)
 4007e18:	003a3406 	br	40066ec <___vfprintf_internal_r+0x1fc>
 4007e1c:	dcc14515 	stw	r19,1300(sp)
 4007e20:	98011016 	blt	r19,zero,4008264 <___vfprintf_internal_r+0x1d74>
 4007e24:	980f883a 	mov	r7,r19
 4007e28:	d8014615 	stw	zero,1304(sp)
 4007e2c:	003c5206 	br	4006f78 <___vfprintf_internal_r+0xa88>
 4007e30:	d9014f17 	ldw	r4,1340(sp)
 4007e34:	b00b883a 	mov	r5,r22
 4007e38:	d9800c04 	addi	r6,sp,48
 4007e3c:	40064980 	call	4006498 <__sprint_r>
 4007e40:	103b631e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 4007e44:	dc800e17 	ldw	r18,56(sp)
 4007e48:	d9000517 	ldw	r4,20(sp)
 4007e4c:	d8c01904 	addi	r3,sp,100
 4007e50:	003f2e06 	br	4007b0c <___vfprintf_internal_r+0x161c>
 4007e54:	d8c14c17 	ldw	r3,1328(sp)
 4007e58:	1880100c 	andi	r2,r3,64
 4007e5c:	1000a026 	beq	r2,zero,40080e0 <___vfprintf_internal_r+0x1bf0>
 4007e60:	38800017 	ldw	r2,0(r7)
 4007e64:	39c00104 	addi	r7,r7,4
 4007e68:	d9c14015 	stw	r7,1280(sp)
 4007e6c:	d9014b17 	ldw	r4,1324(sp)
 4007e70:	d9c14017 	ldw	r7,1280(sp)
 4007e74:	1100000d 	sth	r4,0(r2)
 4007e78:	0039f906 	br	4006660 <___vfprintf_internal_r+0x170>
 4007e7c:	d9014f17 	ldw	r4,1340(sp)
 4007e80:	b00b883a 	mov	r5,r22
 4007e84:	d9800c04 	addi	r6,sp,48
 4007e88:	40064980 	call	4006498 <__sprint_r>
 4007e8c:	103b501e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 4007e90:	dc800e17 	ldw	r18,56(sp)
 4007e94:	dc400d17 	ldw	r17,52(sp)
 4007e98:	d9000517 	ldw	r4,20(sp)
 4007e9c:	d8c01904 	addi	r3,sp,100
 4007ea0:	003f2d06 	br	4007b58 <___vfprintf_internal_r+0x1668>
 4007ea4:	00800184 	movi	r2,6
 4007ea8:	14c09a36 	bltu	r2,r19,4008114 <___vfprintf_internal_r+0x1c24>
 4007eac:	dcc14515 	stw	r19,1300(sp)
 4007eb0:	9800010e 	bge	r19,zero,4007eb8 <___vfprintf_internal_r+0x19c8>
 4007eb4:	d8014515 	stw	zero,1300(sp)
 4007eb8:	00810074 	movhi	r2,1025
 4007ebc:	1084b504 	addi	r2,r2,4820
 4007ec0:	980f883a 	mov	r7,r19
 4007ec4:	d8814115 	stw	r2,1284(sp)
 4007ec8:	003a7806 	br	40068ac <___vfprintf_internal_r+0x3bc>
 4007ecc:	00bfffc4 	movi	r2,-1
 4007ed0:	9880e226 	beq	r19,r2,400825c <___vfprintf_internal_r+0x1d6c>
 4007ed4:	d9414d17 	ldw	r5,1332(sp)
 4007ed8:	008019c4 	movi	r2,103
 4007edc:	2880dc26 	beq	r5,r2,4008250 <___vfprintf_internal_r+0x1d60>
 4007ee0:	008011c4 	movi	r2,71
 4007ee4:	2880da26 	beq	r5,r2,4008250 <___vfprintf_internal_r+0x1d60>
 4007ee8:	d9414c17 	ldw	r5,1328(sp)
 4007eec:	d9014317 	ldw	r4,1292(sp)
 4007ef0:	d9814217 	ldw	r6,1288(sp)
 4007ef4:	29404014 	ori	r5,r5,256
 4007ef8:	d9414c15 	stw	r5,1328(sp)
 4007efc:	2000cc16 	blt	r4,zero,4008230 <___vfprintf_internal_r+0x1d40>
 4007f00:	3021883a 	mov	r16,r6
 4007f04:	2023883a 	mov	r17,r4
 4007f08:	0039883a 	mov	fp,zero
 4007f0c:	d9414d17 	ldw	r5,1332(sp)
 4007f10:	00801984 	movi	r2,102
 4007f14:	2880b726 	beq	r5,r2,40081f4 <___vfprintf_internal_r+0x1d04>
 4007f18:	00801184 	movi	r2,70
 4007f1c:	2880b526 	beq	r5,r2,40081f4 <___vfprintf_internal_r+0x1d04>
 4007f20:	00801944 	movi	r2,101
 4007f24:	2880c826 	beq	r5,r2,4008248 <___vfprintf_internal_r+0x1d58>
 4007f28:	00801144 	movi	r2,69
 4007f2c:	2880c626 	beq	r5,r2,4008248 <___vfprintf_internal_r+0x1d58>
 4007f30:	9829883a 	mov	r20,r19
 4007f34:	d9014f17 	ldw	r4,1340(sp)
 4007f38:	d8800504 	addi	r2,sp,20
 4007f3c:	880d883a 	mov	r6,r17
 4007f40:	d8800115 	stw	r2,4(sp)
 4007f44:	d8c00604 	addi	r3,sp,24
 4007f48:	d8800704 	addi	r2,sp,28
 4007f4c:	800b883a 	mov	r5,r16
 4007f50:	01c00084 	movi	r7,2
 4007f54:	d8c00215 	stw	r3,8(sp)
 4007f58:	d8800315 	stw	r2,12(sp)
 4007f5c:	dd000015 	stw	r20,0(sp)
 4007f60:	40087fc0 	call	40087fc <_dtoa_r>
 4007f64:	d9814d17 	ldw	r6,1332(sp)
 4007f68:	d8814115 	stw	r2,1284(sp)
 4007f6c:	008019c4 	movi	r2,103
 4007f70:	30809526 	beq	r6,r2,40081c8 <___vfprintf_internal_r+0x1cd8>
 4007f74:	d8c14d17 	ldw	r3,1332(sp)
 4007f78:	008011c4 	movi	r2,71
 4007f7c:	18809226 	beq	r3,r2,40081c8 <___vfprintf_internal_r+0x1cd8>
 4007f80:	d9414117 	ldw	r5,1284(sp)
 4007f84:	d9814d17 	ldw	r6,1332(sp)
 4007f88:	00801984 	movi	r2,102
 4007f8c:	2d25883a 	add	r18,r5,r20
 4007f90:	30808626 	beq	r6,r2,40081ac <___vfprintf_internal_r+0x1cbc>
 4007f94:	00801184 	movi	r2,70
 4007f98:	30808426 	beq	r6,r2,40081ac <___vfprintf_internal_r+0x1cbc>
 4007f9c:	000d883a 	mov	r6,zero
 4007fa0:	000f883a 	mov	r7,zero
 4007fa4:	880b883a 	mov	r5,r17
 4007fa8:	8009883a 	mov	r4,r16
 4007fac:	40038580 	call	4003858 <__eqdf2>
 4007fb0:	1000751e 	bne	r2,zero,4008188 <___vfprintf_internal_r+0x1c98>
 4007fb4:	9005883a 	mov	r2,r18
 4007fb8:	dc800715 	stw	r18,28(sp)
 4007fbc:	d9014117 	ldw	r4,1284(sp)
 4007fc0:	d9414d17 	ldw	r5,1332(sp)
 4007fc4:	00c019c4 	movi	r3,103
 4007fc8:	1125c83a 	sub	r18,r2,r4
 4007fcc:	28c06826 	beq	r5,r3,4008170 <___vfprintf_internal_r+0x1c80>
 4007fd0:	008011c4 	movi	r2,71
 4007fd4:	28806626 	beq	r5,r2,4008170 <___vfprintf_internal_r+0x1c80>
 4007fd8:	d9000517 	ldw	r4,20(sp)
 4007fdc:	d8c14d17 	ldw	r3,1332(sp)
 4007fe0:	00801944 	movi	r2,101
 4007fe4:	10c05516 	blt	r2,r3,400813c <___vfprintf_internal_r+0x1c4c>
 4007fe8:	213fffc4 	addi	r4,r4,-1
 4007fec:	d9000515 	stw	r4,20(sp)
 4007ff0:	d8c00805 	stb	r3,32(sp)
 4007ff4:	2021883a 	mov	r16,r4
 4007ff8:	2000c116 	blt	r4,zero,4008300 <___vfprintf_internal_r+0x1e10>
 4007ffc:	00800ac4 	movi	r2,43
 4008000:	d8800845 	stb	r2,33(sp)
 4008004:	00800244 	movi	r2,9
 4008008:	1400af0e 	bge	r2,r16,40082c8 <___vfprintf_internal_r+0x1dd8>
 400800c:	1027883a 	mov	r19,r2
 4008010:	dc400b84 	addi	r17,sp,46
 4008014:	8009883a 	mov	r4,r16
 4008018:	01400284 	movi	r5,10
 400801c:	400cda80 	call	400cda8 <__modsi3>
 4008020:	10800c04 	addi	r2,r2,48
 4008024:	8c7fffc4 	addi	r17,r17,-1
 4008028:	8009883a 	mov	r4,r16
 400802c:	01400284 	movi	r5,10
 4008030:	88800005 	stb	r2,0(r17)
 4008034:	400cd480 	call	400cd48 <__divsi3>
 4008038:	1021883a 	mov	r16,r2
 400803c:	98bff516 	blt	r19,r2,4008014 <___vfprintf_internal_r+0x1b24>
 4008040:	10c00c04 	addi	r3,r2,48
 4008044:	d88009c4 	addi	r2,sp,39
 4008048:	108001c4 	addi	r2,r2,7
 400804c:	897fffc4 	addi	r5,r17,-1
 4008050:	88ffffc5 	stb	r3,-1(r17)
 4008054:	2880a72e 	bgeu	r5,r2,40082f4 <___vfprintf_internal_r+0x1e04>
 4008058:	1009883a 	mov	r4,r2
 400805c:	d9800804 	addi	r6,sp,32
 4008060:	d8c00884 	addi	r3,sp,34
 4008064:	28800003 	ldbu	r2,0(r5)
 4008068:	29400044 	addi	r5,r5,1
 400806c:	18800005 	stb	r2,0(r3)
 4008070:	18c00044 	addi	r3,r3,1
 4008074:	293ffb36 	bltu	r5,r4,4008064 <___vfprintf_internal_r+0x1b74>
 4008078:	1987c83a 	sub	r3,r3,r6
 400807c:	00800044 	movi	r2,1
 4008080:	d8c14815 	stw	r3,1312(sp)
 4008084:	90cf883a 	add	r7,r18,r3
 4008088:	1480960e 	bge	r2,r18,40082e4 <___vfprintf_internal_r+0x1df4>
 400808c:	39c00044 	addi	r7,r7,1
 4008090:	d9c14515 	stw	r7,1300(sp)
 4008094:	38003416 	blt	r7,zero,4008168 <___vfprintf_internal_r+0x1c78>
 4008098:	e0803fcc 	andi	r2,fp,255
 400809c:	1080201c 	xori	r2,r2,128
 40080a0:	10bfe004 	addi	r2,r2,-128
 40080a4:	10004e26 	beq	r2,zero,40081e0 <___vfprintf_internal_r+0x1cf0>
 40080a8:	00800b44 	movi	r2,45
 40080ac:	dc814715 	stw	r18,1308(sp)
 40080b0:	d8014615 	stw	zero,1304(sp)
 40080b4:	d8800405 	stb	r2,16(sp)
 40080b8:	003bb106 	br	4006f80 <___vfprintf_internal_r+0xa90>
 40080bc:	00800b44 	movi	r2,45
 40080c0:	d8800405 	stb	r2,16(sp)
 40080c4:	003d3306 	br	4007594 <___vfprintf_internal_r+0x10a4>
 40080c8:	d9014f17 	ldw	r4,1340(sp)
 40080cc:	b00b883a 	mov	r5,r22
 40080d0:	d9800c04 	addi	r6,sp,48
 40080d4:	40064980 	call	4006498 <__sprint_r>
 40080d8:	103abd1e 	bne	r2,zero,4006bd0 <___vfprintf_internal_r+0x6e0>
 40080dc:	003abb06 	br	4006bcc <___vfprintf_internal_r+0x6dc>
 40080e0:	38800017 	ldw	r2,0(r7)
 40080e4:	39c00104 	addi	r7,r7,4
 40080e8:	d9c14015 	stw	r7,1280(sp)
 40080ec:	d9414b17 	ldw	r5,1324(sp)
 40080f0:	d9c14017 	ldw	r7,1280(sp)
 40080f4:	11400015 	stw	r5,0(r2)
 40080f8:	00395906 	br	4006660 <___vfprintf_internal_r+0x170>
 40080fc:	980f883a 	mov	r7,r19
 4008100:	dcc14515 	stw	r19,1300(sp)
 4008104:	d8014615 	stw	zero,1304(sp)
 4008108:	003b9b06 	br	4006f78 <___vfprintf_internal_r+0xa88>
 400810c:	0027883a 	mov	r19,zero
 4008110:	00397806 	br	40066f4 <___vfprintf_internal_r+0x204>
 4008114:	00c10074 	movhi	r3,1025
 4008118:	18c4b504 	addi	r3,r3,4820
 400811c:	100f883a 	mov	r7,r2
 4008120:	d8814515 	stw	r2,1300(sp)
 4008124:	d8c14115 	stw	r3,1284(sp)
 4008128:	0039e006 	br	40068ac <___vfprintf_internal_r+0x3bc>
 400812c:	00810074 	movhi	r2,1025
 4008130:	1084b404 	addi	r2,r2,4816
 4008134:	d8814115 	stw	r2,1284(sp)
 4008138:	003d1c06 	br	40075ac <___vfprintf_internal_r+0x10bc>
 400813c:	d9414d17 	ldw	r5,1332(sp)
 4008140:	00801984 	movi	r2,102
 4008144:	28804926 	beq	r5,r2,400826c <___vfprintf_internal_r+0x1d7c>
 4008148:	200f883a 	mov	r7,r4
 400814c:	24805716 	blt	r4,r18,40082ac <___vfprintf_internal_r+0x1dbc>
 4008150:	d9414c17 	ldw	r5,1328(sp)
 4008154:	2880004c 	andi	r2,r5,1
 4008158:	10000126 	beq	r2,zero,4008160 <___vfprintf_internal_r+0x1c70>
 400815c:	21c00044 	addi	r7,r4,1
 4008160:	d9c14515 	stw	r7,1300(sp)
 4008164:	383fcc0e 	bge	r7,zero,4008098 <___vfprintf_internal_r+0x1ba8>
 4008168:	d8014515 	stw	zero,1300(sp)
 400816c:	003fca06 	br	4008098 <___vfprintf_internal_r+0x1ba8>
 4008170:	d9000517 	ldw	r4,20(sp)
 4008174:	00bfff04 	movi	r2,-4
 4008178:	1100480e 	bge	r2,r4,400829c <___vfprintf_internal_r+0x1dac>
 400817c:	99004716 	blt	r19,r4,400829c <___vfprintf_internal_r+0x1dac>
 4008180:	d8c14d15 	stw	r3,1332(sp)
 4008184:	003ff006 	br	4008148 <___vfprintf_internal_r+0x1c58>
 4008188:	d8800717 	ldw	r2,28(sp)
 400818c:	14bf8b2e 	bgeu	r2,r18,4007fbc <___vfprintf_internal_r+0x1acc>
 4008190:	9007883a 	mov	r3,r18
 4008194:	01000c04 	movi	r4,48
 4008198:	11000005 	stb	r4,0(r2)
 400819c:	10800044 	addi	r2,r2,1
 40081a0:	d8800715 	stw	r2,28(sp)
 40081a4:	18bffc1e 	bne	r3,r2,4008198 <___vfprintf_internal_r+0x1ca8>
 40081a8:	003f8406 	br	4007fbc <___vfprintf_internal_r+0x1acc>
 40081ac:	d8814117 	ldw	r2,1284(sp)
 40081b0:	10c00007 	ldb	r3,0(r2)
 40081b4:	00800c04 	movi	r2,48
 40081b8:	18805b26 	beq	r3,r2,4008328 <___vfprintf_internal_r+0x1e38>
 40081bc:	d9000517 	ldw	r4,20(sp)
 40081c0:	9125883a 	add	r18,r18,r4
 40081c4:	003f7506 	br	4007f9c <___vfprintf_internal_r+0x1aac>
 40081c8:	d9014c17 	ldw	r4,1328(sp)
 40081cc:	2080004c 	andi	r2,r4,1
 40081d0:	1005003a 	cmpeq	r2,r2,zero
 40081d4:	103f6a26 	beq	r2,zero,4007f80 <___vfprintf_internal_r+0x1a90>
 40081d8:	d8800717 	ldw	r2,28(sp)
 40081dc:	003f7706 	br	4007fbc <___vfprintf_internal_r+0x1acc>
 40081e0:	d9c14515 	stw	r7,1300(sp)
 40081e4:	38004d16 	blt	r7,zero,400831c <___vfprintf_internal_r+0x1e2c>
 40081e8:	dc814715 	stw	r18,1308(sp)
 40081ec:	d8014615 	stw	zero,1304(sp)
 40081f0:	003b6106 	br	4006f78 <___vfprintf_internal_r+0xa88>
 40081f4:	d9014f17 	ldw	r4,1340(sp)
 40081f8:	d8800504 	addi	r2,sp,20
 40081fc:	d8800115 	stw	r2,4(sp)
 4008200:	d8c00604 	addi	r3,sp,24
 4008204:	d8800704 	addi	r2,sp,28
 4008208:	800b883a 	mov	r5,r16
 400820c:	880d883a 	mov	r6,r17
 4008210:	01c000c4 	movi	r7,3
 4008214:	d8c00215 	stw	r3,8(sp)
 4008218:	d8800315 	stw	r2,12(sp)
 400821c:	dcc00015 	stw	r19,0(sp)
 4008220:	9829883a 	mov	r20,r19
 4008224:	40087fc0 	call	40087fc <_dtoa_r>
 4008228:	d8814115 	stw	r2,1284(sp)
 400822c:	003f5106 	br	4007f74 <___vfprintf_internal_r+0x1a84>
 4008230:	d8c14217 	ldw	r3,1288(sp)
 4008234:	d9014317 	ldw	r4,1292(sp)
 4008238:	07000b44 	movi	fp,45
 400823c:	1821883a 	mov	r16,r3
 4008240:	2460003c 	xorhi	r17,r4,32768
 4008244:	003f3106 	br	4007f0c <___vfprintf_internal_r+0x1a1c>
 4008248:	9d000044 	addi	r20,r19,1
 400824c:	003f3906 	br	4007f34 <___vfprintf_internal_r+0x1a44>
 4008250:	983f251e 	bne	r19,zero,4007ee8 <___vfprintf_internal_r+0x19f8>
 4008254:	04c00044 	movi	r19,1
 4008258:	003f2306 	br	4007ee8 <___vfprintf_internal_r+0x19f8>
 400825c:	04c00184 	movi	r19,6
 4008260:	003f2106 	br	4007ee8 <___vfprintf_internal_r+0x19f8>
 4008264:	d8014515 	stw	zero,1300(sp)
 4008268:	003eee06 	br	4007e24 <___vfprintf_internal_r+0x1934>
 400826c:	200f883a 	mov	r7,r4
 4008270:	0100370e 	bge	zero,r4,4008350 <___vfprintf_internal_r+0x1e60>
 4008274:	9800031e 	bne	r19,zero,4008284 <___vfprintf_internal_r+0x1d94>
 4008278:	d9814c17 	ldw	r6,1328(sp)
 400827c:	3080004c 	andi	r2,r6,1
 4008280:	103fb726 	beq	r2,zero,4008160 <___vfprintf_internal_r+0x1c70>
 4008284:	20800044 	addi	r2,r4,1
 4008288:	98a7883a 	add	r19,r19,r2
 400828c:	dcc14515 	stw	r19,1300(sp)
 4008290:	980f883a 	mov	r7,r19
 4008294:	983f800e 	bge	r19,zero,4008098 <___vfprintf_internal_r+0x1ba8>
 4008298:	003fb306 	br	4008168 <___vfprintf_internal_r+0x1c78>
 400829c:	d9814d17 	ldw	r6,1332(sp)
 40082a0:	31bfff84 	addi	r6,r6,-2
 40082a4:	d9814d15 	stw	r6,1332(sp)
 40082a8:	003f4c06 	br	4007fdc <___vfprintf_internal_r+0x1aec>
 40082ac:	0100180e 	bge	zero,r4,4008310 <___vfprintf_internal_r+0x1e20>
 40082b0:	00800044 	movi	r2,1
 40082b4:	1485883a 	add	r2,r2,r18
 40082b8:	d8814515 	stw	r2,1300(sp)
 40082bc:	100f883a 	mov	r7,r2
 40082c0:	103f750e 	bge	r2,zero,4008098 <___vfprintf_internal_r+0x1ba8>
 40082c4:	003fa806 	br	4008168 <___vfprintf_internal_r+0x1c78>
 40082c8:	80c00c04 	addi	r3,r16,48
 40082cc:	00800c04 	movi	r2,48
 40082d0:	d8c008c5 	stb	r3,35(sp)
 40082d4:	d9800804 	addi	r6,sp,32
 40082d8:	d8c00904 	addi	r3,sp,36
 40082dc:	d8800885 	stb	r2,34(sp)
 40082e0:	003f6506 	br	4008078 <___vfprintf_internal_r+0x1b88>
 40082e4:	d9014c17 	ldw	r4,1328(sp)
 40082e8:	2084703a 	and	r2,r4,r2
 40082ec:	103f9c26 	beq	r2,zero,4008160 <___vfprintf_internal_r+0x1c70>
 40082f0:	003f6606 	br	400808c <___vfprintf_internal_r+0x1b9c>
 40082f4:	d9800804 	addi	r6,sp,32
 40082f8:	d8c00884 	addi	r3,sp,34
 40082fc:	003f5e06 	br	4008078 <___vfprintf_internal_r+0x1b88>
 4008300:	00800b44 	movi	r2,45
 4008304:	0121c83a 	sub	r16,zero,r4
 4008308:	d8800845 	stb	r2,33(sp)
 400830c:	003f3d06 	br	4008004 <___vfprintf_internal_r+0x1b14>
 4008310:	00800084 	movi	r2,2
 4008314:	1105c83a 	sub	r2,r2,r4
 4008318:	003fe606 	br	40082b4 <___vfprintf_internal_r+0x1dc4>
 400831c:	d8014515 	stw	zero,1300(sp)
 4008320:	dc814715 	stw	r18,1308(sp)
 4008324:	003fb106 	br	40081ec <___vfprintf_internal_r+0x1cfc>
 4008328:	000d883a 	mov	r6,zero
 400832c:	000f883a 	mov	r7,zero
 4008330:	8009883a 	mov	r4,r16
 4008334:	880b883a 	mov	r5,r17
 4008338:	40038e00 	call	40038e0 <__nedf2>
 400833c:	103f9f26 	beq	r2,zero,40081bc <___vfprintf_internal_r+0x1ccc>
 4008340:	00800044 	movi	r2,1
 4008344:	1509c83a 	sub	r4,r2,r20
 4008348:	d9000515 	stw	r4,20(sp)
 400834c:	003f9b06 	br	40081bc <___vfprintf_internal_r+0x1ccc>
 4008350:	98000d1e 	bne	r19,zero,4008388 <___vfprintf_internal_r+0x1e98>
 4008354:	d8c14c17 	ldw	r3,1328(sp)
 4008358:	1880004c 	andi	r2,r3,1
 400835c:	10000a1e 	bne	r2,zero,4008388 <___vfprintf_internal_r+0x1e98>
 4008360:	01000044 	movi	r4,1
 4008364:	200f883a 	mov	r7,r4
 4008368:	d9014515 	stw	r4,1300(sp)
 400836c:	003f4a06 	br	4008098 <___vfprintf_internal_r+0x1ba8>
 4008370:	3cc00017 	ldw	r19,0(r7)
 4008374:	39c00104 	addi	r7,r7,4
 4008378:	983d0e0e 	bge	r19,zero,40077b4 <___vfprintf_internal_r+0x12c4>
 400837c:	b8c00007 	ldb	r3,0(r23)
 4008380:	04ffffc4 	movi	r19,-1
 4008384:	0038d906 	br	40066ec <___vfprintf_internal_r+0x1fc>
 4008388:	9cc00084 	addi	r19,r19,2
 400838c:	dcc14515 	stw	r19,1300(sp)
 4008390:	980f883a 	mov	r7,r19
 4008394:	983f400e 	bge	r19,zero,4008098 <___vfprintf_internal_r+0x1ba8>
 4008398:	003f7306 	br	4008168 <___vfprintf_internal_r+0x1c78>

0400839c <__vfprintf_internal>:
 400839c:	00810074 	movhi	r2,1025
 40083a0:	108bf304 	addi	r2,r2,12236
 40083a4:	2013883a 	mov	r9,r4
 40083a8:	11000017 	ldw	r4,0(r2)
 40083ac:	2805883a 	mov	r2,r5
 40083b0:	300f883a 	mov	r7,r6
 40083b4:	480b883a 	mov	r5,r9
 40083b8:	100d883a 	mov	r6,r2
 40083bc:	40064f01 	jmpi	40064f0 <___vfprintf_internal_r>

040083c0 <_write_r>:
 40083c0:	defffd04 	addi	sp,sp,-12
 40083c4:	dc000015 	stw	r16,0(sp)
 40083c8:	04010074 	movhi	r16,1025
 40083cc:	840c0804 	addi	r16,r16,12320
 40083d0:	dc400115 	stw	r17,4(sp)
 40083d4:	80000015 	stw	zero,0(r16)
 40083d8:	2023883a 	mov	r17,r4
 40083dc:	2809883a 	mov	r4,r5
 40083e0:	300b883a 	mov	r5,r6
 40083e4:	380d883a 	mov	r6,r7
 40083e8:	dfc00215 	stw	ra,8(sp)
 40083ec:	400d9800 	call	400d980 <write>
 40083f0:	1007883a 	mov	r3,r2
 40083f4:	00bfffc4 	movi	r2,-1
 40083f8:	18800626 	beq	r3,r2,4008414 <_write_r+0x54>
 40083fc:	1805883a 	mov	r2,r3
 4008400:	dfc00217 	ldw	ra,8(sp)
 4008404:	dc400117 	ldw	r17,4(sp)
 4008408:	dc000017 	ldw	r16,0(sp)
 400840c:	dec00304 	addi	sp,sp,12
 4008410:	f800283a 	ret
 4008414:	80800017 	ldw	r2,0(r16)
 4008418:	103ff826 	beq	r2,zero,40083fc <_write_r+0x3c>
 400841c:	88800015 	stw	r2,0(r17)
 4008420:	1805883a 	mov	r2,r3
 4008424:	dfc00217 	ldw	ra,8(sp)
 4008428:	dc400117 	ldw	r17,4(sp)
 400842c:	dc000017 	ldw	r16,0(sp)
 4008430:	dec00304 	addi	sp,sp,12
 4008434:	f800283a 	ret

04008438 <__swsetup_r>:
 4008438:	00810074 	movhi	r2,1025
 400843c:	108bf304 	addi	r2,r2,12236
 4008440:	10c00017 	ldw	r3,0(r2)
 4008444:	defffd04 	addi	sp,sp,-12
 4008448:	dc400115 	stw	r17,4(sp)
 400844c:	dc000015 	stw	r16,0(sp)
 4008450:	dfc00215 	stw	ra,8(sp)
 4008454:	2023883a 	mov	r17,r4
 4008458:	2821883a 	mov	r16,r5
 400845c:	18000226 	beq	r3,zero,4008468 <__swsetup_r+0x30>
 4008460:	18800e17 	ldw	r2,56(r3)
 4008464:	10001f26 	beq	r2,zero,40084e4 <__swsetup_r+0xac>
 4008468:	8100030b 	ldhu	r4,12(r16)
 400846c:	2080020c 	andi	r2,r4,8
 4008470:	10002826 	beq	r2,zero,4008514 <__swsetup_r+0xdc>
 4008474:	81400417 	ldw	r5,16(r16)
 4008478:	28001d26 	beq	r5,zero,40084f0 <__swsetup_r+0xb8>
 400847c:	2080004c 	andi	r2,r4,1
 4008480:	1005003a 	cmpeq	r2,r2,zero
 4008484:	10000b26 	beq	r2,zero,40084b4 <__swsetup_r+0x7c>
 4008488:	2080008c 	andi	r2,r4,2
 400848c:	10001226 	beq	r2,zero,40084d8 <__swsetup_r+0xa0>
 4008490:	0005883a 	mov	r2,zero
 4008494:	80800215 	stw	r2,8(r16)
 4008498:	28000b26 	beq	r5,zero,40084c8 <__swsetup_r+0x90>
 400849c:	0005883a 	mov	r2,zero
 40084a0:	dfc00217 	ldw	ra,8(sp)
 40084a4:	dc400117 	ldw	r17,4(sp)
 40084a8:	dc000017 	ldw	r16,0(sp)
 40084ac:	dec00304 	addi	sp,sp,12
 40084b0:	f800283a 	ret
 40084b4:	80800517 	ldw	r2,20(r16)
 40084b8:	80000215 	stw	zero,8(r16)
 40084bc:	0085c83a 	sub	r2,zero,r2
 40084c0:	80800615 	stw	r2,24(r16)
 40084c4:	283ff51e 	bne	r5,zero,400849c <__swsetup_r+0x64>
 40084c8:	2080200c 	andi	r2,r4,128
 40084cc:	103ff326 	beq	r2,zero,400849c <__swsetup_r+0x64>
 40084d0:	00bfffc4 	movi	r2,-1
 40084d4:	003ff206 	br	40084a0 <__swsetup_r+0x68>
 40084d8:	80800517 	ldw	r2,20(r16)
 40084dc:	80800215 	stw	r2,8(r16)
 40084e0:	003fed06 	br	4008498 <__swsetup_r+0x60>
 40084e4:	1809883a 	mov	r4,r3
 40084e8:	40045a80 	call	40045a8 <__sinit>
 40084ec:	003fde06 	br	4008468 <__swsetup_r+0x30>
 40084f0:	20c0a00c 	andi	r3,r4,640
 40084f4:	00808004 	movi	r2,512
 40084f8:	18bfe026 	beq	r3,r2,400847c <__swsetup_r+0x44>
 40084fc:	8809883a 	mov	r4,r17
 4008500:	800b883a 	mov	r5,r16
 4008504:	40054040 	call	4005404 <__smakebuf_r>
 4008508:	8100030b 	ldhu	r4,12(r16)
 400850c:	81400417 	ldw	r5,16(r16)
 4008510:	003fda06 	br	400847c <__swsetup_r+0x44>
 4008514:	2080040c 	andi	r2,r4,16
 4008518:	103fed26 	beq	r2,zero,40084d0 <__swsetup_r+0x98>
 400851c:	2080010c 	andi	r2,r4,4
 4008520:	10001226 	beq	r2,zero,400856c <__swsetup_r+0x134>
 4008524:	81400c17 	ldw	r5,48(r16)
 4008528:	28000526 	beq	r5,zero,4008540 <__swsetup_r+0x108>
 400852c:	80801004 	addi	r2,r16,64
 4008530:	28800226 	beq	r5,r2,400853c <__swsetup_r+0x104>
 4008534:	8809883a 	mov	r4,r17
 4008538:	4004a9c0 	call	4004a9c <_free_r>
 400853c:	80000c15 	stw	zero,48(r16)
 4008540:	8080030b 	ldhu	r2,12(r16)
 4008544:	81400417 	ldw	r5,16(r16)
 4008548:	80000115 	stw	zero,4(r16)
 400854c:	10bff6cc 	andi	r2,r2,65499
 4008550:	8080030d 	sth	r2,12(r16)
 4008554:	81400015 	stw	r5,0(r16)
 4008558:	8080030b 	ldhu	r2,12(r16)
 400855c:	10800214 	ori	r2,r2,8
 4008560:	113fffcc 	andi	r4,r2,65535
 4008564:	8080030d 	sth	r2,12(r16)
 4008568:	003fc306 	br	4008478 <__swsetup_r+0x40>
 400856c:	81400417 	ldw	r5,16(r16)
 4008570:	003ff906 	br	4008558 <__swsetup_r+0x120>

04008574 <_close_r>:
 4008574:	defffd04 	addi	sp,sp,-12
 4008578:	dc000015 	stw	r16,0(sp)
 400857c:	04010074 	movhi	r16,1025
 4008580:	840c0804 	addi	r16,r16,12320
 4008584:	dc400115 	stw	r17,4(sp)
 4008588:	80000015 	stw	zero,0(r16)
 400858c:	2023883a 	mov	r17,r4
 4008590:	2809883a 	mov	r4,r5
 4008594:	dfc00215 	stw	ra,8(sp)
 4008598:	400ce180 	call	400ce18 <close>
 400859c:	1007883a 	mov	r3,r2
 40085a0:	00bfffc4 	movi	r2,-1
 40085a4:	18800626 	beq	r3,r2,40085c0 <_close_r+0x4c>
 40085a8:	1805883a 	mov	r2,r3
 40085ac:	dfc00217 	ldw	ra,8(sp)
 40085b0:	dc400117 	ldw	r17,4(sp)
 40085b4:	dc000017 	ldw	r16,0(sp)
 40085b8:	dec00304 	addi	sp,sp,12
 40085bc:	f800283a 	ret
 40085c0:	80800017 	ldw	r2,0(r16)
 40085c4:	103ff826 	beq	r2,zero,40085a8 <_close_r+0x34>
 40085c8:	88800015 	stw	r2,0(r17)
 40085cc:	1805883a 	mov	r2,r3
 40085d0:	dfc00217 	ldw	ra,8(sp)
 40085d4:	dc400117 	ldw	r17,4(sp)
 40085d8:	dc000017 	ldw	r16,0(sp)
 40085dc:	dec00304 	addi	sp,sp,12
 40085e0:	f800283a 	ret

040085e4 <quorem>:
 40085e4:	28c00417 	ldw	r3,16(r5)
 40085e8:	20800417 	ldw	r2,16(r4)
 40085ec:	defff604 	addi	sp,sp,-40
 40085f0:	ddc00715 	stw	r23,28(sp)
 40085f4:	dd400515 	stw	r21,20(sp)
 40085f8:	dfc00915 	stw	ra,36(sp)
 40085fc:	df000815 	stw	fp,32(sp)
 4008600:	dd800615 	stw	r22,24(sp)
 4008604:	dd000415 	stw	r20,16(sp)
 4008608:	dcc00315 	stw	r19,12(sp)
 400860c:	dc800215 	stw	r18,8(sp)
 4008610:	dc400115 	stw	r17,4(sp)
 4008614:	dc000015 	stw	r16,0(sp)
 4008618:	202f883a 	mov	r23,r4
 400861c:	282b883a 	mov	r21,r5
 4008620:	10c07416 	blt	r2,r3,40087f4 <quorem+0x210>
 4008624:	1c7fffc4 	addi	r17,r3,-1
 4008628:	8c45883a 	add	r2,r17,r17
 400862c:	1085883a 	add	r2,r2,r2
 4008630:	2c000504 	addi	r16,r5,20
 4008634:	24c00504 	addi	r19,r4,20
 4008638:	14ed883a 	add	r22,r2,r19
 400863c:	80a5883a 	add	r18,r16,r2
 4008640:	b7000017 	ldw	fp,0(r22)
 4008644:	91400017 	ldw	r5,0(r18)
 4008648:	e009883a 	mov	r4,fp
 400864c:	29400044 	addi	r5,r5,1
 4008650:	400ce080 	call	400ce08 <__udivsi3>
 4008654:	1029883a 	mov	r20,r2
 4008658:	10003c1e 	bne	r2,zero,400874c <quorem+0x168>
 400865c:	a80b883a 	mov	r5,r21
 4008660:	b809883a 	mov	r4,r23
 4008664:	400a7b80 	call	400a7b8 <__mcmp>
 4008668:	10002b16 	blt	r2,zero,4008718 <quorem+0x134>
 400866c:	a5000044 	addi	r20,r20,1
 4008670:	980f883a 	mov	r7,r19
 4008674:	0011883a 	mov	r8,zero
 4008678:	0009883a 	mov	r4,zero
 400867c:	81400017 	ldw	r5,0(r16)
 4008680:	38c00017 	ldw	r3,0(r7)
 4008684:	84000104 	addi	r16,r16,4
 4008688:	28bfffcc 	andi	r2,r5,65535
 400868c:	2085883a 	add	r2,r4,r2
 4008690:	11bfffcc 	andi	r6,r2,65535
 4008694:	193fffcc 	andi	r4,r3,65535
 4008698:	1004d43a 	srli	r2,r2,16
 400869c:	280ad43a 	srli	r5,r5,16
 40086a0:	2189c83a 	sub	r4,r4,r6
 40086a4:	2209883a 	add	r4,r4,r8
 40086a8:	1806d43a 	srli	r3,r3,16
 40086ac:	288b883a 	add	r5,r5,r2
 40086b0:	200dd43a 	srai	r6,r4,16
 40086b4:	28bfffcc 	andi	r2,r5,65535
 40086b8:	1887c83a 	sub	r3,r3,r2
 40086bc:	1987883a 	add	r3,r3,r6
 40086c0:	3900000d 	sth	r4,0(r7)
 40086c4:	38c0008d 	sth	r3,2(r7)
 40086c8:	2808d43a 	srli	r4,r5,16
 40086cc:	39c00104 	addi	r7,r7,4
 40086d0:	1811d43a 	srai	r8,r3,16
 40086d4:	943fe92e 	bgeu	r18,r16,400867c <quorem+0x98>
 40086d8:	8c45883a 	add	r2,r17,r17
 40086dc:	1085883a 	add	r2,r2,r2
 40086e0:	9885883a 	add	r2,r19,r2
 40086e4:	10c00017 	ldw	r3,0(r2)
 40086e8:	18000b1e 	bne	r3,zero,4008718 <quorem+0x134>
 40086ec:	113fff04 	addi	r4,r2,-4
 40086f0:	9900082e 	bgeu	r19,r4,4008714 <quorem+0x130>
 40086f4:	10bfff17 	ldw	r2,-4(r2)
 40086f8:	10000326 	beq	r2,zero,4008708 <quorem+0x124>
 40086fc:	00000506 	br	4008714 <quorem+0x130>
 4008700:	20800017 	ldw	r2,0(r4)
 4008704:	1000031e 	bne	r2,zero,4008714 <quorem+0x130>
 4008708:	213fff04 	addi	r4,r4,-4
 400870c:	8c7fffc4 	addi	r17,r17,-1
 4008710:	993ffb36 	bltu	r19,r4,4008700 <quorem+0x11c>
 4008714:	bc400415 	stw	r17,16(r23)
 4008718:	a005883a 	mov	r2,r20
 400871c:	dfc00917 	ldw	ra,36(sp)
 4008720:	df000817 	ldw	fp,32(sp)
 4008724:	ddc00717 	ldw	r23,28(sp)
 4008728:	dd800617 	ldw	r22,24(sp)
 400872c:	dd400517 	ldw	r21,20(sp)
 4008730:	dd000417 	ldw	r20,16(sp)
 4008734:	dcc00317 	ldw	r19,12(sp)
 4008738:	dc800217 	ldw	r18,8(sp)
 400873c:	dc400117 	ldw	r17,4(sp)
 4008740:	dc000017 	ldw	r16,0(sp)
 4008744:	dec00a04 	addi	sp,sp,40
 4008748:	f800283a 	ret
 400874c:	980f883a 	mov	r7,r19
 4008750:	8011883a 	mov	r8,r16
 4008754:	0013883a 	mov	r9,zero
 4008758:	000d883a 	mov	r6,zero
 400875c:	40c00017 	ldw	r3,0(r8)
 4008760:	39000017 	ldw	r4,0(r7)
 4008764:	42000104 	addi	r8,r8,4
 4008768:	18bfffcc 	andi	r2,r3,65535
 400876c:	a085383a 	mul	r2,r20,r2
 4008770:	1806d43a 	srli	r3,r3,16
 4008774:	217fffcc 	andi	r5,r4,65535
 4008778:	3085883a 	add	r2,r6,r2
 400877c:	11bfffcc 	andi	r6,r2,65535
 4008780:	a0c7383a 	mul	r3,r20,r3
 4008784:	1004d43a 	srli	r2,r2,16
 4008788:	298bc83a 	sub	r5,r5,r6
 400878c:	2a4b883a 	add	r5,r5,r9
 4008790:	2008d43a 	srli	r4,r4,16
 4008794:	1887883a 	add	r3,r3,r2
 4008798:	280dd43a 	srai	r6,r5,16
 400879c:	18bfffcc 	andi	r2,r3,65535
 40087a0:	2089c83a 	sub	r4,r4,r2
 40087a4:	2189883a 	add	r4,r4,r6
 40087a8:	3900008d 	sth	r4,2(r7)
 40087ac:	3940000d 	sth	r5,0(r7)
 40087b0:	180cd43a 	srli	r6,r3,16
 40087b4:	39c00104 	addi	r7,r7,4
 40087b8:	2013d43a 	srai	r9,r4,16
 40087bc:	923fe72e 	bgeu	r18,r8,400875c <quorem+0x178>
 40087c0:	e03fa61e 	bne	fp,zero,400865c <quorem+0x78>
 40087c4:	b0ffff04 	addi	r3,r22,-4
 40087c8:	98c0082e 	bgeu	r19,r3,40087ec <quorem+0x208>
 40087cc:	b0bfff17 	ldw	r2,-4(r22)
 40087d0:	10000326 	beq	r2,zero,40087e0 <quorem+0x1fc>
 40087d4:	00000506 	br	40087ec <quorem+0x208>
 40087d8:	18800017 	ldw	r2,0(r3)
 40087dc:	1000031e 	bne	r2,zero,40087ec <quorem+0x208>
 40087e0:	18ffff04 	addi	r3,r3,-4
 40087e4:	8c7fffc4 	addi	r17,r17,-1
 40087e8:	98fffb36 	bltu	r19,r3,40087d8 <quorem+0x1f4>
 40087ec:	bc400415 	stw	r17,16(r23)
 40087f0:	003f9a06 	br	400865c <quorem+0x78>
 40087f4:	0005883a 	mov	r2,zero
 40087f8:	003fc806 	br	400871c <quorem+0x138>

040087fc <_dtoa_r>:
 40087fc:	22001017 	ldw	r8,64(r4)
 4008800:	deffda04 	addi	sp,sp,-152
 4008804:	dd402115 	stw	r21,132(sp)
 4008808:	dd002015 	stw	r20,128(sp)
 400880c:	dc801e15 	stw	r18,120(sp)
 4008810:	dc401d15 	stw	r17,116(sp)
 4008814:	dfc02515 	stw	ra,148(sp)
 4008818:	df002415 	stw	fp,144(sp)
 400881c:	ddc02315 	stw	r23,140(sp)
 4008820:	dd802215 	stw	r22,136(sp)
 4008824:	dcc01f15 	stw	r19,124(sp)
 4008828:	dc001c15 	stw	r16,112(sp)
 400882c:	d9001615 	stw	r4,88(sp)
 4008830:	3023883a 	mov	r17,r6
 4008834:	2829883a 	mov	r20,r5
 4008838:	d9c01715 	stw	r7,92(sp)
 400883c:	dc802817 	ldw	r18,160(sp)
 4008840:	302b883a 	mov	r21,r6
 4008844:	40000a26 	beq	r8,zero,4008870 <_dtoa_r+0x74>
 4008848:	20801117 	ldw	r2,68(r4)
 400884c:	400b883a 	mov	r5,r8
 4008850:	40800115 	stw	r2,4(r8)
 4008854:	20c01117 	ldw	r3,68(r4)
 4008858:	00800044 	movi	r2,1
 400885c:	10c4983a 	sll	r2,r2,r3
 4008860:	40800215 	stw	r2,8(r8)
 4008864:	400a65c0 	call	400a65c <_Bfree>
 4008868:	d8c01617 	ldw	r3,88(sp)
 400886c:	18001015 	stw	zero,64(r3)
 4008870:	8800a316 	blt	r17,zero,4008b00 <_dtoa_r+0x304>
 4008874:	90000015 	stw	zero,0(r18)
 4008878:	a8dffc2c 	andhi	r3,r21,32752
 400887c:	009ffc34 	movhi	r2,32752
 4008880:	18809126 	beq	r3,r2,4008ac8 <_dtoa_r+0x2cc>
 4008884:	000d883a 	mov	r6,zero
 4008888:	000f883a 	mov	r7,zero
 400888c:	a009883a 	mov	r4,r20
 4008890:	a80b883a 	mov	r5,r21
 4008894:	dd001215 	stw	r20,72(sp)
 4008898:	dd401315 	stw	r21,76(sp)
 400889c:	40038e00 	call	40038e0 <__nedf2>
 40088a0:	1000171e 	bne	r2,zero,4008900 <_dtoa_r+0x104>
 40088a4:	d9802717 	ldw	r6,156(sp)
 40088a8:	00800044 	movi	r2,1
 40088ac:	30800015 	stw	r2,0(r6)
 40088b0:	d8802917 	ldw	r2,164(sp)
 40088b4:	10029b26 	beq	r2,zero,4009324 <_dtoa_r+0xb28>
 40088b8:	d9002917 	ldw	r4,164(sp)
 40088bc:	00810074 	movhi	r2,1025
 40088c0:	1084c344 	addi	r2,r2,4877
 40088c4:	10ffffc4 	addi	r3,r2,-1
 40088c8:	20800015 	stw	r2,0(r4)
 40088cc:	1805883a 	mov	r2,r3
 40088d0:	dfc02517 	ldw	ra,148(sp)
 40088d4:	df002417 	ldw	fp,144(sp)
 40088d8:	ddc02317 	ldw	r23,140(sp)
 40088dc:	dd802217 	ldw	r22,136(sp)
 40088e0:	dd402117 	ldw	r21,132(sp)
 40088e4:	dd002017 	ldw	r20,128(sp)
 40088e8:	dcc01f17 	ldw	r19,124(sp)
 40088ec:	dc801e17 	ldw	r18,120(sp)
 40088f0:	dc401d17 	ldw	r17,116(sp)
 40088f4:	dc001c17 	ldw	r16,112(sp)
 40088f8:	dec02604 	addi	sp,sp,152
 40088fc:	f800283a 	ret
 4008900:	d9001617 	ldw	r4,88(sp)
 4008904:	d9401217 	ldw	r5,72(sp)
 4008908:	d8800104 	addi	r2,sp,4
 400890c:	a80d883a 	mov	r6,r21
 4008910:	d9c00204 	addi	r7,sp,8
 4008914:	d8800015 	stw	r2,0(sp)
 4008918:	400ac980 	call	400ac98 <__d2b>
 400891c:	d8800715 	stw	r2,28(sp)
 4008920:	a804d53a 	srli	r2,r21,20
 4008924:	1101ffcc 	andi	r4,r2,2047
 4008928:	20008626 	beq	r4,zero,4008b44 <_dtoa_r+0x348>
 400892c:	d8c01217 	ldw	r3,72(sp)
 4008930:	00800434 	movhi	r2,16
 4008934:	10bfffc4 	addi	r2,r2,-1
 4008938:	ddc00117 	ldw	r23,4(sp)
 400893c:	a884703a 	and	r2,r21,r2
 4008940:	1811883a 	mov	r8,r3
 4008944:	124ffc34 	orhi	r9,r2,16368
 4008948:	25bf0044 	addi	r22,r4,-1023
 400894c:	d8000815 	stw	zero,32(sp)
 4008950:	0005883a 	mov	r2,zero
 4008954:	00cffe34 	movhi	r3,16376
 4008958:	480b883a 	mov	r5,r9
 400895c:	4009883a 	mov	r4,r8
 4008960:	180f883a 	mov	r7,r3
 4008964:	100d883a 	mov	r6,r2
 4008968:	40031480 	call	4003148 <__subdf3>
 400896c:	0218dbf4 	movhi	r8,25455
 4008970:	4210d844 	addi	r8,r8,17249
 4008974:	024ff4f4 	movhi	r9,16339
 4008978:	4a61e9c4 	addi	r9,r9,-30809
 400897c:	480f883a 	mov	r7,r9
 4008980:	400d883a 	mov	r6,r8
 4008984:	180b883a 	mov	r5,r3
 4008988:	1009883a 	mov	r4,r2
 400898c:	400323c0 	call	400323c <__muldf3>
 4008990:	0222d874 	movhi	r8,35681
 4008994:	42322cc4 	addi	r8,r8,-14157
 4008998:	024ff1f4 	movhi	r9,16327
 400899c:	4a628a04 	addi	r9,r9,-30168
 40089a0:	480f883a 	mov	r7,r9
 40089a4:	400d883a 	mov	r6,r8
 40089a8:	180b883a 	mov	r5,r3
 40089ac:	1009883a 	mov	r4,r2
 40089b0:	40031c80 	call	40031c8 <__adddf3>
 40089b4:	b009883a 	mov	r4,r22
 40089b8:	1021883a 	mov	r16,r2
 40089bc:	1823883a 	mov	r17,r3
 40089c0:	40039f00 	call	40039f0 <__floatsidf>
 40089c4:	021427f4 	movhi	r8,20639
 40089c8:	421e7ec4 	addi	r8,r8,31227
 40089cc:	024ff4f4 	movhi	r9,16339
 40089d0:	4a5104c4 	addi	r9,r9,17427
 40089d4:	480f883a 	mov	r7,r9
 40089d8:	400d883a 	mov	r6,r8
 40089dc:	180b883a 	mov	r5,r3
 40089e0:	1009883a 	mov	r4,r2
 40089e4:	400323c0 	call	400323c <__muldf3>
 40089e8:	180f883a 	mov	r7,r3
 40089ec:	880b883a 	mov	r5,r17
 40089f0:	100d883a 	mov	r6,r2
 40089f4:	8009883a 	mov	r4,r16
 40089f8:	40031c80 	call	40031c8 <__adddf3>
 40089fc:	1009883a 	mov	r4,r2
 4008a00:	180b883a 	mov	r5,r3
 4008a04:	1021883a 	mov	r16,r2
 4008a08:	1823883a 	mov	r17,r3
 4008a0c:	4003ae80 	call	4003ae8 <__fixdfsi>
 4008a10:	000d883a 	mov	r6,zero
 4008a14:	000f883a 	mov	r7,zero
 4008a18:	8009883a 	mov	r4,r16
 4008a1c:	880b883a 	mov	r5,r17
 4008a20:	d8800d15 	stw	r2,52(sp)
 4008a24:	400cab00 	call	400cab0 <__ltdf2>
 4008a28:	10031716 	blt	r2,zero,4009688 <_dtoa_r+0xe8c>
 4008a2c:	d8c00d17 	ldw	r3,52(sp)
 4008a30:	00800584 	movi	r2,22
 4008a34:	10c1482e 	bgeu	r2,r3,4008f58 <_dtoa_r+0x75c>
 4008a38:	01000044 	movi	r4,1
 4008a3c:	d9000c15 	stw	r4,48(sp)
 4008a40:	bd85c83a 	sub	r2,r23,r22
 4008a44:	11bfffc4 	addi	r6,r2,-1
 4008a48:	30030b16 	blt	r6,zero,4009678 <_dtoa_r+0xe7c>
 4008a4c:	d9800a15 	stw	r6,40(sp)
 4008a50:	d8001115 	stw	zero,68(sp)
 4008a54:	d8c00d17 	ldw	r3,52(sp)
 4008a58:	1802ff16 	blt	r3,zero,4009658 <_dtoa_r+0xe5c>
 4008a5c:	d9000a17 	ldw	r4,40(sp)
 4008a60:	d8c00915 	stw	r3,36(sp)
 4008a64:	d8001015 	stw	zero,64(sp)
 4008a68:	20c9883a 	add	r4,r4,r3
 4008a6c:	d9000a15 	stw	r4,40(sp)
 4008a70:	d9001717 	ldw	r4,92(sp)
 4008a74:	00800244 	movi	r2,9
 4008a78:	11004636 	bltu	r2,r4,4008b94 <_dtoa_r+0x398>
 4008a7c:	00800144 	movi	r2,5
 4008a80:	11020416 	blt	r2,r4,4009294 <_dtoa_r+0xa98>
 4008a84:	04400044 	movi	r17,1
 4008a88:	d8c01717 	ldw	r3,92(sp)
 4008a8c:	00800144 	movi	r2,5
 4008a90:	10c1ed36 	bltu	r2,r3,4009248 <_dtoa_r+0xa4c>
 4008a94:	18c5883a 	add	r2,r3,r3
 4008a98:	1085883a 	add	r2,r2,r2
 4008a9c:	00c10074 	movhi	r3,1025
 4008aa0:	18e2ac04 	addi	r3,r3,-30032
 4008aa4:	10c5883a 	add	r2,r2,r3
 4008aa8:	11000017 	ldw	r4,0(r2)
 4008aac:	2000683a 	jmp	r4
 4008ab0:	04008b9c 	xori	r16,zero,558
 4008ab4:	04008b9c 	xori	r16,zero,558
 4008ab8:	0400959c 	xori	r16,zero,598
 4008abc:	04009574 	movhi	r16,597
 4008ac0:	040095b8 	rdprs	r16,zero,598
 4008ac4:	040095c4 	movi	r16,599
 4008ac8:	d9002717 	ldw	r4,156(sp)
 4008acc:	0089c3c4 	movi	r2,9999
 4008ad0:	20800015 	stw	r2,0(r4)
 4008ad4:	a0001026 	beq	r20,zero,4008b18 <_dtoa_r+0x31c>
 4008ad8:	00c10074 	movhi	r3,1025
 4008adc:	18c4cf04 	addi	r3,r3,4924
 4008ae0:	d9802917 	ldw	r6,164(sp)
 4008ae4:	303f7926 	beq	r6,zero,40088cc <_dtoa_r+0xd0>
 4008ae8:	188000c7 	ldb	r2,3(r3)
 4008aec:	190000c4 	addi	r4,r3,3
 4008af0:	1000101e 	bne	r2,zero,4008b34 <_dtoa_r+0x338>
 4008af4:	d8802917 	ldw	r2,164(sp)
 4008af8:	11000015 	stw	r4,0(r2)
 4008afc:	003f7306 	br	40088cc <_dtoa_r+0xd0>
 4008b00:	00a00034 	movhi	r2,32768
 4008b04:	10bfffc4 	addi	r2,r2,-1
 4008b08:	00c00044 	movi	r3,1
 4008b0c:	88aa703a 	and	r21,r17,r2
 4008b10:	90c00015 	stw	r3,0(r18)
 4008b14:	003f5806 	br	4008878 <_dtoa_r+0x7c>
 4008b18:	00800434 	movhi	r2,16
 4008b1c:	10bfffc4 	addi	r2,r2,-1
 4008b20:	a884703a 	and	r2,r21,r2
 4008b24:	103fec1e 	bne	r2,zero,4008ad8 <_dtoa_r+0x2dc>
 4008b28:	00c10074 	movhi	r3,1025
 4008b2c:	18c4cc04 	addi	r3,r3,4912
 4008b30:	003feb06 	br	4008ae0 <_dtoa_r+0x2e4>
 4008b34:	d8802917 	ldw	r2,164(sp)
 4008b38:	19000204 	addi	r4,r3,8
 4008b3c:	11000015 	stw	r4,0(r2)
 4008b40:	003f6206 	br	40088cc <_dtoa_r+0xd0>
 4008b44:	ddc00117 	ldw	r23,4(sp)
 4008b48:	d8800217 	ldw	r2,8(sp)
 4008b4c:	01000804 	movi	r4,32
 4008b50:	b8c10c84 	addi	r3,r23,1074
 4008b54:	18a3883a 	add	r17,r3,r2
 4008b58:	2441b80e 	bge	r4,r17,400923c <_dtoa_r+0xa40>
 4008b5c:	00c01004 	movi	r3,64
 4008b60:	1c47c83a 	sub	r3,r3,r17
 4008b64:	88bff804 	addi	r2,r17,-32
 4008b68:	a8c6983a 	sll	r3,r21,r3
 4008b6c:	a084d83a 	srl	r2,r20,r2
 4008b70:	1888b03a 	or	r4,r3,r2
 4008b74:	400cb380 	call	400cb38 <__floatunsidf>
 4008b78:	1011883a 	mov	r8,r2
 4008b7c:	00bf8434 	movhi	r2,65040
 4008b80:	01000044 	movi	r4,1
 4008b84:	10d3883a 	add	r9,r2,r3
 4008b88:	8dbef344 	addi	r22,r17,-1075
 4008b8c:	d9000815 	stw	r4,32(sp)
 4008b90:	003f6f06 	br	4008950 <_dtoa_r+0x154>
 4008b94:	d8001715 	stw	zero,92(sp)
 4008b98:	04400044 	movi	r17,1
 4008b9c:	00bfffc4 	movi	r2,-1
 4008ba0:	00c00044 	movi	r3,1
 4008ba4:	d8800e15 	stw	r2,56(sp)
 4008ba8:	d8002615 	stw	zero,152(sp)
 4008bac:	d8800f15 	stw	r2,60(sp)
 4008bb0:	d8c00b15 	stw	r3,44(sp)
 4008bb4:	1021883a 	mov	r16,r2
 4008bb8:	d8801617 	ldw	r2,88(sp)
 4008bbc:	10001115 	stw	zero,68(r2)
 4008bc0:	d8801617 	ldw	r2,88(sp)
 4008bc4:	11401117 	ldw	r5,68(r2)
 4008bc8:	1009883a 	mov	r4,r2
 4008bcc:	400abdc0 	call	400abdc <_Balloc>
 4008bd0:	d8c01617 	ldw	r3,88(sp)
 4008bd4:	d8800515 	stw	r2,20(sp)
 4008bd8:	18801015 	stw	r2,64(r3)
 4008bdc:	00800384 	movi	r2,14
 4008be0:	14006836 	bltu	r2,r16,4008d84 <_dtoa_r+0x588>
 4008be4:	8805003a 	cmpeq	r2,r17,zero
 4008be8:	1000661e 	bne	r2,zero,4008d84 <_dtoa_r+0x588>
 4008bec:	d9000d17 	ldw	r4,52(sp)
 4008bf0:	0102300e 	bge	zero,r4,40094b4 <_dtoa_r+0xcb8>
 4008bf4:	208003cc 	andi	r2,r4,15
 4008bf8:	100490fa 	slli	r2,r2,3
 4008bfc:	2025d13a 	srai	r18,r4,4
 4008c00:	00c10074 	movhi	r3,1025
 4008c04:	18c4e004 	addi	r3,r3,4992
 4008c08:	10c5883a 	add	r2,r2,r3
 4008c0c:	90c0040c 	andi	r3,r18,16
 4008c10:	14000017 	ldw	r16,0(r2)
 4008c14:	14400117 	ldw	r17,4(r2)
 4008c18:	18036a1e 	bne	r3,zero,40099c4 <_dtoa_r+0x11c8>
 4008c1c:	05800084 	movi	r22,2
 4008c20:	90001026 	beq	r18,zero,4008c64 <_dtoa_r+0x468>
 4008c24:	04c10074 	movhi	r19,1025
 4008c28:	9cc51204 	addi	r19,r19,5192
 4008c2c:	9080004c 	andi	r2,r18,1
 4008c30:	1005003a 	cmpeq	r2,r2,zero
 4008c34:	1000081e 	bne	r2,zero,4008c58 <_dtoa_r+0x45c>
 4008c38:	99800017 	ldw	r6,0(r19)
 4008c3c:	99c00117 	ldw	r7,4(r19)
 4008c40:	880b883a 	mov	r5,r17
 4008c44:	8009883a 	mov	r4,r16
 4008c48:	400323c0 	call	400323c <__muldf3>
 4008c4c:	1021883a 	mov	r16,r2
 4008c50:	b5800044 	addi	r22,r22,1
 4008c54:	1823883a 	mov	r17,r3
 4008c58:	9025d07a 	srai	r18,r18,1
 4008c5c:	9cc00204 	addi	r19,r19,8
 4008c60:	903ff21e 	bne	r18,zero,4008c2c <_dtoa_r+0x430>
 4008c64:	a80b883a 	mov	r5,r21
 4008c68:	a009883a 	mov	r4,r20
 4008c6c:	880f883a 	mov	r7,r17
 4008c70:	800d883a 	mov	r6,r16
 4008c74:	40036000 	call	4003600 <__divdf3>
 4008c78:	1029883a 	mov	r20,r2
 4008c7c:	182b883a 	mov	r21,r3
 4008c80:	d8c00c17 	ldw	r3,48(sp)
 4008c84:	1805003a 	cmpeq	r2,r3,zero
 4008c88:	1000081e 	bne	r2,zero,4008cac <_dtoa_r+0x4b0>
 4008c8c:	0005883a 	mov	r2,zero
 4008c90:	00cffc34 	movhi	r3,16368
 4008c94:	180f883a 	mov	r7,r3
 4008c98:	a009883a 	mov	r4,r20
 4008c9c:	a80b883a 	mov	r5,r21
 4008ca0:	100d883a 	mov	r6,r2
 4008ca4:	400cab00 	call	400cab0 <__ltdf2>
 4008ca8:	1003fe16 	blt	r2,zero,4009ca4 <_dtoa_r+0x14a8>
 4008cac:	b009883a 	mov	r4,r22
 4008cb0:	40039f00 	call	40039f0 <__floatsidf>
 4008cb4:	180b883a 	mov	r5,r3
 4008cb8:	1009883a 	mov	r4,r2
 4008cbc:	a00d883a 	mov	r6,r20
 4008cc0:	a80f883a 	mov	r7,r21
 4008cc4:	400323c0 	call	400323c <__muldf3>
 4008cc8:	0011883a 	mov	r8,zero
 4008ccc:	02500734 	movhi	r9,16412
 4008cd0:	1009883a 	mov	r4,r2
 4008cd4:	180b883a 	mov	r5,r3
 4008cd8:	480f883a 	mov	r7,r9
 4008cdc:	400d883a 	mov	r6,r8
 4008ce0:	40031c80 	call	40031c8 <__adddf3>
 4008ce4:	d9000f17 	ldw	r4,60(sp)
 4008ce8:	102d883a 	mov	r22,r2
 4008cec:	00bf3034 	movhi	r2,64704
 4008cf0:	18b9883a 	add	fp,r3,r2
 4008cf4:	e02f883a 	mov	r23,fp
 4008cf8:	20028f1e 	bne	r4,zero,4009738 <_dtoa_r+0xf3c>
 4008cfc:	0005883a 	mov	r2,zero
 4008d00:	00d00534 	movhi	r3,16404
 4008d04:	a009883a 	mov	r4,r20
 4008d08:	a80b883a 	mov	r5,r21
 4008d0c:	180f883a 	mov	r7,r3
 4008d10:	100d883a 	mov	r6,r2
 4008d14:	40031480 	call	4003148 <__subdf3>
 4008d18:	1009883a 	mov	r4,r2
 4008d1c:	e00f883a 	mov	r7,fp
 4008d20:	180b883a 	mov	r5,r3
 4008d24:	b00d883a 	mov	r6,r22
 4008d28:	1025883a 	mov	r18,r2
 4008d2c:	1827883a 	mov	r19,r3
 4008d30:	400ca280 	call	400ca28 <__gtdf2>
 4008d34:	00834f16 	blt	zero,r2,4009a74 <_dtoa_r+0x1278>
 4008d38:	e0e0003c 	xorhi	r3,fp,32768
 4008d3c:	9009883a 	mov	r4,r18
 4008d40:	980b883a 	mov	r5,r19
 4008d44:	180f883a 	mov	r7,r3
 4008d48:	b00d883a 	mov	r6,r22
 4008d4c:	400cab00 	call	400cab0 <__ltdf2>
 4008d50:	1000080e 	bge	r2,zero,4008d74 <_dtoa_r+0x578>
 4008d54:	0027883a 	mov	r19,zero
 4008d58:	0025883a 	mov	r18,zero
 4008d5c:	d8802617 	ldw	r2,152(sp)
 4008d60:	df000517 	ldw	fp,20(sp)
 4008d64:	d8000615 	stw	zero,24(sp)
 4008d68:	0084303a 	nor	r2,zero,r2
 4008d6c:	d8800d15 	stw	r2,52(sp)
 4008d70:	00019b06 	br	40093e0 <_dtoa_r+0xbe4>
 4008d74:	d9801217 	ldw	r6,72(sp)
 4008d78:	d8801317 	ldw	r2,76(sp)
 4008d7c:	3029883a 	mov	r20,r6
 4008d80:	102b883a 	mov	r21,r2
 4008d84:	d8c00217 	ldw	r3,8(sp)
 4008d88:	18008516 	blt	r3,zero,4008fa0 <_dtoa_r+0x7a4>
 4008d8c:	d9000d17 	ldw	r4,52(sp)
 4008d90:	00800384 	movi	r2,14
 4008d94:	11008216 	blt	r2,r4,4008fa0 <_dtoa_r+0x7a4>
 4008d98:	200490fa 	slli	r2,r4,3
 4008d9c:	d9802617 	ldw	r6,152(sp)
 4008da0:	00c10074 	movhi	r3,1025
 4008da4:	18c4e004 	addi	r3,r3,4992
 4008da8:	10c5883a 	add	r2,r2,r3
 4008dac:	14800017 	ldw	r18,0(r2)
 4008db0:	14c00117 	ldw	r19,4(r2)
 4008db4:	30031e16 	blt	r6,zero,4009a30 <_dtoa_r+0x1234>
 4008db8:	d9000517 	ldw	r4,20(sp)
 4008dbc:	d8c00f17 	ldw	r3,60(sp)
 4008dc0:	a823883a 	mov	r17,r21
 4008dc4:	a021883a 	mov	r16,r20
 4008dc8:	192b883a 	add	r21,r3,r4
 4008dcc:	2039883a 	mov	fp,r4
 4008dd0:	00000f06 	br	4008e10 <_dtoa_r+0x614>
 4008dd4:	0005883a 	mov	r2,zero
 4008dd8:	00d00934 	movhi	r3,16420
 4008ddc:	5009883a 	mov	r4,r10
 4008de0:	580b883a 	mov	r5,r11
 4008de4:	180f883a 	mov	r7,r3
 4008de8:	100d883a 	mov	r6,r2
 4008dec:	400323c0 	call	400323c <__muldf3>
 4008df0:	180b883a 	mov	r5,r3
 4008df4:	000d883a 	mov	r6,zero
 4008df8:	000f883a 	mov	r7,zero
 4008dfc:	1009883a 	mov	r4,r2
 4008e00:	1021883a 	mov	r16,r2
 4008e04:	1823883a 	mov	r17,r3
 4008e08:	40038e00 	call	40038e0 <__nedf2>
 4008e0c:	10004526 	beq	r2,zero,4008f24 <_dtoa_r+0x728>
 4008e10:	900d883a 	mov	r6,r18
 4008e14:	980f883a 	mov	r7,r19
 4008e18:	8009883a 	mov	r4,r16
 4008e1c:	880b883a 	mov	r5,r17
 4008e20:	40036000 	call	4003600 <__divdf3>
 4008e24:	180b883a 	mov	r5,r3
 4008e28:	1009883a 	mov	r4,r2
 4008e2c:	4003ae80 	call	4003ae8 <__fixdfsi>
 4008e30:	1009883a 	mov	r4,r2
 4008e34:	1029883a 	mov	r20,r2
 4008e38:	40039f00 	call	40039f0 <__floatsidf>
 4008e3c:	180f883a 	mov	r7,r3
 4008e40:	9009883a 	mov	r4,r18
 4008e44:	980b883a 	mov	r5,r19
 4008e48:	100d883a 	mov	r6,r2
 4008e4c:	400323c0 	call	400323c <__muldf3>
 4008e50:	180f883a 	mov	r7,r3
 4008e54:	880b883a 	mov	r5,r17
 4008e58:	8009883a 	mov	r4,r16
 4008e5c:	100d883a 	mov	r6,r2
 4008e60:	40031480 	call	4003148 <__subdf3>
 4008e64:	1015883a 	mov	r10,r2
 4008e68:	a0800c04 	addi	r2,r20,48
 4008e6c:	e0800005 	stb	r2,0(fp)
 4008e70:	e7000044 	addi	fp,fp,1
 4008e74:	1817883a 	mov	r11,r3
 4008e78:	e57fd61e 	bne	fp,r21,4008dd4 <_dtoa_r+0x5d8>
 4008e7c:	500d883a 	mov	r6,r10
 4008e80:	180f883a 	mov	r7,r3
 4008e84:	5009883a 	mov	r4,r10
 4008e88:	180b883a 	mov	r5,r3
 4008e8c:	40031c80 	call	40031c8 <__adddf3>
 4008e90:	100d883a 	mov	r6,r2
 4008e94:	9009883a 	mov	r4,r18
 4008e98:	980b883a 	mov	r5,r19
 4008e9c:	180f883a 	mov	r7,r3
 4008ea0:	1021883a 	mov	r16,r2
 4008ea4:	1823883a 	mov	r17,r3
 4008ea8:	400cab00 	call	400cab0 <__ltdf2>
 4008eac:	10000816 	blt	r2,zero,4008ed0 <_dtoa_r+0x6d4>
 4008eb0:	980b883a 	mov	r5,r19
 4008eb4:	800d883a 	mov	r6,r16
 4008eb8:	880f883a 	mov	r7,r17
 4008ebc:	9009883a 	mov	r4,r18
 4008ec0:	40038580 	call	4003858 <__eqdf2>
 4008ec4:	1000171e 	bne	r2,zero,4008f24 <_dtoa_r+0x728>
 4008ec8:	a080004c 	andi	r2,r20,1
 4008ecc:	10001526 	beq	r2,zero,4008f24 <_dtoa_r+0x728>
 4008ed0:	d8800d17 	ldw	r2,52(sp)
 4008ed4:	d8800415 	stw	r2,16(sp)
 4008ed8:	e009883a 	mov	r4,fp
 4008edc:	213fffc4 	addi	r4,r4,-1
 4008ee0:	20c00007 	ldb	r3,0(r4)
 4008ee4:	00800e44 	movi	r2,57
 4008ee8:	1880081e 	bne	r3,r2,4008f0c <_dtoa_r+0x710>
 4008eec:	d8800517 	ldw	r2,20(sp)
 4008ef0:	113ffa1e 	bne	r2,r4,4008edc <_dtoa_r+0x6e0>
 4008ef4:	d8c00417 	ldw	r3,16(sp)
 4008ef8:	d9800517 	ldw	r6,20(sp)
 4008efc:	00800c04 	movi	r2,48
 4008f00:	18c00044 	addi	r3,r3,1
 4008f04:	d8c00415 	stw	r3,16(sp)
 4008f08:	30800005 	stb	r2,0(r6)
 4008f0c:	20800003 	ldbu	r2,0(r4)
 4008f10:	d8c00417 	ldw	r3,16(sp)
 4008f14:	27000044 	addi	fp,r4,1
 4008f18:	10800044 	addi	r2,r2,1
 4008f1c:	d8c00d15 	stw	r3,52(sp)
 4008f20:	20800005 	stb	r2,0(r4)
 4008f24:	d9001617 	ldw	r4,88(sp)
 4008f28:	d9400717 	ldw	r5,28(sp)
 4008f2c:	400a65c0 	call	400a65c <_Bfree>
 4008f30:	e0000005 	stb	zero,0(fp)
 4008f34:	d9800d17 	ldw	r6,52(sp)
 4008f38:	d8c02717 	ldw	r3,156(sp)
 4008f3c:	d9002917 	ldw	r4,164(sp)
 4008f40:	30800044 	addi	r2,r6,1
 4008f44:	18800015 	stw	r2,0(r3)
 4008f48:	20029c26 	beq	r4,zero,40099bc <_dtoa_r+0x11c0>
 4008f4c:	d8c00517 	ldw	r3,20(sp)
 4008f50:	27000015 	stw	fp,0(r4)
 4008f54:	003e5d06 	br	40088cc <_dtoa_r+0xd0>
 4008f58:	d9800d17 	ldw	r6,52(sp)
 4008f5c:	00c10074 	movhi	r3,1025
 4008f60:	18c4e004 	addi	r3,r3,4992
 4008f64:	d9001217 	ldw	r4,72(sp)
 4008f68:	300490fa 	slli	r2,r6,3
 4008f6c:	d9401317 	ldw	r5,76(sp)
 4008f70:	10c5883a 	add	r2,r2,r3
 4008f74:	12000017 	ldw	r8,0(r2)
 4008f78:	12400117 	ldw	r9,4(r2)
 4008f7c:	400d883a 	mov	r6,r8
 4008f80:	480f883a 	mov	r7,r9
 4008f84:	400cab00 	call	400cab0 <__ltdf2>
 4008f88:	1000030e 	bge	r2,zero,4008f98 <_dtoa_r+0x79c>
 4008f8c:	d8800d17 	ldw	r2,52(sp)
 4008f90:	10bfffc4 	addi	r2,r2,-1
 4008f94:	d8800d15 	stw	r2,52(sp)
 4008f98:	d8000c15 	stw	zero,48(sp)
 4008f9c:	003ea806 	br	4008a40 <_dtoa_r+0x244>
 4008fa0:	d9000b17 	ldw	r4,44(sp)
 4008fa4:	202cc03a 	cmpne	r22,r4,zero
 4008fa8:	b000c71e 	bne	r22,zero,40092c8 <_dtoa_r+0xacc>
 4008fac:	dc001117 	ldw	r16,68(sp)
 4008fb0:	dc801017 	ldw	r18,64(sp)
 4008fb4:	0027883a 	mov	r19,zero
 4008fb8:	04000b0e 	bge	zero,r16,4008fe8 <_dtoa_r+0x7ec>
 4008fbc:	d8c00a17 	ldw	r3,40(sp)
 4008fc0:	00c0090e 	bge	zero,r3,4008fe8 <_dtoa_r+0x7ec>
 4008fc4:	8005883a 	mov	r2,r16
 4008fc8:	1c011316 	blt	r3,r16,4009418 <_dtoa_r+0xc1c>
 4008fcc:	d9000a17 	ldw	r4,40(sp)
 4008fd0:	d9801117 	ldw	r6,68(sp)
 4008fd4:	80a1c83a 	sub	r16,r16,r2
 4008fd8:	2089c83a 	sub	r4,r4,r2
 4008fdc:	308dc83a 	sub	r6,r6,r2
 4008fe0:	d9000a15 	stw	r4,40(sp)
 4008fe4:	d9801115 	stw	r6,68(sp)
 4008fe8:	d8801017 	ldw	r2,64(sp)
 4008fec:	0080150e 	bge	zero,r2,4009044 <_dtoa_r+0x848>
 4008ff0:	d8c00b17 	ldw	r3,44(sp)
 4008ff4:	1805003a 	cmpeq	r2,r3,zero
 4008ff8:	1001c91e 	bne	r2,zero,4009720 <_dtoa_r+0xf24>
 4008ffc:	04800e0e 	bge	zero,r18,4009038 <_dtoa_r+0x83c>
 4009000:	d9001617 	ldw	r4,88(sp)
 4009004:	980b883a 	mov	r5,r19
 4009008:	900d883a 	mov	r6,r18
 400900c:	400b4100 	call	400b410 <__pow5mult>
 4009010:	d9001617 	ldw	r4,88(sp)
 4009014:	d9800717 	ldw	r6,28(sp)
 4009018:	100b883a 	mov	r5,r2
 400901c:	1027883a 	mov	r19,r2
 4009020:	400b0ec0 	call	400b0ec <__multiply>
 4009024:	d9001617 	ldw	r4,88(sp)
 4009028:	d9400717 	ldw	r5,28(sp)
 400902c:	1023883a 	mov	r17,r2
 4009030:	400a65c0 	call	400a65c <_Bfree>
 4009034:	dc400715 	stw	r17,28(sp)
 4009038:	d9001017 	ldw	r4,64(sp)
 400903c:	248dc83a 	sub	r6,r4,r18
 4009040:	30010e1e 	bne	r6,zero,400947c <_dtoa_r+0xc80>
 4009044:	d9001617 	ldw	r4,88(sp)
 4009048:	04400044 	movi	r17,1
 400904c:	880b883a 	mov	r5,r17
 4009050:	400b2d40 	call	400b2d4 <__i2b>
 4009054:	d9800917 	ldw	r6,36(sp)
 4009058:	1025883a 	mov	r18,r2
 400905c:	0180040e 	bge	zero,r6,4009070 <_dtoa_r+0x874>
 4009060:	d9001617 	ldw	r4,88(sp)
 4009064:	100b883a 	mov	r5,r2
 4009068:	400b4100 	call	400b410 <__pow5mult>
 400906c:	1025883a 	mov	r18,r2
 4009070:	d8801717 	ldw	r2,92(sp)
 4009074:	8880f30e 	bge	r17,r2,4009444 <_dtoa_r+0xc48>
 4009078:	0023883a 	mov	r17,zero
 400907c:	d9800917 	ldw	r6,36(sp)
 4009080:	30019e1e 	bne	r6,zero,40096fc <_dtoa_r+0xf00>
 4009084:	00c00044 	movi	r3,1
 4009088:	d9000a17 	ldw	r4,40(sp)
 400908c:	20c5883a 	add	r2,r4,r3
 4009090:	10c007cc 	andi	r3,r2,31
 4009094:	1800841e 	bne	r3,zero,40092a8 <_dtoa_r+0xaac>
 4009098:	00800704 	movi	r2,28
 400909c:	d9000a17 	ldw	r4,40(sp)
 40090a0:	d9801117 	ldw	r6,68(sp)
 40090a4:	80a1883a 	add	r16,r16,r2
 40090a8:	2089883a 	add	r4,r4,r2
 40090ac:	308d883a 	add	r6,r6,r2
 40090b0:	d9000a15 	stw	r4,40(sp)
 40090b4:	d9801115 	stw	r6,68(sp)
 40090b8:	d8801117 	ldw	r2,68(sp)
 40090bc:	0080050e 	bge	zero,r2,40090d4 <_dtoa_r+0x8d8>
 40090c0:	d9400717 	ldw	r5,28(sp)
 40090c4:	d9001617 	ldw	r4,88(sp)
 40090c8:	100d883a 	mov	r6,r2
 40090cc:	400afa00 	call	400afa0 <__lshift>
 40090d0:	d8800715 	stw	r2,28(sp)
 40090d4:	d8c00a17 	ldw	r3,40(sp)
 40090d8:	00c0050e 	bge	zero,r3,40090f0 <_dtoa_r+0x8f4>
 40090dc:	d9001617 	ldw	r4,88(sp)
 40090e0:	900b883a 	mov	r5,r18
 40090e4:	180d883a 	mov	r6,r3
 40090e8:	400afa00 	call	400afa0 <__lshift>
 40090ec:	1025883a 	mov	r18,r2
 40090f0:	d9000c17 	ldw	r4,48(sp)
 40090f4:	2005003a 	cmpeq	r2,r4,zero
 40090f8:	10016f26 	beq	r2,zero,40096b8 <_dtoa_r+0xebc>
 40090fc:	d9000f17 	ldw	r4,60(sp)
 4009100:	0102170e 	bge	zero,r4,4009960 <_dtoa_r+0x1164>
 4009104:	d9800b17 	ldw	r6,44(sp)
 4009108:	3005003a 	cmpeq	r2,r6,zero
 400910c:	1000881e 	bne	r2,zero,4009330 <_dtoa_r+0xb34>
 4009110:	0400050e 	bge	zero,r16,4009128 <_dtoa_r+0x92c>
 4009114:	d9001617 	ldw	r4,88(sp)
 4009118:	980b883a 	mov	r5,r19
 400911c:	800d883a 	mov	r6,r16
 4009120:	400afa00 	call	400afa0 <__lshift>
 4009124:	1027883a 	mov	r19,r2
 4009128:	8804c03a 	cmpne	r2,r17,zero
 400912c:	1002541e 	bne	r2,zero,4009a80 <_dtoa_r+0x1284>
 4009130:	980b883a 	mov	r5,r19
 4009134:	dd800517 	ldw	r22,20(sp)
 4009138:	dcc00615 	stw	r19,24(sp)
 400913c:	a700004c 	andi	fp,r20,1
 4009140:	2827883a 	mov	r19,r5
 4009144:	d9000717 	ldw	r4,28(sp)
 4009148:	900b883a 	mov	r5,r18
 400914c:	40085e40 	call	40085e4 <quorem>
 4009150:	d9000717 	ldw	r4,28(sp)
 4009154:	d9400617 	ldw	r5,24(sp)
 4009158:	1023883a 	mov	r17,r2
 400915c:	8dc00c04 	addi	r23,r17,48
 4009160:	400a7b80 	call	400a7b8 <__mcmp>
 4009164:	d9001617 	ldw	r4,88(sp)
 4009168:	900b883a 	mov	r5,r18
 400916c:	980d883a 	mov	r6,r19
 4009170:	1029883a 	mov	r20,r2
 4009174:	400ae140 	call	400ae14 <__mdiff>
 4009178:	102b883a 	mov	r21,r2
 400917c:	10800317 	ldw	r2,12(r2)
 4009180:	1001281e 	bne	r2,zero,4009624 <_dtoa_r+0xe28>
 4009184:	d9000717 	ldw	r4,28(sp)
 4009188:	a80b883a 	mov	r5,r21
 400918c:	400a7b80 	call	400a7b8 <__mcmp>
 4009190:	d9001617 	ldw	r4,88(sp)
 4009194:	1021883a 	mov	r16,r2
 4009198:	a80b883a 	mov	r5,r21
 400919c:	400a65c0 	call	400a65c <_Bfree>
 40091a0:	8000041e 	bne	r16,zero,40091b4 <_dtoa_r+0x9b8>
 40091a4:	d8801717 	ldw	r2,92(sp)
 40091a8:	1000021e 	bne	r2,zero,40091b4 <_dtoa_r+0x9b8>
 40091ac:	e004c03a 	cmpne	r2,fp,zero
 40091b0:	10011726 	beq	r2,zero,4009610 <_dtoa_r+0xe14>
 40091b4:	a0010616 	blt	r20,zero,40095d0 <_dtoa_r+0xdd4>
 40091b8:	a000041e 	bne	r20,zero,40091cc <_dtoa_r+0x9d0>
 40091bc:	d8c01717 	ldw	r3,92(sp)
 40091c0:	1800021e 	bne	r3,zero,40091cc <_dtoa_r+0x9d0>
 40091c4:	e004c03a 	cmpne	r2,fp,zero
 40091c8:	10010126 	beq	r2,zero,40095d0 <_dtoa_r+0xdd4>
 40091cc:	04023d16 	blt	zero,r16,4009ac4 <_dtoa_r+0x12c8>
 40091d0:	b5c00005 	stb	r23,0(r22)
 40091d4:	d9800517 	ldw	r6,20(sp)
 40091d8:	d9000f17 	ldw	r4,60(sp)
 40091dc:	b5800044 	addi	r22,r22,1
 40091e0:	3105883a 	add	r2,r6,r4
 40091e4:	b0806526 	beq	r22,r2,400937c <_dtoa_r+0xb80>
 40091e8:	d9400717 	ldw	r5,28(sp)
 40091ec:	d9001617 	ldw	r4,88(sp)
 40091f0:	01800284 	movi	r6,10
 40091f4:	000f883a 	mov	r7,zero
 40091f8:	400b3100 	call	400b310 <__multadd>
 40091fc:	d8800715 	stw	r2,28(sp)
 4009200:	d8800617 	ldw	r2,24(sp)
 4009204:	14c10c26 	beq	r2,r19,4009638 <_dtoa_r+0xe3c>
 4009208:	d9400617 	ldw	r5,24(sp)
 400920c:	d9001617 	ldw	r4,88(sp)
 4009210:	01800284 	movi	r6,10
 4009214:	000f883a 	mov	r7,zero
 4009218:	400b3100 	call	400b310 <__multadd>
 400921c:	d9001617 	ldw	r4,88(sp)
 4009220:	980b883a 	mov	r5,r19
 4009224:	01800284 	movi	r6,10
 4009228:	000f883a 	mov	r7,zero
 400922c:	d8800615 	stw	r2,24(sp)
 4009230:	400b3100 	call	400b310 <__multadd>
 4009234:	1027883a 	mov	r19,r2
 4009238:	003fc206 	br	4009144 <_dtoa_r+0x948>
 400923c:	2445c83a 	sub	r2,r4,r17
 4009240:	a088983a 	sll	r4,r20,r2
 4009244:	003e4b06 	br	4008b74 <_dtoa_r+0x378>
 4009248:	01bfffc4 	movi	r6,-1
 400924c:	00800044 	movi	r2,1
 4009250:	d9800e15 	stw	r6,56(sp)
 4009254:	d9800f15 	stw	r6,60(sp)
 4009258:	d8800b15 	stw	r2,44(sp)
 400925c:	d8c01617 	ldw	r3,88(sp)
 4009260:	008005c4 	movi	r2,23
 4009264:	18001115 	stw	zero,68(r3)
 4009268:	1580082e 	bgeu	r2,r22,400928c <_dtoa_r+0xa90>
 400926c:	00c00104 	movi	r3,4
 4009270:	0009883a 	mov	r4,zero
 4009274:	18c7883a 	add	r3,r3,r3
 4009278:	18800504 	addi	r2,r3,20
 400927c:	21000044 	addi	r4,r4,1
 4009280:	b0bffc2e 	bgeu	r22,r2,4009274 <_dtoa_r+0xa78>
 4009284:	d9801617 	ldw	r6,88(sp)
 4009288:	31001115 	stw	r4,68(r6)
 400928c:	dc000f17 	ldw	r16,60(sp)
 4009290:	003e4b06 	br	4008bc0 <_dtoa_r+0x3c4>
 4009294:	d9801717 	ldw	r6,92(sp)
 4009298:	0023883a 	mov	r17,zero
 400929c:	31bfff04 	addi	r6,r6,-4
 40092a0:	d9801715 	stw	r6,92(sp)
 40092a4:	003df806 	br	4008a88 <_dtoa_r+0x28c>
 40092a8:	00800804 	movi	r2,32
 40092ac:	10c9c83a 	sub	r4,r2,r3
 40092b0:	00c00104 	movi	r3,4
 40092b4:	19005a16 	blt	r3,r4,4009420 <_dtoa_r+0xc24>
 40092b8:	008000c4 	movi	r2,3
 40092bc:	113f7e16 	blt	r2,r4,40090b8 <_dtoa_r+0x8bc>
 40092c0:	20800704 	addi	r2,r4,28
 40092c4:	003f7506 	br	400909c <_dtoa_r+0x8a0>
 40092c8:	d9801717 	ldw	r6,92(sp)
 40092cc:	00800044 	movi	r2,1
 40092d0:	1180a10e 	bge	r2,r6,4009558 <_dtoa_r+0xd5c>
 40092d4:	d9800f17 	ldw	r6,60(sp)
 40092d8:	d8c01017 	ldw	r3,64(sp)
 40092dc:	30bfffc4 	addi	r2,r6,-1
 40092e0:	1881c616 	blt	r3,r2,40099fc <_dtoa_r+0x1200>
 40092e4:	18a5c83a 	sub	r18,r3,r2
 40092e8:	d8800f17 	ldw	r2,60(sp)
 40092ec:	10026216 	blt	r2,zero,4009c78 <_dtoa_r+0x147c>
 40092f0:	dc001117 	ldw	r16,68(sp)
 40092f4:	1007883a 	mov	r3,r2
 40092f8:	d9800a17 	ldw	r6,40(sp)
 40092fc:	d8801117 	ldw	r2,68(sp)
 4009300:	d9001617 	ldw	r4,88(sp)
 4009304:	30cd883a 	add	r6,r6,r3
 4009308:	10c5883a 	add	r2,r2,r3
 400930c:	01400044 	movi	r5,1
 4009310:	d9800a15 	stw	r6,40(sp)
 4009314:	d8801115 	stw	r2,68(sp)
 4009318:	400b2d40 	call	400b2d4 <__i2b>
 400931c:	1027883a 	mov	r19,r2
 4009320:	003f2506 	br	4008fb8 <_dtoa_r+0x7bc>
 4009324:	00c10074 	movhi	r3,1025
 4009328:	18c4c304 	addi	r3,r3,4876
 400932c:	003d6706 	br	40088cc <_dtoa_r+0xd0>
 4009330:	dd800517 	ldw	r22,20(sp)
 4009334:	04000044 	movi	r16,1
 4009338:	00000706 	br	4009358 <_dtoa_r+0xb5c>
 400933c:	d9400717 	ldw	r5,28(sp)
 4009340:	d9001617 	ldw	r4,88(sp)
 4009344:	01800284 	movi	r6,10
 4009348:	000f883a 	mov	r7,zero
 400934c:	400b3100 	call	400b310 <__multadd>
 4009350:	d8800715 	stw	r2,28(sp)
 4009354:	84000044 	addi	r16,r16,1
 4009358:	d9000717 	ldw	r4,28(sp)
 400935c:	900b883a 	mov	r5,r18
 4009360:	40085e40 	call	40085e4 <quorem>
 4009364:	15c00c04 	addi	r23,r2,48
 4009368:	b5c00005 	stb	r23,0(r22)
 400936c:	d8c00f17 	ldw	r3,60(sp)
 4009370:	b5800044 	addi	r22,r22,1
 4009374:	80fff116 	blt	r16,r3,400933c <_dtoa_r+0xb40>
 4009378:	d8000615 	stw	zero,24(sp)
 400937c:	d9400717 	ldw	r5,28(sp)
 4009380:	d9001617 	ldw	r4,88(sp)
 4009384:	01800044 	movi	r6,1
 4009388:	400afa00 	call	400afa0 <__lshift>
 400938c:	1009883a 	mov	r4,r2
 4009390:	900b883a 	mov	r5,r18
 4009394:	d8800715 	stw	r2,28(sp)
 4009398:	400a7b80 	call	400a7b8 <__mcmp>
 400939c:	00803c0e 	bge	zero,r2,4009490 <_dtoa_r+0xc94>
 40093a0:	b009883a 	mov	r4,r22
 40093a4:	213fffc4 	addi	r4,r4,-1
 40093a8:	21400003 	ldbu	r5,0(r4)
 40093ac:	00800e44 	movi	r2,57
 40093b0:	28c03fcc 	andi	r3,r5,255
 40093b4:	18c0201c 	xori	r3,r3,128
 40093b8:	18ffe004 	addi	r3,r3,-128
 40093bc:	1881981e 	bne	r3,r2,4009a20 <_dtoa_r+0x1224>
 40093c0:	d9800517 	ldw	r6,20(sp)
 40093c4:	21bff71e 	bne	r4,r6,40093a4 <_dtoa_r+0xba8>
 40093c8:	d8800d17 	ldw	r2,52(sp)
 40093cc:	37000044 	addi	fp,r6,1
 40093d0:	10800044 	addi	r2,r2,1
 40093d4:	d8800d15 	stw	r2,52(sp)
 40093d8:	00800c44 	movi	r2,49
 40093dc:	30800005 	stb	r2,0(r6)
 40093e0:	d9001617 	ldw	r4,88(sp)
 40093e4:	900b883a 	mov	r5,r18
 40093e8:	400a65c0 	call	400a65c <_Bfree>
 40093ec:	983ecd26 	beq	r19,zero,4008f24 <_dtoa_r+0x728>
 40093f0:	d8c00617 	ldw	r3,24(sp)
 40093f4:	18000426 	beq	r3,zero,4009408 <_dtoa_r+0xc0c>
 40093f8:	1cc00326 	beq	r3,r19,4009408 <_dtoa_r+0xc0c>
 40093fc:	d9001617 	ldw	r4,88(sp)
 4009400:	180b883a 	mov	r5,r3
 4009404:	400a65c0 	call	400a65c <_Bfree>
 4009408:	d9001617 	ldw	r4,88(sp)
 400940c:	980b883a 	mov	r5,r19
 4009410:	400a65c0 	call	400a65c <_Bfree>
 4009414:	003ec306 	br	4008f24 <_dtoa_r+0x728>
 4009418:	1805883a 	mov	r2,r3
 400941c:	003eeb06 	br	4008fcc <_dtoa_r+0x7d0>
 4009420:	d9800a17 	ldw	r6,40(sp)
 4009424:	d8c01117 	ldw	r3,68(sp)
 4009428:	20bfff04 	addi	r2,r4,-4
 400942c:	308d883a 	add	r6,r6,r2
 4009430:	1887883a 	add	r3,r3,r2
 4009434:	80a1883a 	add	r16,r16,r2
 4009438:	d9800a15 	stw	r6,40(sp)
 400943c:	d8c01115 	stw	r3,68(sp)
 4009440:	003f1d06 	br	40090b8 <_dtoa_r+0x8bc>
 4009444:	a03f0c1e 	bne	r20,zero,4009078 <_dtoa_r+0x87c>
 4009448:	00800434 	movhi	r2,16
 400944c:	10bfffc4 	addi	r2,r2,-1
 4009450:	a884703a 	and	r2,r21,r2
 4009454:	103f081e 	bne	r2,zero,4009078 <_dtoa_r+0x87c>
 4009458:	a89ffc2c 	andhi	r2,r21,32752
 400945c:	103f0626 	beq	r2,zero,4009078 <_dtoa_r+0x87c>
 4009460:	d8c01117 	ldw	r3,68(sp)
 4009464:	d9000a17 	ldw	r4,40(sp)
 4009468:	18c00044 	addi	r3,r3,1
 400946c:	21000044 	addi	r4,r4,1
 4009470:	d8c01115 	stw	r3,68(sp)
 4009474:	d9000a15 	stw	r4,40(sp)
 4009478:	003f0006 	br	400907c <_dtoa_r+0x880>
 400947c:	d9400717 	ldw	r5,28(sp)
 4009480:	d9001617 	ldw	r4,88(sp)
 4009484:	400b4100 	call	400b410 <__pow5mult>
 4009488:	d8800715 	stw	r2,28(sp)
 400948c:	003eed06 	br	4009044 <_dtoa_r+0x848>
 4009490:	1000021e 	bne	r2,zero,400949c <_dtoa_r+0xca0>
 4009494:	b880004c 	andi	r2,r23,1
 4009498:	103fc11e 	bne	r2,zero,40093a0 <_dtoa_r+0xba4>
 400949c:	b5bfffc4 	addi	r22,r22,-1
 40094a0:	b0c00007 	ldb	r3,0(r22)
 40094a4:	00800c04 	movi	r2,48
 40094a8:	18bffc26 	beq	r3,r2,400949c <_dtoa_r+0xca0>
 40094ac:	b7000044 	addi	fp,r22,1
 40094b0:	003fcb06 	br	40093e0 <_dtoa_r+0xbe4>
 40094b4:	d9800d17 	ldw	r6,52(sp)
 40094b8:	018fc83a 	sub	r7,zero,r6
 40094bc:	3801f726 	beq	r7,zero,4009c9c <_dtoa_r+0x14a0>
 40094c0:	398003cc 	andi	r6,r7,15
 40094c4:	300c90fa 	slli	r6,r6,3
 40094c8:	01410074 	movhi	r5,1025
 40094cc:	2944e004 	addi	r5,r5,4992
 40094d0:	d9001217 	ldw	r4,72(sp)
 40094d4:	314d883a 	add	r6,r6,r5
 40094d8:	30c00117 	ldw	r3,4(r6)
 40094dc:	30800017 	ldw	r2,0(r6)
 40094e0:	d9401317 	ldw	r5,76(sp)
 40094e4:	3821d13a 	srai	r16,r7,4
 40094e8:	100d883a 	mov	r6,r2
 40094ec:	180f883a 	mov	r7,r3
 40094f0:	400323c0 	call	400323c <__muldf3>
 40094f4:	1011883a 	mov	r8,r2
 40094f8:	1813883a 	mov	r9,r3
 40094fc:	1029883a 	mov	r20,r2
 4009500:	182b883a 	mov	r21,r3
 4009504:	8001e526 	beq	r16,zero,4009c9c <_dtoa_r+0x14a0>
 4009508:	05800084 	movi	r22,2
 400950c:	04410074 	movhi	r17,1025
 4009510:	8c451204 	addi	r17,r17,5192
 4009514:	8080004c 	andi	r2,r16,1
 4009518:	1005003a 	cmpeq	r2,r2,zero
 400951c:	1000081e 	bne	r2,zero,4009540 <_dtoa_r+0xd44>
 4009520:	89800017 	ldw	r6,0(r17)
 4009524:	89c00117 	ldw	r7,4(r17)
 4009528:	480b883a 	mov	r5,r9
 400952c:	4009883a 	mov	r4,r8
 4009530:	400323c0 	call	400323c <__muldf3>
 4009534:	1011883a 	mov	r8,r2
 4009538:	b5800044 	addi	r22,r22,1
 400953c:	1813883a 	mov	r9,r3
 4009540:	8021d07a 	srai	r16,r16,1
 4009544:	8c400204 	addi	r17,r17,8
 4009548:	803ff21e 	bne	r16,zero,4009514 <_dtoa_r+0xd18>
 400954c:	4029883a 	mov	r20,r8
 4009550:	482b883a 	mov	r21,r9
 4009554:	003dca06 	br	4008c80 <_dtoa_r+0x484>
 4009558:	d9000817 	ldw	r4,32(sp)
 400955c:	2005003a 	cmpeq	r2,r4,zero
 4009560:	1001f61e 	bne	r2,zero,4009d3c <_dtoa_r+0x1540>
 4009564:	dc001117 	ldw	r16,68(sp)
 4009568:	dc801017 	ldw	r18,64(sp)
 400956c:	18c10cc4 	addi	r3,r3,1075
 4009570:	003f6106 	br	40092f8 <_dtoa_r+0xafc>
 4009574:	d8000b15 	stw	zero,44(sp)
 4009578:	d9802617 	ldw	r6,152(sp)
 400957c:	d8c00d17 	ldw	r3,52(sp)
 4009580:	30800044 	addi	r2,r6,1
 4009584:	18ad883a 	add	r22,r3,r2
 4009588:	b13fffc4 	addi	r4,r22,-1
 400958c:	d9000e15 	stw	r4,56(sp)
 4009590:	0581f60e 	bge	zero,r22,4009d6c <_dtoa_r+0x1570>
 4009594:	dd800f15 	stw	r22,60(sp)
 4009598:	003f3006 	br	400925c <_dtoa_r+0xa60>
 400959c:	d8000b15 	stw	zero,44(sp)
 40095a0:	d9002617 	ldw	r4,152(sp)
 40095a4:	0101eb0e 	bge	zero,r4,4009d54 <_dtoa_r+0x1558>
 40095a8:	202d883a 	mov	r22,r4
 40095ac:	d9000e15 	stw	r4,56(sp)
 40095b0:	d9000f15 	stw	r4,60(sp)
 40095b4:	003f2906 	br	400925c <_dtoa_r+0xa60>
 40095b8:	01800044 	movi	r6,1
 40095bc:	d9800b15 	stw	r6,44(sp)
 40095c0:	003ff706 	br	40095a0 <_dtoa_r+0xda4>
 40095c4:	01000044 	movi	r4,1
 40095c8:	d9000b15 	stw	r4,44(sp)
 40095cc:	003fea06 	br	4009578 <_dtoa_r+0xd7c>
 40095d0:	04000c0e 	bge	zero,r16,4009604 <_dtoa_r+0xe08>
 40095d4:	d9400717 	ldw	r5,28(sp)
 40095d8:	d9001617 	ldw	r4,88(sp)
 40095dc:	01800044 	movi	r6,1
 40095e0:	400afa00 	call	400afa0 <__lshift>
 40095e4:	1009883a 	mov	r4,r2
 40095e8:	900b883a 	mov	r5,r18
 40095ec:	d8800715 	stw	r2,28(sp)
 40095f0:	400a7b80 	call	400a7b8 <__mcmp>
 40095f4:	0081e00e 	bge	zero,r2,4009d78 <_dtoa_r+0x157c>
 40095f8:	bdc00044 	addi	r23,r23,1
 40095fc:	00800e84 	movi	r2,58
 4009600:	b881a226 	beq	r23,r2,4009c8c <_dtoa_r+0x1490>
 4009604:	b7000044 	addi	fp,r22,1
 4009608:	b5c00005 	stb	r23,0(r22)
 400960c:	003f7406 	br	40093e0 <_dtoa_r+0xbe4>
 4009610:	00800e44 	movi	r2,57
 4009614:	b8819d26 	beq	r23,r2,4009c8c <_dtoa_r+0x1490>
 4009618:	053ffa0e 	bge	zero,r20,4009604 <_dtoa_r+0xe08>
 400961c:	8dc00c44 	addi	r23,r17,49
 4009620:	003ff806 	br	4009604 <_dtoa_r+0xe08>
 4009624:	d9001617 	ldw	r4,88(sp)
 4009628:	a80b883a 	mov	r5,r21
 400962c:	04000044 	movi	r16,1
 4009630:	400a65c0 	call	400a65c <_Bfree>
 4009634:	003edf06 	br	40091b4 <_dtoa_r+0x9b8>
 4009638:	d9001617 	ldw	r4,88(sp)
 400963c:	980b883a 	mov	r5,r19
 4009640:	01800284 	movi	r6,10
 4009644:	000f883a 	mov	r7,zero
 4009648:	400b3100 	call	400b310 <__multadd>
 400964c:	1027883a 	mov	r19,r2
 4009650:	d8800615 	stw	r2,24(sp)
 4009654:	003ebb06 	br	4009144 <_dtoa_r+0x948>
 4009658:	d9801117 	ldw	r6,68(sp)
 400965c:	d8800d17 	ldw	r2,52(sp)
 4009660:	d8000915 	stw	zero,36(sp)
 4009664:	308dc83a 	sub	r6,r6,r2
 4009668:	0087c83a 	sub	r3,zero,r2
 400966c:	d9801115 	stw	r6,68(sp)
 4009670:	d8c01015 	stw	r3,64(sp)
 4009674:	003cfe06 	br	4008a70 <_dtoa_r+0x274>
 4009678:	018dc83a 	sub	r6,zero,r6
 400967c:	d9801115 	stw	r6,68(sp)
 4009680:	d8000a15 	stw	zero,40(sp)
 4009684:	003cf306 	br	4008a54 <_dtoa_r+0x258>
 4009688:	d9000d17 	ldw	r4,52(sp)
 400968c:	40039f00 	call	40039f0 <__floatsidf>
 4009690:	880b883a 	mov	r5,r17
 4009694:	8009883a 	mov	r4,r16
 4009698:	180f883a 	mov	r7,r3
 400969c:	100d883a 	mov	r6,r2
 40096a0:	40038e00 	call	40038e0 <__nedf2>
 40096a4:	103ce126 	beq	r2,zero,4008a2c <_dtoa_r+0x230>
 40096a8:	d9800d17 	ldw	r6,52(sp)
 40096ac:	31bfffc4 	addi	r6,r6,-1
 40096b0:	d9800d15 	stw	r6,52(sp)
 40096b4:	003cdd06 	br	4008a2c <_dtoa_r+0x230>
 40096b8:	d9000717 	ldw	r4,28(sp)
 40096bc:	900b883a 	mov	r5,r18
 40096c0:	400a7b80 	call	400a7b8 <__mcmp>
 40096c4:	103e8d0e 	bge	r2,zero,40090fc <_dtoa_r+0x900>
 40096c8:	d9400717 	ldw	r5,28(sp)
 40096cc:	d9001617 	ldw	r4,88(sp)
 40096d0:	01800284 	movi	r6,10
 40096d4:	000f883a 	mov	r7,zero
 40096d8:	400b3100 	call	400b310 <__multadd>
 40096dc:	d9800d17 	ldw	r6,52(sp)
 40096e0:	d8800715 	stw	r2,28(sp)
 40096e4:	31bfffc4 	addi	r6,r6,-1
 40096e8:	d9800d15 	stw	r6,52(sp)
 40096ec:	b001a71e 	bne	r22,zero,4009d8c <_dtoa_r+0x1590>
 40096f0:	d8800e17 	ldw	r2,56(sp)
 40096f4:	d8800f15 	stw	r2,60(sp)
 40096f8:	003e8006 	br	40090fc <_dtoa_r+0x900>
 40096fc:	90800417 	ldw	r2,16(r18)
 4009700:	1085883a 	add	r2,r2,r2
 4009704:	1085883a 	add	r2,r2,r2
 4009708:	1485883a 	add	r2,r2,r18
 400970c:	11000417 	ldw	r4,16(r2)
 4009710:	400a6840 	call	400a684 <__hi0bits>
 4009714:	00c00804 	movi	r3,32
 4009718:	1887c83a 	sub	r3,r3,r2
 400971c:	003e5a06 	br	4009088 <_dtoa_r+0x88c>
 4009720:	d9400717 	ldw	r5,28(sp)
 4009724:	d9801017 	ldw	r6,64(sp)
 4009728:	d9001617 	ldw	r4,88(sp)
 400972c:	400b4100 	call	400b410 <__pow5mult>
 4009730:	d8800715 	stw	r2,28(sp)
 4009734:	003e4306 	br	4009044 <_dtoa_r+0x848>
 4009738:	d9800f17 	ldw	r6,60(sp)
 400973c:	d8800d17 	ldw	r2,52(sp)
 4009740:	d9800315 	stw	r6,12(sp)
 4009744:	d8800415 	stw	r2,16(sp)
 4009748:	d8c00b17 	ldw	r3,44(sp)
 400974c:	1805003a 	cmpeq	r2,r3,zero
 4009750:	1000e21e 	bne	r2,zero,4009adc <_dtoa_r+0x12e0>
 4009754:	d9000317 	ldw	r4,12(sp)
 4009758:	0005883a 	mov	r2,zero
 400975c:	00cff834 	movhi	r3,16352
 4009760:	200c90fa 	slli	r6,r4,3
 4009764:	01010074 	movhi	r4,1025
 4009768:	2104e004 	addi	r4,r4,4992
 400976c:	180b883a 	mov	r5,r3
 4009770:	310d883a 	add	r6,r6,r4
 4009774:	327fff17 	ldw	r9,-4(r6)
 4009778:	323ffe17 	ldw	r8,-8(r6)
 400977c:	1009883a 	mov	r4,r2
 4009780:	480f883a 	mov	r7,r9
 4009784:	400d883a 	mov	r6,r8
 4009788:	40036000 	call	4003600 <__divdf3>
 400978c:	180b883a 	mov	r5,r3
 4009790:	b00d883a 	mov	r6,r22
 4009794:	b80f883a 	mov	r7,r23
 4009798:	1009883a 	mov	r4,r2
 400979c:	40031480 	call	4003148 <__subdf3>
 40097a0:	a80b883a 	mov	r5,r21
 40097a4:	a009883a 	mov	r4,r20
 40097a8:	d8c01915 	stw	r3,100(sp)
 40097ac:	d8801815 	stw	r2,96(sp)
 40097b0:	4003ae80 	call	4003ae8 <__fixdfsi>
 40097b4:	1009883a 	mov	r4,r2
 40097b8:	1027883a 	mov	r19,r2
 40097bc:	40039f00 	call	40039f0 <__floatsidf>
 40097c0:	a80b883a 	mov	r5,r21
 40097c4:	a009883a 	mov	r4,r20
 40097c8:	180f883a 	mov	r7,r3
 40097cc:	100d883a 	mov	r6,r2
 40097d0:	40031480 	call	4003148 <__subdf3>
 40097d4:	d9801817 	ldw	r6,96(sp)
 40097d8:	1823883a 	mov	r17,r3
 40097dc:	d8801415 	stw	r2,80(sp)
 40097e0:	302d883a 	mov	r22,r6
 40097e4:	d9800517 	ldw	r6,20(sp)
 40097e8:	9cc00c04 	addi	r19,r19,48
 40097ec:	dc401515 	stw	r17,84(sp)
 40097f0:	d8c01917 	ldw	r3,100(sp)
 40097f4:	34c00005 	stb	r19,0(r6)
 40097f8:	d8800517 	ldw	r2,20(sp)
 40097fc:	d9401917 	ldw	r5,100(sp)
 4009800:	d9801417 	ldw	r6,80(sp)
 4009804:	b009883a 	mov	r4,r22
 4009808:	880f883a 	mov	r7,r17
 400980c:	182f883a 	mov	r23,r3
 4009810:	17000044 	addi	fp,r2,1
 4009814:	400ca280 	call	400ca28 <__gtdf2>
 4009818:	00804e16 	blt	zero,r2,4009954 <_dtoa_r+0x1158>
 400981c:	d9801417 	ldw	r6,80(sp)
 4009820:	0005883a 	mov	r2,zero
 4009824:	00cffc34 	movhi	r3,16368
 4009828:	180b883a 	mov	r5,r3
 400982c:	880f883a 	mov	r7,r17
 4009830:	1009883a 	mov	r4,r2
 4009834:	40031480 	call	4003148 <__subdf3>
 4009838:	d9401917 	ldw	r5,100(sp)
 400983c:	180f883a 	mov	r7,r3
 4009840:	b009883a 	mov	r4,r22
 4009844:	100d883a 	mov	r6,r2
 4009848:	400ca280 	call	400ca28 <__gtdf2>
 400984c:	00bda216 	blt	zero,r2,4008ed8 <_dtoa_r+0x6dc>
 4009850:	d8c00317 	ldw	r3,12(sp)
 4009854:	00800044 	movi	r2,1
 4009858:	10c01216 	blt	r2,r3,40098a4 <_dtoa_r+0x10a8>
 400985c:	003d4506 	br	4008d74 <_dtoa_r+0x578>
 4009860:	d9801417 	ldw	r6,80(sp)
 4009864:	0005883a 	mov	r2,zero
 4009868:	00cffc34 	movhi	r3,16368
 400986c:	180b883a 	mov	r5,r3
 4009870:	880f883a 	mov	r7,r17
 4009874:	1009883a 	mov	r4,r2
 4009878:	40031480 	call	4003148 <__subdf3>
 400987c:	d9c01b17 	ldw	r7,108(sp)
 4009880:	180b883a 	mov	r5,r3
 4009884:	1009883a 	mov	r4,r2
 4009888:	b00d883a 	mov	r6,r22
 400988c:	400cab00 	call	400cab0 <__ltdf2>
 4009890:	103d9116 	blt	r2,zero,4008ed8 <_dtoa_r+0x6dc>
 4009894:	d9800517 	ldw	r6,20(sp)
 4009898:	d9000317 	ldw	r4,12(sp)
 400989c:	3105883a 	add	r2,r6,r4
 40098a0:	e0bd3426 	beq	fp,r2,4008d74 <_dtoa_r+0x578>
 40098a4:	04500934 	movhi	r17,16420
 40098a8:	0021883a 	mov	r16,zero
 40098ac:	b80b883a 	mov	r5,r23
 40098b0:	b009883a 	mov	r4,r22
 40098b4:	800d883a 	mov	r6,r16
 40098b8:	880f883a 	mov	r7,r17
 40098bc:	400323c0 	call	400323c <__muldf3>
 40098c0:	d9401517 	ldw	r5,84(sp)
 40098c4:	d9001417 	ldw	r4,80(sp)
 40098c8:	880f883a 	mov	r7,r17
 40098cc:	000d883a 	mov	r6,zero
 40098d0:	d8801a15 	stw	r2,104(sp)
 40098d4:	d8c01b15 	stw	r3,108(sp)
 40098d8:	400323c0 	call	400323c <__muldf3>
 40098dc:	180b883a 	mov	r5,r3
 40098e0:	1009883a 	mov	r4,r2
 40098e4:	1823883a 	mov	r17,r3
 40098e8:	1021883a 	mov	r16,r2
 40098ec:	4003ae80 	call	4003ae8 <__fixdfsi>
 40098f0:	1009883a 	mov	r4,r2
 40098f4:	102b883a 	mov	r21,r2
 40098f8:	40039f00 	call	40039f0 <__floatsidf>
 40098fc:	880b883a 	mov	r5,r17
 4009900:	8009883a 	mov	r4,r16
 4009904:	180f883a 	mov	r7,r3
 4009908:	100d883a 	mov	r6,r2
 400990c:	40031480 	call	4003148 <__subdf3>
 4009910:	1021883a 	mov	r16,r2
 4009914:	d9001b17 	ldw	r4,108(sp)
 4009918:	1823883a 	mov	r17,r3
 400991c:	dc001415 	stw	r16,80(sp)
 4009920:	ad400c04 	addi	r21,r21,48
 4009924:	dc401515 	stw	r17,84(sp)
 4009928:	d8801a17 	ldw	r2,104(sp)
 400992c:	e5400005 	stb	r21,0(fp)
 4009930:	202f883a 	mov	r23,r4
 4009934:	d9c01b17 	ldw	r7,108(sp)
 4009938:	d9001417 	ldw	r4,80(sp)
 400993c:	880b883a 	mov	r5,r17
 4009940:	100d883a 	mov	r6,r2
 4009944:	102d883a 	mov	r22,r2
 4009948:	e7000044 	addi	fp,fp,1
 400994c:	400cab00 	call	400cab0 <__ltdf2>
 4009950:	103fc30e 	bge	r2,zero,4009860 <_dtoa_r+0x1064>
 4009954:	d9000417 	ldw	r4,16(sp)
 4009958:	d9000d15 	stw	r4,52(sp)
 400995c:	003d7106 	br	4008f24 <_dtoa_r+0x728>
 4009960:	d9801717 	ldw	r6,92(sp)
 4009964:	00800084 	movi	r2,2
 4009968:	11bde60e 	bge	r2,r6,4009104 <_dtoa_r+0x908>
 400996c:	203cfb1e 	bne	r4,zero,4008d5c <_dtoa_r+0x560>
 4009970:	d9001617 	ldw	r4,88(sp)
 4009974:	900b883a 	mov	r5,r18
 4009978:	01800144 	movi	r6,5
 400997c:	000f883a 	mov	r7,zero
 4009980:	400b3100 	call	400b310 <__multadd>
 4009984:	d9000717 	ldw	r4,28(sp)
 4009988:	100b883a 	mov	r5,r2
 400998c:	1025883a 	mov	r18,r2
 4009990:	400a7b80 	call	400a7b8 <__mcmp>
 4009994:	00bcf10e 	bge	zero,r2,4008d5c <_dtoa_r+0x560>
 4009998:	d8c00d17 	ldw	r3,52(sp)
 400999c:	d9000517 	ldw	r4,20(sp)
 40099a0:	d8000615 	stw	zero,24(sp)
 40099a4:	18c00044 	addi	r3,r3,1
 40099a8:	d8c00d15 	stw	r3,52(sp)
 40099ac:	00800c44 	movi	r2,49
 40099b0:	27000044 	addi	fp,r4,1
 40099b4:	20800005 	stb	r2,0(r4)
 40099b8:	003e8906 	br	40093e0 <_dtoa_r+0xbe4>
 40099bc:	d8c00517 	ldw	r3,20(sp)
 40099c0:	003bc206 	br	40088cc <_dtoa_r+0xd0>
 40099c4:	01810074 	movhi	r6,1025
 40099c8:	31851204 	addi	r6,r6,5192
 40099cc:	30c00917 	ldw	r3,36(r6)
 40099d0:	30800817 	ldw	r2,32(r6)
 40099d4:	d9001217 	ldw	r4,72(sp)
 40099d8:	d9401317 	ldw	r5,76(sp)
 40099dc:	180f883a 	mov	r7,r3
 40099e0:	100d883a 	mov	r6,r2
 40099e4:	40036000 	call	4003600 <__divdf3>
 40099e8:	948003cc 	andi	r18,r18,15
 40099ec:	058000c4 	movi	r22,3
 40099f0:	1029883a 	mov	r20,r2
 40099f4:	182b883a 	mov	r21,r3
 40099f8:	003c8906 	br	4008c20 <_dtoa_r+0x424>
 40099fc:	d9001017 	ldw	r4,64(sp)
 4009a00:	d9800917 	ldw	r6,36(sp)
 4009a04:	0025883a 	mov	r18,zero
 4009a08:	1105c83a 	sub	r2,r2,r4
 4009a0c:	2089883a 	add	r4,r4,r2
 4009a10:	308d883a 	add	r6,r6,r2
 4009a14:	d9001015 	stw	r4,64(sp)
 4009a18:	d9800915 	stw	r6,36(sp)
 4009a1c:	003e3206 	br	40092e8 <_dtoa_r+0xaec>
 4009a20:	28800044 	addi	r2,r5,1
 4009a24:	27000044 	addi	fp,r4,1
 4009a28:	20800005 	stb	r2,0(r4)
 4009a2c:	003e6c06 	br	40093e0 <_dtoa_r+0xbe4>
 4009a30:	d8800f17 	ldw	r2,60(sp)
 4009a34:	00bce016 	blt	zero,r2,4008db8 <_dtoa_r+0x5bc>
 4009a38:	d9800f17 	ldw	r6,60(sp)
 4009a3c:	303cc51e 	bne	r6,zero,4008d54 <_dtoa_r+0x558>
 4009a40:	0005883a 	mov	r2,zero
 4009a44:	00d00534 	movhi	r3,16404
 4009a48:	980b883a 	mov	r5,r19
 4009a4c:	180f883a 	mov	r7,r3
 4009a50:	9009883a 	mov	r4,r18
 4009a54:	100d883a 	mov	r6,r2
 4009a58:	400323c0 	call	400323c <__muldf3>
 4009a5c:	180b883a 	mov	r5,r3
 4009a60:	a80f883a 	mov	r7,r21
 4009a64:	1009883a 	mov	r4,r2
 4009a68:	a00d883a 	mov	r6,r20
 4009a6c:	40039680 	call	4003968 <__gedf2>
 4009a70:	103cb80e 	bge	r2,zero,4008d54 <_dtoa_r+0x558>
 4009a74:	0027883a 	mov	r19,zero
 4009a78:	0025883a 	mov	r18,zero
 4009a7c:	003fc606 	br	4009998 <_dtoa_r+0x119c>
 4009a80:	99400117 	ldw	r5,4(r19)
 4009a84:	d9001617 	ldw	r4,88(sp)
 4009a88:	400abdc0 	call	400abdc <_Balloc>
 4009a8c:	99800417 	ldw	r6,16(r19)
 4009a90:	11000304 	addi	r4,r2,12
 4009a94:	99400304 	addi	r5,r19,12
 4009a98:	318d883a 	add	r6,r6,r6
 4009a9c:	318d883a 	add	r6,r6,r6
 4009aa0:	31800204 	addi	r6,r6,8
 4009aa4:	1023883a 	mov	r17,r2
 4009aa8:	4005cd80 	call	4005cd8 <memcpy>
 4009aac:	d9001617 	ldw	r4,88(sp)
 4009ab0:	880b883a 	mov	r5,r17
 4009ab4:	01800044 	movi	r6,1
 4009ab8:	400afa00 	call	400afa0 <__lshift>
 4009abc:	100b883a 	mov	r5,r2
 4009ac0:	003d9c06 	br	4009134 <_dtoa_r+0x938>
 4009ac4:	00800e44 	movi	r2,57
 4009ac8:	b8807026 	beq	r23,r2,4009c8c <_dtoa_r+0x1490>
 4009acc:	b8800044 	addi	r2,r23,1
 4009ad0:	b7000044 	addi	fp,r22,1
 4009ad4:	b0800005 	stb	r2,0(r22)
 4009ad8:	003e4106 	br	40093e0 <_dtoa_r+0xbe4>
 4009adc:	d8800317 	ldw	r2,12(sp)
 4009ae0:	01810074 	movhi	r6,1025
 4009ae4:	3184e004 	addi	r6,r6,4992
 4009ae8:	b009883a 	mov	r4,r22
 4009aec:	100e90fa 	slli	r7,r2,3
 4009af0:	b80b883a 	mov	r5,r23
 4009af4:	398f883a 	add	r7,r7,r6
 4009af8:	38bffe17 	ldw	r2,-8(r7)
 4009afc:	d9800517 	ldw	r6,20(sp)
 4009b00:	38ffff17 	ldw	r3,-4(r7)
 4009b04:	37000044 	addi	fp,r6,1
 4009b08:	180f883a 	mov	r7,r3
 4009b0c:	100d883a 	mov	r6,r2
 4009b10:	400323c0 	call	400323c <__muldf3>
 4009b14:	a80b883a 	mov	r5,r21
 4009b18:	a009883a 	mov	r4,r20
 4009b1c:	182f883a 	mov	r23,r3
 4009b20:	102d883a 	mov	r22,r2
 4009b24:	4003ae80 	call	4003ae8 <__fixdfsi>
 4009b28:	1009883a 	mov	r4,r2
 4009b2c:	1027883a 	mov	r19,r2
 4009b30:	40039f00 	call	40039f0 <__floatsidf>
 4009b34:	a80b883a 	mov	r5,r21
 4009b38:	a009883a 	mov	r4,r20
 4009b3c:	180f883a 	mov	r7,r3
 4009b40:	100d883a 	mov	r6,r2
 4009b44:	40031480 	call	4003148 <__subdf3>
 4009b48:	180b883a 	mov	r5,r3
 4009b4c:	d8c00517 	ldw	r3,20(sp)
 4009b50:	9cc00c04 	addi	r19,r19,48
 4009b54:	1009883a 	mov	r4,r2
 4009b58:	1cc00005 	stb	r19,0(r3)
 4009b5c:	2021883a 	mov	r16,r4
 4009b60:	d9000317 	ldw	r4,12(sp)
 4009b64:	00800044 	movi	r2,1
 4009b68:	2823883a 	mov	r17,r5
 4009b6c:	20802226 	beq	r4,r2,4009bf8 <_dtoa_r+0x13fc>
 4009b70:	1029883a 	mov	r20,r2
 4009b74:	0005883a 	mov	r2,zero
 4009b78:	00d00934 	movhi	r3,16420
 4009b7c:	180f883a 	mov	r7,r3
 4009b80:	100d883a 	mov	r6,r2
 4009b84:	880b883a 	mov	r5,r17
 4009b88:	8009883a 	mov	r4,r16
 4009b8c:	400323c0 	call	400323c <__muldf3>
 4009b90:	180b883a 	mov	r5,r3
 4009b94:	1009883a 	mov	r4,r2
 4009b98:	1823883a 	mov	r17,r3
 4009b9c:	1021883a 	mov	r16,r2
 4009ba0:	4003ae80 	call	4003ae8 <__fixdfsi>
 4009ba4:	1009883a 	mov	r4,r2
 4009ba8:	102b883a 	mov	r21,r2
 4009bac:	40039f00 	call	40039f0 <__floatsidf>
 4009bb0:	880b883a 	mov	r5,r17
 4009bb4:	8009883a 	mov	r4,r16
 4009bb8:	180f883a 	mov	r7,r3
 4009bbc:	100d883a 	mov	r6,r2
 4009bc0:	40031480 	call	4003148 <__subdf3>
 4009bc4:	180b883a 	mov	r5,r3
 4009bc8:	d8c00517 	ldw	r3,20(sp)
 4009bcc:	1009883a 	mov	r4,r2
 4009bd0:	ad400c04 	addi	r21,r21,48
 4009bd4:	1d05883a 	add	r2,r3,r20
 4009bd8:	15400005 	stb	r21,0(r2)
 4009bdc:	2021883a 	mov	r16,r4
 4009be0:	d9000317 	ldw	r4,12(sp)
 4009be4:	a5000044 	addi	r20,r20,1
 4009be8:	2823883a 	mov	r17,r5
 4009bec:	a13fe11e 	bne	r20,r4,4009b74 <_dtoa_r+0x1378>
 4009bf0:	e505883a 	add	r2,fp,r20
 4009bf4:	173fffc4 	addi	fp,r2,-1
 4009bf8:	0025883a 	mov	r18,zero
 4009bfc:	04cff834 	movhi	r19,16352
 4009c00:	b009883a 	mov	r4,r22
 4009c04:	b80b883a 	mov	r5,r23
 4009c08:	900d883a 	mov	r6,r18
 4009c0c:	980f883a 	mov	r7,r19
 4009c10:	40031c80 	call	40031c8 <__adddf3>
 4009c14:	180b883a 	mov	r5,r3
 4009c18:	1009883a 	mov	r4,r2
 4009c1c:	800d883a 	mov	r6,r16
 4009c20:	880f883a 	mov	r7,r17
 4009c24:	400cab00 	call	400cab0 <__ltdf2>
 4009c28:	103cab16 	blt	r2,zero,4008ed8 <_dtoa_r+0x6dc>
 4009c2c:	0009883a 	mov	r4,zero
 4009c30:	980b883a 	mov	r5,r19
 4009c34:	b80f883a 	mov	r7,r23
 4009c38:	b00d883a 	mov	r6,r22
 4009c3c:	40031480 	call	4003148 <__subdf3>
 4009c40:	180b883a 	mov	r5,r3
 4009c44:	880f883a 	mov	r7,r17
 4009c48:	1009883a 	mov	r4,r2
 4009c4c:	800d883a 	mov	r6,r16
 4009c50:	400ca280 	call	400ca28 <__gtdf2>
 4009c54:	00bc470e 	bge	zero,r2,4008d74 <_dtoa_r+0x578>
 4009c58:	00c00c04 	movi	r3,48
 4009c5c:	e73fffc4 	addi	fp,fp,-1
 4009c60:	e0800007 	ldb	r2,0(fp)
 4009c64:	10fffd26 	beq	r2,r3,4009c5c <_dtoa_r+0x1460>
 4009c68:	d9800417 	ldw	r6,16(sp)
 4009c6c:	e7000044 	addi	fp,fp,1
 4009c70:	d9800d15 	stw	r6,52(sp)
 4009c74:	003cab06 	br	4008f24 <_dtoa_r+0x728>
 4009c78:	d8c00f17 	ldw	r3,60(sp)
 4009c7c:	d9001117 	ldw	r4,68(sp)
 4009c80:	20e1c83a 	sub	r16,r4,r3
 4009c84:	0007883a 	mov	r3,zero
 4009c88:	003d9b06 	br	40092f8 <_dtoa_r+0xafc>
 4009c8c:	00800e44 	movi	r2,57
 4009c90:	b0800005 	stb	r2,0(r22)
 4009c94:	b5800044 	addi	r22,r22,1
 4009c98:	003dc106 	br	40093a0 <_dtoa_r+0xba4>
 4009c9c:	05800084 	movi	r22,2
 4009ca0:	003bf706 	br	4008c80 <_dtoa_r+0x484>
 4009ca4:	d9000f17 	ldw	r4,60(sp)
 4009ca8:	013c000e 	bge	zero,r4,4008cac <_dtoa_r+0x4b0>
 4009cac:	d9800e17 	ldw	r6,56(sp)
 4009cb0:	01bc300e 	bge	zero,r6,4008d74 <_dtoa_r+0x578>
 4009cb4:	0005883a 	mov	r2,zero
 4009cb8:	00d00934 	movhi	r3,16420
 4009cbc:	a80b883a 	mov	r5,r21
 4009cc0:	180f883a 	mov	r7,r3
 4009cc4:	a009883a 	mov	r4,r20
 4009cc8:	100d883a 	mov	r6,r2
 4009ccc:	400323c0 	call	400323c <__muldf3>
 4009cd0:	b1000044 	addi	r4,r22,1
 4009cd4:	1021883a 	mov	r16,r2
 4009cd8:	1823883a 	mov	r17,r3
 4009cdc:	40039f00 	call	40039f0 <__floatsidf>
 4009ce0:	880b883a 	mov	r5,r17
 4009ce4:	8009883a 	mov	r4,r16
 4009ce8:	180f883a 	mov	r7,r3
 4009cec:	100d883a 	mov	r6,r2
 4009cf0:	400323c0 	call	400323c <__muldf3>
 4009cf4:	0011883a 	mov	r8,zero
 4009cf8:	02500734 	movhi	r9,16412
 4009cfc:	180b883a 	mov	r5,r3
 4009d00:	480f883a 	mov	r7,r9
 4009d04:	1009883a 	mov	r4,r2
 4009d08:	400d883a 	mov	r6,r8
 4009d0c:	40031c80 	call	40031c8 <__adddf3>
 4009d10:	102d883a 	mov	r22,r2
 4009d14:	00bf3034 	movhi	r2,64704
 4009d18:	10ef883a 	add	r23,r2,r3
 4009d1c:	d8800d17 	ldw	r2,52(sp)
 4009d20:	d8c00e17 	ldw	r3,56(sp)
 4009d24:	8029883a 	mov	r20,r16
 4009d28:	10bfffc4 	addi	r2,r2,-1
 4009d2c:	882b883a 	mov	r21,r17
 4009d30:	d8800415 	stw	r2,16(sp)
 4009d34:	d8c00315 	stw	r3,12(sp)
 4009d38:	003e8306 	br	4009748 <_dtoa_r+0xf4c>
 4009d3c:	d8800117 	ldw	r2,4(sp)
 4009d40:	dc001117 	ldw	r16,68(sp)
 4009d44:	dc801017 	ldw	r18,64(sp)
 4009d48:	00c00d84 	movi	r3,54
 4009d4c:	1887c83a 	sub	r3,r3,r2
 4009d50:	003d6906 	br	40092f8 <_dtoa_r+0xafc>
 4009d54:	01800044 	movi	r6,1
 4009d58:	3021883a 	mov	r16,r6
 4009d5c:	d9800f15 	stw	r6,60(sp)
 4009d60:	d9802615 	stw	r6,152(sp)
 4009d64:	d9800e15 	stw	r6,56(sp)
 4009d68:	003b9306 	br	4008bb8 <_dtoa_r+0x3bc>
 4009d6c:	b021883a 	mov	r16,r22
 4009d70:	dd800f15 	stw	r22,60(sp)
 4009d74:	003b9006 	br	4008bb8 <_dtoa_r+0x3bc>
 4009d78:	103e221e 	bne	r2,zero,4009604 <_dtoa_r+0xe08>
 4009d7c:	b880004c 	andi	r2,r23,1
 4009d80:	1005003a 	cmpeq	r2,r2,zero
 4009d84:	103e1f1e 	bne	r2,zero,4009604 <_dtoa_r+0xe08>
 4009d88:	003e1b06 	br	40095f8 <_dtoa_r+0xdfc>
 4009d8c:	d9001617 	ldw	r4,88(sp)
 4009d90:	980b883a 	mov	r5,r19
 4009d94:	01800284 	movi	r6,10
 4009d98:	000f883a 	mov	r7,zero
 4009d9c:	400b3100 	call	400b310 <__multadd>
 4009da0:	d8c00e17 	ldw	r3,56(sp)
 4009da4:	1027883a 	mov	r19,r2
 4009da8:	d8c00f15 	stw	r3,60(sp)
 4009dac:	003cd306 	br	40090fc <_dtoa_r+0x900>

04009db0 <__sflags>:
 4009db0:	28c00007 	ldb	r3,0(r5)
 4009db4:	00801c84 	movi	r2,114
 4009db8:	18800926 	beq	r3,r2,4009de0 <__sflags+0x30>
 4009dbc:	00801dc4 	movi	r2,119
 4009dc0:	18801426 	beq	r3,r2,4009e14 <__sflags+0x64>
 4009dc4:	00801844 	movi	r2,97
 4009dc8:	18801626 	beq	r3,r2,4009e24 <__sflags+0x74>
 4009dcc:	0007883a 	mov	r3,zero
 4009dd0:	00800584 	movi	r2,22
 4009dd4:	20800015 	stw	r2,0(r4)
 4009dd8:	1805883a 	mov	r2,r3
 4009ddc:	f800283a 	ret
 4009de0:	000f883a 	mov	r7,zero
 4009de4:	0011883a 	mov	r8,zero
 4009de8:	00c00104 	movi	r3,4
 4009dec:	28800047 	ldb	r2,1(r5)
 4009df0:	10000426 	beq	r2,zero,4009e04 <__sflags+0x54>
 4009df4:	01000ac4 	movi	r4,43
 4009df8:	11000e26 	beq	r2,r4,4009e34 <__sflags+0x84>
 4009dfc:	28800087 	ldb	r2,2(r5)
 4009e00:	11000c26 	beq	r2,r4,4009e34 <__sflags+0x84>
 4009e04:	3a04b03a 	or	r2,r7,r8
 4009e08:	30800015 	stw	r2,0(r6)
 4009e0c:	1805883a 	mov	r2,r3
 4009e10:	f800283a 	ret
 4009e14:	01c00044 	movi	r7,1
 4009e18:	02018004 	movi	r8,1536
 4009e1c:	00c00204 	movi	r3,8
 4009e20:	003ff206 	br	4009dec <__sflags+0x3c>
 4009e24:	01c00044 	movi	r7,1
 4009e28:	02008204 	movi	r8,520
 4009e2c:	00c04204 	movi	r3,264
 4009e30:	003fee06 	br	4009dec <__sflags+0x3c>
 4009e34:	00bffcc4 	movi	r2,-13
 4009e38:	1884703a 	and	r2,r3,r2
 4009e3c:	01c00084 	movi	r7,2
 4009e40:	10c00414 	ori	r3,r2,16
 4009e44:	3a04b03a 	or	r2,r7,r8
 4009e48:	30800015 	stw	r2,0(r6)
 4009e4c:	003fef06 	br	4009e0c <__sflags+0x5c>

04009e50 <__sfvwrite_r>:
 4009e50:	30800217 	ldw	r2,8(r6)
 4009e54:	defff504 	addi	sp,sp,-44
 4009e58:	df000915 	stw	fp,36(sp)
 4009e5c:	dd800715 	stw	r22,28(sp)
 4009e60:	dc800315 	stw	r18,12(sp)
 4009e64:	dfc00a15 	stw	ra,40(sp)
 4009e68:	ddc00815 	stw	r23,32(sp)
 4009e6c:	dd400615 	stw	r21,24(sp)
 4009e70:	dd000515 	stw	r20,20(sp)
 4009e74:	dcc00415 	stw	r19,16(sp)
 4009e78:	dc400215 	stw	r17,8(sp)
 4009e7c:	dc000115 	stw	r16,4(sp)
 4009e80:	302d883a 	mov	r22,r6
 4009e84:	2039883a 	mov	fp,r4
 4009e88:	2825883a 	mov	r18,r5
 4009e8c:	10001c26 	beq	r2,zero,4009f00 <__sfvwrite_r+0xb0>
 4009e90:	29c0030b 	ldhu	r7,12(r5)
 4009e94:	3880020c 	andi	r2,r7,8
 4009e98:	10002726 	beq	r2,zero,4009f38 <__sfvwrite_r+0xe8>
 4009e9c:	28800417 	ldw	r2,16(r5)
 4009ea0:	10002526 	beq	r2,zero,4009f38 <__sfvwrite_r+0xe8>
 4009ea4:	3880008c 	andi	r2,r7,2
 4009ea8:	b5400017 	ldw	r21,0(r22)
 4009eac:	10002826 	beq	r2,zero,4009f50 <__sfvwrite_r+0x100>
 4009eb0:	0021883a 	mov	r16,zero
 4009eb4:	0023883a 	mov	r17,zero
 4009eb8:	880d883a 	mov	r6,r17
 4009ebc:	e009883a 	mov	r4,fp
 4009ec0:	00810004 	movi	r2,1024
 4009ec4:	80006e26 	beq	r16,zero,400a080 <__sfvwrite_r+0x230>
 4009ec8:	800f883a 	mov	r7,r16
 4009ecc:	91400717 	ldw	r5,28(r18)
 4009ed0:	1400012e 	bgeu	r2,r16,4009ed8 <__sfvwrite_r+0x88>
 4009ed4:	100f883a 	mov	r7,r2
 4009ed8:	90c00917 	ldw	r3,36(r18)
 4009edc:	183ee83a 	callr	r3
 4009ee0:	1007883a 	mov	r3,r2
 4009ee4:	80a1c83a 	sub	r16,r16,r2
 4009ee8:	88a3883a 	add	r17,r17,r2
 4009eec:	00806d0e 	bge	zero,r2,400a0a4 <__sfvwrite_r+0x254>
 4009ef0:	b0800217 	ldw	r2,8(r22)
 4009ef4:	10c5c83a 	sub	r2,r2,r3
 4009ef8:	b0800215 	stw	r2,8(r22)
 4009efc:	103fee1e 	bne	r2,zero,4009eb8 <__sfvwrite_r+0x68>
 4009f00:	0009883a 	mov	r4,zero
 4009f04:	2005883a 	mov	r2,r4
 4009f08:	dfc00a17 	ldw	ra,40(sp)
 4009f0c:	df000917 	ldw	fp,36(sp)
 4009f10:	ddc00817 	ldw	r23,32(sp)
 4009f14:	dd800717 	ldw	r22,28(sp)
 4009f18:	dd400617 	ldw	r21,24(sp)
 4009f1c:	dd000517 	ldw	r20,20(sp)
 4009f20:	dcc00417 	ldw	r19,16(sp)
 4009f24:	dc800317 	ldw	r18,12(sp)
 4009f28:	dc400217 	ldw	r17,8(sp)
 4009f2c:	dc000117 	ldw	r16,4(sp)
 4009f30:	dec00b04 	addi	sp,sp,44
 4009f34:	f800283a 	ret
 4009f38:	40084380 	call	4008438 <__swsetup_r>
 4009f3c:	1000e41e 	bne	r2,zero,400a2d0 <__sfvwrite_r+0x480>
 4009f40:	91c0030b 	ldhu	r7,12(r18)
 4009f44:	b5400017 	ldw	r21,0(r22)
 4009f48:	3880008c 	andi	r2,r7,2
 4009f4c:	103fd81e 	bne	r2,zero,4009eb0 <__sfvwrite_r+0x60>
 4009f50:	3880004c 	andi	r2,r7,1
 4009f54:	1005003a 	cmpeq	r2,r2,zero
 4009f58:	10005726 	beq	r2,zero,400a0b8 <__sfvwrite_r+0x268>
 4009f5c:	0029883a 	mov	r20,zero
 4009f60:	002f883a 	mov	r23,zero
 4009f64:	a0004226 	beq	r20,zero,400a070 <__sfvwrite_r+0x220>
 4009f68:	3880800c 	andi	r2,r7,512
 4009f6c:	94000217 	ldw	r16,8(r18)
 4009f70:	10008b26 	beq	r2,zero,400a1a0 <__sfvwrite_r+0x350>
 4009f74:	800d883a 	mov	r6,r16
 4009f78:	a400a536 	bltu	r20,r16,400a210 <__sfvwrite_r+0x3c0>
 4009f7c:	3881200c 	andi	r2,r7,1152
 4009f80:	10002726 	beq	r2,zero,400a020 <__sfvwrite_r+0x1d0>
 4009f84:	90800517 	ldw	r2,20(r18)
 4009f88:	92000417 	ldw	r8,16(r18)
 4009f8c:	91400017 	ldw	r5,0(r18)
 4009f90:	1087883a 	add	r3,r2,r2
 4009f94:	1887883a 	add	r3,r3,r2
 4009f98:	1808d7fa 	srli	r4,r3,31
 4009f9c:	2a21c83a 	sub	r16,r5,r8
 4009fa0:	80800044 	addi	r2,r16,1
 4009fa4:	20c9883a 	add	r4,r4,r3
 4009fa8:	2027d07a 	srai	r19,r4,1
 4009fac:	a085883a 	add	r2,r20,r2
 4009fb0:	980d883a 	mov	r6,r19
 4009fb4:	9880022e 	bgeu	r19,r2,4009fc0 <__sfvwrite_r+0x170>
 4009fb8:	1027883a 	mov	r19,r2
 4009fbc:	100d883a 	mov	r6,r2
 4009fc0:	3881000c 	andi	r2,r7,1024
 4009fc4:	1000b826 	beq	r2,zero,400a2a8 <__sfvwrite_r+0x458>
 4009fc8:	300b883a 	mov	r5,r6
 4009fcc:	e009883a 	mov	r4,fp
 4009fd0:	40055980 	call	4005598 <_malloc_r>
 4009fd4:	10003126 	beq	r2,zero,400a09c <__sfvwrite_r+0x24c>
 4009fd8:	91400417 	ldw	r5,16(r18)
 4009fdc:	1009883a 	mov	r4,r2
 4009fe0:	800d883a 	mov	r6,r16
 4009fe4:	1023883a 	mov	r17,r2
 4009fe8:	4005cd80 	call	4005cd8 <memcpy>
 4009fec:	90c0030b 	ldhu	r3,12(r18)
 4009ff0:	00beffc4 	movi	r2,-1025
 4009ff4:	1886703a 	and	r3,r3,r2
 4009ff8:	18c02014 	ori	r3,r3,128
 4009ffc:	90c0030d 	sth	r3,12(r18)
 400a000:	9c07c83a 	sub	r3,r19,r16
 400a004:	8c05883a 	add	r2,r17,r16
 400a008:	a00d883a 	mov	r6,r20
 400a00c:	a021883a 	mov	r16,r20
 400a010:	90800015 	stw	r2,0(r18)
 400a014:	90c00215 	stw	r3,8(r18)
 400a018:	94400415 	stw	r17,16(r18)
 400a01c:	94c00515 	stw	r19,20(r18)
 400a020:	91000017 	ldw	r4,0(r18)
 400a024:	b80b883a 	mov	r5,r23
 400a028:	a023883a 	mov	r17,r20
 400a02c:	400a57c0 	call	400a57c <memmove>
 400a030:	90c00217 	ldw	r3,8(r18)
 400a034:	90800017 	ldw	r2,0(r18)
 400a038:	a027883a 	mov	r19,r20
 400a03c:	1c07c83a 	sub	r3,r3,r16
 400a040:	1405883a 	add	r2,r2,r16
 400a044:	90c00215 	stw	r3,8(r18)
 400a048:	a021883a 	mov	r16,r20
 400a04c:	90800015 	stw	r2,0(r18)
 400a050:	b0800217 	ldw	r2,8(r22)
 400a054:	1405c83a 	sub	r2,r2,r16
 400a058:	b0800215 	stw	r2,8(r22)
 400a05c:	103fa826 	beq	r2,zero,4009f00 <__sfvwrite_r+0xb0>
 400a060:	a469c83a 	sub	r20,r20,r17
 400a064:	91c0030b 	ldhu	r7,12(r18)
 400a068:	bcef883a 	add	r23,r23,r19
 400a06c:	a03fbe1e 	bne	r20,zero,4009f68 <__sfvwrite_r+0x118>
 400a070:	adc00017 	ldw	r23,0(r21)
 400a074:	ad000117 	ldw	r20,4(r21)
 400a078:	ad400204 	addi	r21,r21,8
 400a07c:	003fb906 	br	4009f64 <__sfvwrite_r+0x114>
 400a080:	ac400017 	ldw	r17,0(r21)
 400a084:	ac000117 	ldw	r16,4(r21)
 400a088:	ad400204 	addi	r21,r21,8
 400a08c:	003f8a06 	br	4009eb8 <__sfvwrite_r+0x68>
 400a090:	91400417 	ldw	r5,16(r18)
 400a094:	e009883a 	mov	r4,fp
 400a098:	4004a9c0 	call	4004a9c <_free_r>
 400a09c:	00800304 	movi	r2,12
 400a0a0:	e0800015 	stw	r2,0(fp)
 400a0a4:	9080030b 	ldhu	r2,12(r18)
 400a0a8:	013fffc4 	movi	r4,-1
 400a0ac:	10801014 	ori	r2,r2,64
 400a0b0:	9080030d 	sth	r2,12(r18)
 400a0b4:	003f9306 	br	4009f04 <__sfvwrite_r+0xb4>
 400a0b8:	0027883a 	mov	r19,zero
 400a0bc:	002f883a 	mov	r23,zero
 400a0c0:	d8000015 	stw	zero,0(sp)
 400a0c4:	0029883a 	mov	r20,zero
 400a0c8:	98001e26 	beq	r19,zero,400a144 <__sfvwrite_r+0x2f4>
 400a0cc:	d8c00017 	ldw	r3,0(sp)
 400a0d0:	1804c03a 	cmpne	r2,r3,zero
 400a0d4:	10005e26 	beq	r2,zero,400a250 <__sfvwrite_r+0x400>
 400a0d8:	9821883a 	mov	r16,r19
 400a0dc:	a4c0012e 	bgeu	r20,r19,400a0e4 <__sfvwrite_r+0x294>
 400a0e0:	a021883a 	mov	r16,r20
 400a0e4:	91000017 	ldw	r4,0(r18)
 400a0e8:	90800417 	ldw	r2,16(r18)
 400a0ec:	91800217 	ldw	r6,8(r18)
 400a0f0:	91c00517 	ldw	r7,20(r18)
 400a0f4:	1100022e 	bgeu	r2,r4,400a100 <__sfvwrite_r+0x2b0>
 400a0f8:	31e3883a 	add	r17,r6,r7
 400a0fc:	8c001616 	blt	r17,r16,400a158 <__sfvwrite_r+0x308>
 400a100:	81c03816 	blt	r16,r7,400a1e4 <__sfvwrite_r+0x394>
 400a104:	90c00917 	ldw	r3,36(r18)
 400a108:	91400717 	ldw	r5,28(r18)
 400a10c:	e009883a 	mov	r4,fp
 400a110:	b80d883a 	mov	r6,r23
 400a114:	183ee83a 	callr	r3
 400a118:	1023883a 	mov	r17,r2
 400a11c:	00bfe10e 	bge	zero,r2,400a0a4 <__sfvwrite_r+0x254>
 400a120:	a469c83a 	sub	r20,r20,r17
 400a124:	a0001826 	beq	r20,zero,400a188 <__sfvwrite_r+0x338>
 400a128:	b0800217 	ldw	r2,8(r22)
 400a12c:	1445c83a 	sub	r2,r2,r17
 400a130:	b0800215 	stw	r2,8(r22)
 400a134:	103f7226 	beq	r2,zero,4009f00 <__sfvwrite_r+0xb0>
 400a138:	9c67c83a 	sub	r19,r19,r17
 400a13c:	bc6f883a 	add	r23,r23,r17
 400a140:	983fe21e 	bne	r19,zero,400a0cc <__sfvwrite_r+0x27c>
 400a144:	adc00017 	ldw	r23,0(r21)
 400a148:	acc00117 	ldw	r19,4(r21)
 400a14c:	ad400204 	addi	r21,r21,8
 400a150:	d8000015 	stw	zero,0(sp)
 400a154:	003fdc06 	br	400a0c8 <__sfvwrite_r+0x278>
 400a158:	b80b883a 	mov	r5,r23
 400a15c:	880d883a 	mov	r6,r17
 400a160:	400a57c0 	call	400a57c <memmove>
 400a164:	90c00017 	ldw	r3,0(r18)
 400a168:	e009883a 	mov	r4,fp
 400a16c:	900b883a 	mov	r5,r18
 400a170:	1c47883a 	add	r3,r3,r17
 400a174:	90c00015 	stw	r3,0(r18)
 400a178:	40043100 	call	4004310 <_fflush_r>
 400a17c:	103fc91e 	bne	r2,zero,400a0a4 <__sfvwrite_r+0x254>
 400a180:	a469c83a 	sub	r20,r20,r17
 400a184:	a03fe81e 	bne	r20,zero,400a128 <__sfvwrite_r+0x2d8>
 400a188:	e009883a 	mov	r4,fp
 400a18c:	900b883a 	mov	r5,r18
 400a190:	40043100 	call	4004310 <_fflush_r>
 400a194:	103fc31e 	bne	r2,zero,400a0a4 <__sfvwrite_r+0x254>
 400a198:	d8000015 	stw	zero,0(sp)
 400a19c:	003fe206 	br	400a128 <__sfvwrite_r+0x2d8>
 400a1a0:	91000017 	ldw	r4,0(r18)
 400a1a4:	90800417 	ldw	r2,16(r18)
 400a1a8:	1100022e 	bgeu	r2,r4,400a1b4 <__sfvwrite_r+0x364>
 400a1ac:	8023883a 	mov	r17,r16
 400a1b0:	85003136 	bltu	r16,r20,400a278 <__sfvwrite_r+0x428>
 400a1b4:	91c00517 	ldw	r7,20(r18)
 400a1b8:	a1c01836 	bltu	r20,r7,400a21c <__sfvwrite_r+0x3cc>
 400a1bc:	90c00917 	ldw	r3,36(r18)
 400a1c0:	91400717 	ldw	r5,28(r18)
 400a1c4:	e009883a 	mov	r4,fp
 400a1c8:	b80d883a 	mov	r6,r23
 400a1cc:	183ee83a 	callr	r3
 400a1d0:	1021883a 	mov	r16,r2
 400a1d4:	00bfb30e 	bge	zero,r2,400a0a4 <__sfvwrite_r+0x254>
 400a1d8:	1023883a 	mov	r17,r2
 400a1dc:	1027883a 	mov	r19,r2
 400a1e0:	003f9b06 	br	400a050 <__sfvwrite_r+0x200>
 400a1e4:	b80b883a 	mov	r5,r23
 400a1e8:	800d883a 	mov	r6,r16
 400a1ec:	400a57c0 	call	400a57c <memmove>
 400a1f0:	90c00217 	ldw	r3,8(r18)
 400a1f4:	90800017 	ldw	r2,0(r18)
 400a1f8:	8023883a 	mov	r17,r16
 400a1fc:	1c07c83a 	sub	r3,r3,r16
 400a200:	1405883a 	add	r2,r2,r16
 400a204:	90c00215 	stw	r3,8(r18)
 400a208:	90800015 	stw	r2,0(r18)
 400a20c:	003fc406 	br	400a120 <__sfvwrite_r+0x2d0>
 400a210:	a00d883a 	mov	r6,r20
 400a214:	a021883a 	mov	r16,r20
 400a218:	003f8106 	br	400a020 <__sfvwrite_r+0x1d0>
 400a21c:	b80b883a 	mov	r5,r23
 400a220:	a00d883a 	mov	r6,r20
 400a224:	400a57c0 	call	400a57c <memmove>
 400a228:	90c00217 	ldw	r3,8(r18)
 400a22c:	90800017 	ldw	r2,0(r18)
 400a230:	a021883a 	mov	r16,r20
 400a234:	1d07c83a 	sub	r3,r3,r20
 400a238:	1505883a 	add	r2,r2,r20
 400a23c:	a023883a 	mov	r17,r20
 400a240:	a027883a 	mov	r19,r20
 400a244:	90c00215 	stw	r3,8(r18)
 400a248:	90800015 	stw	r2,0(r18)
 400a24c:	003f8006 	br	400a050 <__sfvwrite_r+0x200>
 400a250:	b809883a 	mov	r4,r23
 400a254:	01400284 	movi	r5,10
 400a258:	980d883a 	mov	r6,r19
 400a25c:	400a4980 	call	400a498 <memchr>
 400a260:	10001726 	beq	r2,zero,400a2c0 <__sfvwrite_r+0x470>
 400a264:	15c5c83a 	sub	r2,r2,r23
 400a268:	15000044 	addi	r20,r2,1
 400a26c:	00800044 	movi	r2,1
 400a270:	d8800015 	stw	r2,0(sp)
 400a274:	003f9806 	br	400a0d8 <__sfvwrite_r+0x288>
 400a278:	b80b883a 	mov	r5,r23
 400a27c:	800d883a 	mov	r6,r16
 400a280:	400a57c0 	call	400a57c <memmove>
 400a284:	90c00017 	ldw	r3,0(r18)
 400a288:	e009883a 	mov	r4,fp
 400a28c:	900b883a 	mov	r5,r18
 400a290:	1c07883a 	add	r3,r3,r16
 400a294:	90c00015 	stw	r3,0(r18)
 400a298:	8027883a 	mov	r19,r16
 400a29c:	40043100 	call	4004310 <_fflush_r>
 400a2a0:	103f6b26 	beq	r2,zero,400a050 <__sfvwrite_r+0x200>
 400a2a4:	003f7f06 	br	400a0a4 <__sfvwrite_r+0x254>
 400a2a8:	400b883a 	mov	r5,r8
 400a2ac:	e009883a 	mov	r4,fp
 400a2b0:	400b6c80 	call	400b6c8 <_realloc_r>
 400a2b4:	103f7626 	beq	r2,zero,400a090 <__sfvwrite_r+0x240>
 400a2b8:	1023883a 	mov	r17,r2
 400a2bc:	003f5006 	br	400a000 <__sfvwrite_r+0x1b0>
 400a2c0:	00c00044 	movi	r3,1
 400a2c4:	9d000044 	addi	r20,r19,1
 400a2c8:	d8c00015 	stw	r3,0(sp)
 400a2cc:	003f8206 	br	400a0d8 <__sfvwrite_r+0x288>
 400a2d0:	9080030b 	ldhu	r2,12(r18)
 400a2d4:	00c00244 	movi	r3,9
 400a2d8:	013fffc4 	movi	r4,-1
 400a2dc:	10801014 	ori	r2,r2,64
 400a2e0:	9080030d 	sth	r2,12(r18)
 400a2e4:	e0c00015 	stw	r3,0(fp)
 400a2e8:	003f0606 	br	4009f04 <__sfvwrite_r+0xb4>

0400a2ec <_isatty_r>:
 400a2ec:	defffd04 	addi	sp,sp,-12
 400a2f0:	dc000015 	stw	r16,0(sp)
 400a2f4:	04010074 	movhi	r16,1025
 400a2f8:	840c0804 	addi	r16,r16,12320
 400a2fc:	dc400115 	stw	r17,4(sp)
 400a300:	80000015 	stw	zero,0(r16)
 400a304:	2023883a 	mov	r17,r4
 400a308:	2809883a 	mov	r4,r5
 400a30c:	dfc00215 	stw	ra,8(sp)
 400a310:	400d0d40 	call	400d0d4 <isatty>
 400a314:	1007883a 	mov	r3,r2
 400a318:	00bfffc4 	movi	r2,-1
 400a31c:	18800626 	beq	r3,r2,400a338 <_isatty_r+0x4c>
 400a320:	1805883a 	mov	r2,r3
 400a324:	dfc00217 	ldw	ra,8(sp)
 400a328:	dc400117 	ldw	r17,4(sp)
 400a32c:	dc000017 	ldw	r16,0(sp)
 400a330:	dec00304 	addi	sp,sp,12
 400a334:	f800283a 	ret
 400a338:	80800017 	ldw	r2,0(r16)
 400a33c:	103ff826 	beq	r2,zero,400a320 <_isatty_r+0x34>
 400a340:	88800015 	stw	r2,0(r17)
 400a344:	1805883a 	mov	r2,r3
 400a348:	dfc00217 	ldw	ra,8(sp)
 400a34c:	dc400117 	ldw	r17,4(sp)
 400a350:	dc000017 	ldw	r16,0(sp)
 400a354:	dec00304 	addi	sp,sp,12
 400a358:	f800283a 	ret

0400a35c <__locale_charset>:
 400a35c:	d0a00517 	ldw	r2,-32748(gp)
 400a360:	f800283a 	ret

0400a364 <_localeconv_r>:
 400a364:	00810074 	movhi	r2,1025
 400a368:	1084d404 	addi	r2,r2,4944
 400a36c:	f800283a 	ret

0400a370 <localeconv>:
 400a370:	00810074 	movhi	r2,1025
 400a374:	108bf304 	addi	r2,r2,12236
 400a378:	11000017 	ldw	r4,0(r2)
 400a37c:	400a3641 	jmpi	400a364 <_localeconv_r>

0400a380 <_setlocale_r>:
 400a380:	defffc04 	addi	sp,sp,-16
 400a384:	00c10074 	movhi	r3,1025
 400a388:	18c4aa04 	addi	r3,r3,4776
 400a38c:	dc800215 	stw	r18,8(sp)
 400a390:	dc400115 	stw	r17,4(sp)
 400a394:	dc000015 	stw	r16,0(sp)
 400a398:	2023883a 	mov	r17,r4
 400a39c:	2825883a 	mov	r18,r5
 400a3a0:	dfc00315 	stw	ra,12(sp)
 400a3a4:	3021883a 	mov	r16,r6
 400a3a8:	3009883a 	mov	r4,r6
 400a3ac:	180b883a 	mov	r5,r3
 400a3b0:	30000926 	beq	r6,zero,400a3d8 <_setlocale_r+0x58>
 400a3b4:	400bd2c0 	call	400bd2c <strcmp>
 400a3b8:	8009883a 	mov	r4,r16
 400a3bc:	01410074 	movhi	r5,1025
 400a3c0:	2944bb04 	addi	r5,r5,4844
 400a3c4:	10000b1e 	bne	r2,zero,400a3f4 <_setlocale_r+0x74>
 400a3c8:	8c000d15 	stw	r16,52(r17)
 400a3cc:	8c800c15 	stw	r18,48(r17)
 400a3d0:	00c10074 	movhi	r3,1025
 400a3d4:	18c4aa04 	addi	r3,r3,4776
 400a3d8:	1805883a 	mov	r2,r3
 400a3dc:	dfc00317 	ldw	ra,12(sp)
 400a3e0:	dc800217 	ldw	r18,8(sp)
 400a3e4:	dc400117 	ldw	r17,4(sp)
 400a3e8:	dc000017 	ldw	r16,0(sp)
 400a3ec:	dec00404 	addi	sp,sp,16
 400a3f0:	f800283a 	ret
 400a3f4:	400bd2c0 	call	400bd2c <strcmp>
 400a3f8:	0007883a 	mov	r3,zero
 400a3fc:	103ff226 	beq	r2,zero,400a3c8 <_setlocale_r+0x48>
 400a400:	003ff506 	br	400a3d8 <_setlocale_r+0x58>

0400a404 <setlocale>:
 400a404:	01810074 	movhi	r6,1025
 400a408:	318bf304 	addi	r6,r6,12236
 400a40c:	2007883a 	mov	r3,r4
 400a410:	31000017 	ldw	r4,0(r6)
 400a414:	280d883a 	mov	r6,r5
 400a418:	180b883a 	mov	r5,r3
 400a41c:	400a3801 	jmpi	400a380 <_setlocale_r>

0400a420 <_lseek_r>:
 400a420:	defffd04 	addi	sp,sp,-12
 400a424:	dc000015 	stw	r16,0(sp)
 400a428:	04010074 	movhi	r16,1025
 400a42c:	840c0804 	addi	r16,r16,12320
 400a430:	dc400115 	stw	r17,4(sp)
 400a434:	80000015 	stw	zero,0(r16)
 400a438:	2023883a 	mov	r17,r4
 400a43c:	2809883a 	mov	r4,r5
 400a440:	300b883a 	mov	r5,r6
 400a444:	380d883a 	mov	r6,r7
 400a448:	dfc00215 	stw	ra,8(sp)
 400a44c:	400d1f40 	call	400d1f4 <lseek>
 400a450:	1007883a 	mov	r3,r2
 400a454:	00bfffc4 	movi	r2,-1
 400a458:	18800626 	beq	r3,r2,400a474 <_lseek_r+0x54>
 400a45c:	1805883a 	mov	r2,r3
 400a460:	dfc00217 	ldw	ra,8(sp)
 400a464:	dc400117 	ldw	r17,4(sp)
 400a468:	dc000017 	ldw	r16,0(sp)
 400a46c:	dec00304 	addi	sp,sp,12
 400a470:	f800283a 	ret
 400a474:	80800017 	ldw	r2,0(r16)
 400a478:	103ff826 	beq	r2,zero,400a45c <_lseek_r+0x3c>
 400a47c:	88800015 	stw	r2,0(r17)
 400a480:	1805883a 	mov	r2,r3
 400a484:	dfc00217 	ldw	ra,8(sp)
 400a488:	dc400117 	ldw	r17,4(sp)
 400a48c:	dc000017 	ldw	r16,0(sp)
 400a490:	dec00304 	addi	sp,sp,12
 400a494:	f800283a 	ret

0400a498 <memchr>:
 400a498:	008000c4 	movi	r2,3
 400a49c:	29403fcc 	andi	r5,r5,255
 400a4a0:	2007883a 	mov	r3,r4
 400a4a4:	1180022e 	bgeu	r2,r6,400a4b0 <memchr+0x18>
 400a4a8:	2084703a 	and	r2,r4,r2
 400a4ac:	10000b26 	beq	r2,zero,400a4dc <memchr+0x44>
 400a4b0:	313fffc4 	addi	r4,r6,-1
 400a4b4:	3000051e 	bne	r6,zero,400a4cc <memchr+0x34>
 400a4b8:	00002c06 	br	400a56c <memchr+0xd4>
 400a4bc:	213fffc4 	addi	r4,r4,-1
 400a4c0:	00bfffc4 	movi	r2,-1
 400a4c4:	18c00044 	addi	r3,r3,1
 400a4c8:	20802826 	beq	r4,r2,400a56c <memchr+0xd4>
 400a4cc:	18800003 	ldbu	r2,0(r3)
 400a4d0:	28bffa1e 	bne	r5,r2,400a4bc <memchr+0x24>
 400a4d4:	1805883a 	mov	r2,r3
 400a4d8:	f800283a 	ret
 400a4dc:	0011883a 	mov	r8,zero
 400a4e0:	0007883a 	mov	r3,zero
 400a4e4:	01c00104 	movi	r7,4
 400a4e8:	4004923a 	slli	r2,r8,8
 400a4ec:	18c00044 	addi	r3,r3,1
 400a4f0:	1151883a 	add	r8,r2,r5
 400a4f4:	19fffc1e 	bne	r3,r7,400a4e8 <memchr+0x50>
 400a4f8:	02bfbff4 	movhi	r10,65279
 400a4fc:	52bfbfc4 	addi	r10,r10,-257
 400a500:	02602074 	movhi	r9,32897
 400a504:	4a602004 	addi	r9,r9,-32640
 400a508:	02c000c4 	movi	r11,3
 400a50c:	20800017 	ldw	r2,0(r4)
 400a510:	31bfff04 	addi	r6,r6,-4
 400a514:	200f883a 	mov	r7,r4
 400a518:	1204f03a 	xor	r2,r2,r8
 400a51c:	1287883a 	add	r3,r2,r10
 400a520:	1a46703a 	and	r3,r3,r9
 400a524:	0084303a 	nor	r2,zero,r2
 400a528:	10c4703a 	and	r2,r2,r3
 400a52c:	10000b26 	beq	r2,zero,400a55c <memchr+0xc4>
 400a530:	20800003 	ldbu	r2,0(r4)
 400a534:	28800f26 	beq	r5,r2,400a574 <memchr+0xdc>
 400a538:	20800043 	ldbu	r2,1(r4)
 400a53c:	21c00044 	addi	r7,r4,1
 400a540:	28800c26 	beq	r5,r2,400a574 <memchr+0xdc>
 400a544:	20800083 	ldbu	r2,2(r4)
 400a548:	21c00084 	addi	r7,r4,2
 400a54c:	28800926 	beq	r5,r2,400a574 <memchr+0xdc>
 400a550:	208000c3 	ldbu	r2,3(r4)
 400a554:	21c000c4 	addi	r7,r4,3
 400a558:	28800626 	beq	r5,r2,400a574 <memchr+0xdc>
 400a55c:	21000104 	addi	r4,r4,4
 400a560:	59bfea36 	bltu	r11,r6,400a50c <memchr+0x74>
 400a564:	2007883a 	mov	r3,r4
 400a568:	003fd106 	br	400a4b0 <memchr+0x18>
 400a56c:	0005883a 	mov	r2,zero
 400a570:	f800283a 	ret
 400a574:	3805883a 	mov	r2,r7
 400a578:	f800283a 	ret

0400a57c <memmove>:
 400a57c:	2807883a 	mov	r3,r5
 400a580:	2011883a 	mov	r8,r4
 400a584:	29000c2e 	bgeu	r5,r4,400a5b8 <memmove+0x3c>
 400a588:	298f883a 	add	r7,r5,r6
 400a58c:	21c00a2e 	bgeu	r4,r7,400a5b8 <memmove+0x3c>
 400a590:	30000726 	beq	r6,zero,400a5b0 <memmove+0x34>
 400a594:	2187883a 	add	r3,r4,r6
 400a598:	198dc83a 	sub	r6,r3,r6
 400a59c:	39ffffc4 	addi	r7,r7,-1
 400a5a0:	38800003 	ldbu	r2,0(r7)
 400a5a4:	18ffffc4 	addi	r3,r3,-1
 400a5a8:	18800005 	stb	r2,0(r3)
 400a5ac:	19bffb1e 	bne	r3,r6,400a59c <memmove+0x20>
 400a5b0:	2005883a 	mov	r2,r4
 400a5b4:	f800283a 	ret
 400a5b8:	01c003c4 	movi	r7,15
 400a5bc:	39800a36 	bltu	r7,r6,400a5e8 <memmove+0x6c>
 400a5c0:	303ffb26 	beq	r6,zero,400a5b0 <memmove+0x34>
 400a5c4:	400f883a 	mov	r7,r8
 400a5c8:	320d883a 	add	r6,r6,r8
 400a5cc:	28800003 	ldbu	r2,0(r5)
 400a5d0:	29400044 	addi	r5,r5,1
 400a5d4:	38800005 	stb	r2,0(r7)
 400a5d8:	39c00044 	addi	r7,r7,1
 400a5dc:	39bffb1e 	bne	r7,r6,400a5cc <memmove+0x50>
 400a5e0:	2005883a 	mov	r2,r4
 400a5e4:	f800283a 	ret
 400a5e8:	1904b03a 	or	r2,r3,r4
 400a5ec:	108000cc 	andi	r2,r2,3
 400a5f0:	103ff31e 	bne	r2,zero,400a5c0 <memmove+0x44>
 400a5f4:	3811883a 	mov	r8,r7
 400a5f8:	180b883a 	mov	r5,r3
 400a5fc:	200f883a 	mov	r7,r4
 400a600:	28c00017 	ldw	r3,0(r5)
 400a604:	31bffc04 	addi	r6,r6,-16
 400a608:	38c00015 	stw	r3,0(r7)
 400a60c:	28800117 	ldw	r2,4(r5)
 400a610:	38800115 	stw	r2,4(r7)
 400a614:	28c00217 	ldw	r3,8(r5)
 400a618:	38c00215 	stw	r3,8(r7)
 400a61c:	28800317 	ldw	r2,12(r5)
 400a620:	29400404 	addi	r5,r5,16
 400a624:	38800315 	stw	r2,12(r7)
 400a628:	39c00404 	addi	r7,r7,16
 400a62c:	41bff436 	bltu	r8,r6,400a600 <memmove+0x84>
 400a630:	008000c4 	movi	r2,3
 400a634:	1180072e 	bgeu	r2,r6,400a654 <memmove+0xd8>
 400a638:	1007883a 	mov	r3,r2
 400a63c:	28800017 	ldw	r2,0(r5)
 400a640:	31bfff04 	addi	r6,r6,-4
 400a644:	29400104 	addi	r5,r5,4
 400a648:	38800015 	stw	r2,0(r7)
 400a64c:	39c00104 	addi	r7,r7,4
 400a650:	19bffa36 	bltu	r3,r6,400a63c <memmove+0xc0>
 400a654:	3811883a 	mov	r8,r7
 400a658:	003fd906 	br	400a5c0 <memmove+0x44>

0400a65c <_Bfree>:
 400a65c:	28000826 	beq	r5,zero,400a680 <_Bfree+0x24>
 400a660:	28800117 	ldw	r2,4(r5)
 400a664:	21001317 	ldw	r4,76(r4)
 400a668:	1085883a 	add	r2,r2,r2
 400a66c:	1085883a 	add	r2,r2,r2
 400a670:	1105883a 	add	r2,r2,r4
 400a674:	10c00017 	ldw	r3,0(r2)
 400a678:	28c00015 	stw	r3,0(r5)
 400a67c:	11400015 	stw	r5,0(r2)
 400a680:	f800283a 	ret

0400a684 <__hi0bits>:
 400a684:	20bfffec 	andhi	r2,r4,65535
 400a688:	10001426 	beq	r2,zero,400a6dc <__hi0bits+0x58>
 400a68c:	0007883a 	mov	r3,zero
 400a690:	20bfc02c 	andhi	r2,r4,65280
 400a694:	1000021e 	bne	r2,zero,400a6a0 <__hi0bits+0x1c>
 400a698:	2008923a 	slli	r4,r4,8
 400a69c:	18c00204 	addi	r3,r3,8
 400a6a0:	20bc002c 	andhi	r2,r4,61440
 400a6a4:	1000021e 	bne	r2,zero,400a6b0 <__hi0bits+0x2c>
 400a6a8:	2008913a 	slli	r4,r4,4
 400a6ac:	18c00104 	addi	r3,r3,4
 400a6b0:	20b0002c 	andhi	r2,r4,49152
 400a6b4:	1000031e 	bne	r2,zero,400a6c4 <__hi0bits+0x40>
 400a6b8:	2105883a 	add	r2,r4,r4
 400a6bc:	18c00084 	addi	r3,r3,2
 400a6c0:	1089883a 	add	r4,r2,r2
 400a6c4:	20000316 	blt	r4,zero,400a6d4 <__hi0bits+0x50>
 400a6c8:	2090002c 	andhi	r2,r4,16384
 400a6cc:	10000626 	beq	r2,zero,400a6e8 <__hi0bits+0x64>
 400a6d0:	18c00044 	addi	r3,r3,1
 400a6d4:	1805883a 	mov	r2,r3
 400a6d8:	f800283a 	ret
 400a6dc:	2008943a 	slli	r4,r4,16
 400a6e0:	00c00404 	movi	r3,16
 400a6e4:	003fea06 	br	400a690 <__hi0bits+0xc>
 400a6e8:	00c00804 	movi	r3,32
 400a6ec:	1805883a 	mov	r2,r3
 400a6f0:	f800283a 	ret

0400a6f4 <__lo0bits>:
 400a6f4:	20c00017 	ldw	r3,0(r4)
 400a6f8:	188001cc 	andi	r2,r3,7
 400a6fc:	10000a26 	beq	r2,zero,400a728 <__lo0bits+0x34>
 400a700:	1880004c 	andi	r2,r3,1
 400a704:	1005003a 	cmpeq	r2,r2,zero
 400a708:	10002126 	beq	r2,zero,400a790 <__lo0bits+0x9c>
 400a70c:	1880008c 	andi	r2,r3,2
 400a710:	1000251e 	bne	r2,zero,400a7a8 <__lo0bits+0xb4>
 400a714:	1804d0ba 	srli	r2,r3,2
 400a718:	01400084 	movi	r5,2
 400a71c:	20800015 	stw	r2,0(r4)
 400a720:	2805883a 	mov	r2,r5
 400a724:	f800283a 	ret
 400a728:	18bfffcc 	andi	r2,r3,65535
 400a72c:	10001526 	beq	r2,zero,400a784 <__lo0bits+0x90>
 400a730:	000b883a 	mov	r5,zero
 400a734:	18803fcc 	andi	r2,r3,255
 400a738:	1000021e 	bne	r2,zero,400a744 <__lo0bits+0x50>
 400a73c:	1806d23a 	srli	r3,r3,8
 400a740:	29400204 	addi	r5,r5,8
 400a744:	188003cc 	andi	r2,r3,15
 400a748:	1000021e 	bne	r2,zero,400a754 <__lo0bits+0x60>
 400a74c:	1806d13a 	srli	r3,r3,4
 400a750:	29400104 	addi	r5,r5,4
 400a754:	188000cc 	andi	r2,r3,3
 400a758:	1000021e 	bne	r2,zero,400a764 <__lo0bits+0x70>
 400a75c:	1806d0ba 	srli	r3,r3,2
 400a760:	29400084 	addi	r5,r5,2
 400a764:	1880004c 	andi	r2,r3,1
 400a768:	1000031e 	bne	r2,zero,400a778 <__lo0bits+0x84>
 400a76c:	1806d07a 	srli	r3,r3,1
 400a770:	18000a26 	beq	r3,zero,400a79c <__lo0bits+0xa8>
 400a774:	29400044 	addi	r5,r5,1
 400a778:	2805883a 	mov	r2,r5
 400a77c:	20c00015 	stw	r3,0(r4)
 400a780:	f800283a 	ret
 400a784:	1806d43a 	srli	r3,r3,16
 400a788:	01400404 	movi	r5,16
 400a78c:	003fe906 	br	400a734 <__lo0bits+0x40>
 400a790:	000b883a 	mov	r5,zero
 400a794:	2805883a 	mov	r2,r5
 400a798:	f800283a 	ret
 400a79c:	01400804 	movi	r5,32
 400a7a0:	2805883a 	mov	r2,r5
 400a7a4:	f800283a 	ret
 400a7a8:	1804d07a 	srli	r2,r3,1
 400a7ac:	01400044 	movi	r5,1
 400a7b0:	20800015 	stw	r2,0(r4)
 400a7b4:	003fda06 	br	400a720 <__lo0bits+0x2c>

0400a7b8 <__mcmp>:
 400a7b8:	20800417 	ldw	r2,16(r4)
 400a7bc:	28c00417 	ldw	r3,16(r5)
 400a7c0:	10cfc83a 	sub	r7,r2,r3
 400a7c4:	38000c1e 	bne	r7,zero,400a7f8 <__mcmp+0x40>
 400a7c8:	18c5883a 	add	r2,r3,r3
 400a7cc:	1085883a 	add	r2,r2,r2
 400a7d0:	10c00504 	addi	r3,r2,20
 400a7d4:	21000504 	addi	r4,r4,20
 400a7d8:	28cb883a 	add	r5,r5,r3
 400a7dc:	2085883a 	add	r2,r4,r2
 400a7e0:	10bfff04 	addi	r2,r2,-4
 400a7e4:	297fff04 	addi	r5,r5,-4
 400a7e8:	11800017 	ldw	r6,0(r2)
 400a7ec:	28c00017 	ldw	r3,0(r5)
 400a7f0:	30c0031e 	bne	r6,r3,400a800 <__mcmp+0x48>
 400a7f4:	20bffa36 	bltu	r4,r2,400a7e0 <__mcmp+0x28>
 400a7f8:	3805883a 	mov	r2,r7
 400a7fc:	f800283a 	ret
 400a800:	30c00336 	bltu	r6,r3,400a810 <__mcmp+0x58>
 400a804:	01c00044 	movi	r7,1
 400a808:	3805883a 	mov	r2,r7
 400a80c:	f800283a 	ret
 400a810:	01ffffc4 	movi	r7,-1
 400a814:	003ff806 	br	400a7f8 <__mcmp+0x40>

0400a818 <__ulp>:
 400a818:	295ffc2c 	andhi	r5,r5,32752
 400a81c:	013f3034 	movhi	r4,64704
 400a820:	290b883a 	add	r5,r5,r4
 400a824:	0145c83a 	sub	r2,zero,r5
 400a828:	1007d53a 	srai	r3,r2,20
 400a82c:	000d883a 	mov	r6,zero
 400a830:	0140040e 	bge	zero,r5,400a844 <__ulp+0x2c>
 400a834:	280f883a 	mov	r7,r5
 400a838:	3807883a 	mov	r3,r7
 400a83c:	3005883a 	mov	r2,r6
 400a840:	f800283a 	ret
 400a844:	008004c4 	movi	r2,19
 400a848:	193ffb04 	addi	r4,r3,-20
 400a84c:	10c00c0e 	bge	r2,r3,400a880 <__ulp+0x68>
 400a850:	008007c4 	movi	r2,31
 400a854:	1107c83a 	sub	r3,r2,r4
 400a858:	00800784 	movi	r2,30
 400a85c:	01400044 	movi	r5,1
 400a860:	11000216 	blt	r2,r4,400a86c <__ulp+0x54>
 400a864:	00800044 	movi	r2,1
 400a868:	10ca983a 	sll	r5,r2,r3
 400a86c:	000f883a 	mov	r7,zero
 400a870:	280d883a 	mov	r6,r5
 400a874:	3807883a 	mov	r3,r7
 400a878:	3005883a 	mov	r2,r6
 400a87c:	f800283a 	ret
 400a880:	00800234 	movhi	r2,8
 400a884:	10cfd83a 	sra	r7,r2,r3
 400a888:	000d883a 	mov	r6,zero
 400a88c:	3005883a 	mov	r2,r6
 400a890:	3807883a 	mov	r3,r7
 400a894:	f800283a 	ret

0400a898 <__b2d>:
 400a898:	20800417 	ldw	r2,16(r4)
 400a89c:	defff904 	addi	sp,sp,-28
 400a8a0:	dd000415 	stw	r20,16(sp)
 400a8a4:	1085883a 	add	r2,r2,r2
 400a8a8:	25000504 	addi	r20,r4,20
 400a8ac:	1085883a 	add	r2,r2,r2
 400a8b0:	dc000015 	stw	r16,0(sp)
 400a8b4:	a0a1883a 	add	r16,r20,r2
 400a8b8:	dd400515 	stw	r21,20(sp)
 400a8bc:	857fff17 	ldw	r21,-4(r16)
 400a8c0:	dc400115 	stw	r17,4(sp)
 400a8c4:	dfc00615 	stw	ra,24(sp)
 400a8c8:	a809883a 	mov	r4,r21
 400a8cc:	2823883a 	mov	r17,r5
 400a8d0:	dcc00315 	stw	r19,12(sp)
 400a8d4:	dc800215 	stw	r18,8(sp)
 400a8d8:	400a6840 	call	400a684 <__hi0bits>
 400a8dc:	100b883a 	mov	r5,r2
 400a8e0:	00800804 	movi	r2,32
 400a8e4:	1145c83a 	sub	r2,r2,r5
 400a8e8:	88800015 	stw	r2,0(r17)
 400a8ec:	00800284 	movi	r2,10
 400a8f0:	80ffff04 	addi	r3,r16,-4
 400a8f4:	11401416 	blt	r2,r5,400a948 <__b2d+0xb0>
 400a8f8:	008002c4 	movi	r2,11
 400a8fc:	1149c83a 	sub	r4,r2,r5
 400a900:	a0c02736 	bltu	r20,r3,400a9a0 <__b2d+0x108>
 400a904:	000d883a 	mov	r6,zero
 400a908:	28800544 	addi	r2,r5,21
 400a90c:	a906d83a 	srl	r3,r21,r4
 400a910:	a884983a 	sll	r2,r21,r2
 400a914:	1ccffc34 	orhi	r19,r3,16368
 400a918:	11a4b03a 	or	r18,r2,r6
 400a91c:	9005883a 	mov	r2,r18
 400a920:	9807883a 	mov	r3,r19
 400a924:	dfc00617 	ldw	ra,24(sp)
 400a928:	dd400517 	ldw	r21,20(sp)
 400a92c:	dd000417 	ldw	r20,16(sp)
 400a930:	dcc00317 	ldw	r19,12(sp)
 400a934:	dc800217 	ldw	r18,8(sp)
 400a938:	dc400117 	ldw	r17,4(sp)
 400a93c:	dc000017 	ldw	r16,0(sp)
 400a940:	dec00704 	addi	sp,sp,28
 400a944:	f800283a 	ret
 400a948:	a0c00e36 	bltu	r20,r3,400a984 <__b2d+0xec>
 400a94c:	293ffd44 	addi	r4,r5,-11
 400a950:	000d883a 	mov	r6,zero
 400a954:	20000f26 	beq	r4,zero,400a994 <__b2d+0xfc>
 400a958:	00800804 	movi	r2,32
 400a95c:	110bc83a 	sub	r5,r2,r4
 400a960:	a0c01236 	bltu	r20,r3,400a9ac <__b2d+0x114>
 400a964:	000f883a 	mov	r7,zero
 400a968:	a904983a 	sll	r2,r21,r4
 400a96c:	3146d83a 	srl	r3,r6,r5
 400a970:	3108983a 	sll	r4,r6,r4
 400a974:	108ffc34 	orhi	r2,r2,16368
 400a978:	18a6b03a 	or	r19,r3,r2
 400a97c:	3924b03a 	or	r18,r7,r4
 400a980:	003fe606 	br	400a91c <__b2d+0x84>
 400a984:	293ffd44 	addi	r4,r5,-11
 400a988:	81bffe17 	ldw	r6,-8(r16)
 400a98c:	80fffe04 	addi	r3,r16,-8
 400a990:	203ff11e 	bne	r4,zero,400a958 <__b2d+0xc0>
 400a994:	accffc34 	orhi	r19,r21,16368
 400a998:	3025883a 	mov	r18,r6
 400a99c:	003fdf06 	br	400a91c <__b2d+0x84>
 400a9a0:	18bfff17 	ldw	r2,-4(r3)
 400a9a4:	110cd83a 	srl	r6,r2,r4
 400a9a8:	003fd706 	br	400a908 <__b2d+0x70>
 400a9ac:	18bfff17 	ldw	r2,-4(r3)
 400a9b0:	114ed83a 	srl	r7,r2,r5
 400a9b4:	003fec06 	br	400a968 <__b2d+0xd0>

0400a9b8 <__ratio>:
 400a9b8:	defff904 	addi	sp,sp,-28
 400a9bc:	dc400215 	stw	r17,8(sp)
 400a9c0:	2823883a 	mov	r17,r5
 400a9c4:	d80b883a 	mov	r5,sp
 400a9c8:	dfc00615 	stw	ra,24(sp)
 400a9cc:	dd000515 	stw	r20,20(sp)
 400a9d0:	dcc00415 	stw	r19,16(sp)
 400a9d4:	dc800315 	stw	r18,12(sp)
 400a9d8:	2025883a 	mov	r18,r4
 400a9dc:	400a8980 	call	400a898 <__b2d>
 400a9e0:	8809883a 	mov	r4,r17
 400a9e4:	d9400104 	addi	r5,sp,4
 400a9e8:	1027883a 	mov	r19,r2
 400a9ec:	1829883a 	mov	r20,r3
 400a9f0:	400a8980 	call	400a898 <__b2d>
 400a9f4:	89000417 	ldw	r4,16(r17)
 400a9f8:	91c00417 	ldw	r7,16(r18)
 400a9fc:	d9800117 	ldw	r6,4(sp)
 400aa00:	180b883a 	mov	r5,r3
 400aa04:	390fc83a 	sub	r7,r7,r4
 400aa08:	1009883a 	mov	r4,r2
 400aa0c:	d8800017 	ldw	r2,0(sp)
 400aa10:	380e917a 	slli	r7,r7,5
 400aa14:	2011883a 	mov	r8,r4
 400aa18:	1185c83a 	sub	r2,r2,r6
 400aa1c:	11c5883a 	add	r2,r2,r7
 400aa20:	1006953a 	slli	r3,r2,20
 400aa24:	2813883a 	mov	r9,r5
 400aa28:	00800d0e 	bge	zero,r2,400aa60 <__ratio+0xa8>
 400aa2c:	1d29883a 	add	r20,r3,r20
 400aa30:	a00b883a 	mov	r5,r20
 400aa34:	480f883a 	mov	r7,r9
 400aa38:	9809883a 	mov	r4,r19
 400aa3c:	400d883a 	mov	r6,r8
 400aa40:	40036000 	call	4003600 <__divdf3>
 400aa44:	dfc00617 	ldw	ra,24(sp)
 400aa48:	dd000517 	ldw	r20,20(sp)
 400aa4c:	dcc00417 	ldw	r19,16(sp)
 400aa50:	dc800317 	ldw	r18,12(sp)
 400aa54:	dc400217 	ldw	r17,8(sp)
 400aa58:	dec00704 	addi	sp,sp,28
 400aa5c:	f800283a 	ret
 400aa60:	28d3c83a 	sub	r9,r5,r3
 400aa64:	003ff206 	br	400aa30 <__ratio+0x78>

0400aa68 <_mprec_log10>:
 400aa68:	defffe04 	addi	sp,sp,-8
 400aa6c:	008005c4 	movi	r2,23
 400aa70:	dc000015 	stw	r16,0(sp)
 400aa74:	dfc00115 	stw	ra,4(sp)
 400aa78:	2021883a 	mov	r16,r4
 400aa7c:	11000c16 	blt	r2,r4,400aab0 <_mprec_log10+0x48>
 400aa80:	200490fa 	slli	r2,r4,3
 400aa84:	00c10074 	movhi	r3,1025
 400aa88:	18c4e004 	addi	r3,r3,4992
 400aa8c:	10c5883a 	add	r2,r2,r3
 400aa90:	12400117 	ldw	r9,4(r2)
 400aa94:	12000017 	ldw	r8,0(r2)
 400aa98:	4807883a 	mov	r3,r9
 400aa9c:	4005883a 	mov	r2,r8
 400aaa0:	dfc00117 	ldw	ra,4(sp)
 400aaa4:	dc000017 	ldw	r16,0(sp)
 400aaa8:	dec00204 	addi	sp,sp,8
 400aaac:	f800283a 	ret
 400aab0:	0011883a 	mov	r8,zero
 400aab4:	024ffc34 	movhi	r9,16368
 400aab8:	0005883a 	mov	r2,zero
 400aabc:	00d00934 	movhi	r3,16420
 400aac0:	480b883a 	mov	r5,r9
 400aac4:	4009883a 	mov	r4,r8
 400aac8:	180f883a 	mov	r7,r3
 400aacc:	100d883a 	mov	r6,r2
 400aad0:	400323c0 	call	400323c <__muldf3>
 400aad4:	843fffc4 	addi	r16,r16,-1
 400aad8:	1011883a 	mov	r8,r2
 400aadc:	1813883a 	mov	r9,r3
 400aae0:	803ff51e 	bne	r16,zero,400aab8 <_mprec_log10+0x50>
 400aae4:	4005883a 	mov	r2,r8
 400aae8:	4807883a 	mov	r3,r9
 400aaec:	dfc00117 	ldw	ra,4(sp)
 400aaf0:	dc000017 	ldw	r16,0(sp)
 400aaf4:	dec00204 	addi	sp,sp,8
 400aaf8:	f800283a 	ret

0400aafc <__copybits>:
 400aafc:	297fffc4 	addi	r5,r5,-1
 400ab00:	30800417 	ldw	r2,16(r6)
 400ab04:	280bd17a 	srai	r5,r5,5
 400ab08:	31800504 	addi	r6,r6,20
 400ab0c:	1085883a 	add	r2,r2,r2
 400ab10:	294b883a 	add	r5,r5,r5
 400ab14:	294b883a 	add	r5,r5,r5
 400ab18:	1085883a 	add	r2,r2,r2
 400ab1c:	290b883a 	add	r5,r5,r4
 400ab20:	3087883a 	add	r3,r6,r2
 400ab24:	29400104 	addi	r5,r5,4
 400ab28:	30c0052e 	bgeu	r6,r3,400ab40 <__copybits+0x44>
 400ab2c:	30800017 	ldw	r2,0(r6)
 400ab30:	31800104 	addi	r6,r6,4
 400ab34:	20800015 	stw	r2,0(r4)
 400ab38:	21000104 	addi	r4,r4,4
 400ab3c:	30fffb36 	bltu	r6,r3,400ab2c <__copybits+0x30>
 400ab40:	2140032e 	bgeu	r4,r5,400ab50 <__copybits+0x54>
 400ab44:	20000015 	stw	zero,0(r4)
 400ab48:	21000104 	addi	r4,r4,4
 400ab4c:	217ffd36 	bltu	r4,r5,400ab44 <__copybits+0x48>
 400ab50:	f800283a 	ret

0400ab54 <__any_on>:
 400ab54:	20800417 	ldw	r2,16(r4)
 400ab58:	2807d17a 	srai	r3,r5,5
 400ab5c:	21000504 	addi	r4,r4,20
 400ab60:	10c00d0e 	bge	r2,r3,400ab98 <__any_on+0x44>
 400ab64:	1085883a 	add	r2,r2,r2
 400ab68:	1085883a 	add	r2,r2,r2
 400ab6c:	208d883a 	add	r6,r4,r2
 400ab70:	2180182e 	bgeu	r4,r6,400abd4 <__any_on+0x80>
 400ab74:	30bfff17 	ldw	r2,-4(r6)
 400ab78:	30ffff04 	addi	r3,r6,-4
 400ab7c:	1000041e 	bne	r2,zero,400ab90 <__any_on+0x3c>
 400ab80:	20c0142e 	bgeu	r4,r3,400abd4 <__any_on+0x80>
 400ab84:	18ffff04 	addi	r3,r3,-4
 400ab88:	18800017 	ldw	r2,0(r3)
 400ab8c:	103ffc26 	beq	r2,zero,400ab80 <__any_on+0x2c>
 400ab90:	00800044 	movi	r2,1
 400ab94:	f800283a 	ret
 400ab98:	18800a0e 	bge	r3,r2,400abc4 <__any_on+0x70>
 400ab9c:	294007cc 	andi	r5,r5,31
 400aba0:	28000826 	beq	r5,zero,400abc4 <__any_on+0x70>
 400aba4:	18c5883a 	add	r2,r3,r3
 400aba8:	1085883a 	add	r2,r2,r2
 400abac:	208d883a 	add	r6,r4,r2
 400abb0:	30c00017 	ldw	r3,0(r6)
 400abb4:	1944d83a 	srl	r2,r3,r5
 400abb8:	1144983a 	sll	r2,r2,r5
 400abbc:	18bff41e 	bne	r3,r2,400ab90 <__any_on+0x3c>
 400abc0:	003feb06 	br	400ab70 <__any_on+0x1c>
 400abc4:	18c5883a 	add	r2,r3,r3
 400abc8:	1085883a 	add	r2,r2,r2
 400abcc:	208d883a 	add	r6,r4,r2
 400abd0:	003fe706 	br	400ab70 <__any_on+0x1c>
 400abd4:	0005883a 	mov	r2,zero
 400abd8:	f800283a 	ret

0400abdc <_Balloc>:
 400abdc:	20c01317 	ldw	r3,76(r4)
 400abe0:	defffb04 	addi	sp,sp,-20
 400abe4:	dcc00315 	stw	r19,12(sp)
 400abe8:	dc800215 	stw	r18,8(sp)
 400abec:	dfc00415 	stw	ra,16(sp)
 400abf0:	2825883a 	mov	r18,r5
 400abf4:	dc400115 	stw	r17,4(sp)
 400abf8:	dc000015 	stw	r16,0(sp)
 400abfc:	2027883a 	mov	r19,r4
 400ac00:	01800404 	movi	r6,16
 400ac04:	01400104 	movi	r5,4
 400ac08:	18001726 	beq	r3,zero,400ac68 <_Balloc+0x8c>
 400ac0c:	01400044 	movi	r5,1
 400ac10:	9485883a 	add	r2,r18,r18
 400ac14:	2ca2983a 	sll	r17,r5,r18
 400ac18:	1085883a 	add	r2,r2,r2
 400ac1c:	10c7883a 	add	r3,r2,r3
 400ac20:	1c000017 	ldw	r16,0(r3)
 400ac24:	8c4d883a 	add	r6,r17,r17
 400ac28:	318d883a 	add	r6,r6,r6
 400ac2c:	9809883a 	mov	r4,r19
 400ac30:	31800504 	addi	r6,r6,20
 400ac34:	80001226 	beq	r16,zero,400ac80 <_Balloc+0xa4>
 400ac38:	80800017 	ldw	r2,0(r16)
 400ac3c:	18800015 	stw	r2,0(r3)
 400ac40:	80000415 	stw	zero,16(r16)
 400ac44:	80000315 	stw	zero,12(r16)
 400ac48:	8005883a 	mov	r2,r16
 400ac4c:	dfc00417 	ldw	ra,16(sp)
 400ac50:	dcc00317 	ldw	r19,12(sp)
 400ac54:	dc800217 	ldw	r18,8(sp)
 400ac58:	dc400117 	ldw	r17,4(sp)
 400ac5c:	dc000017 	ldw	r16,0(sp)
 400ac60:	dec00504 	addi	sp,sp,20
 400ac64:	f800283a 	ret
 400ac68:	400bde80 	call	400bde8 <_calloc_r>
 400ac6c:	1007883a 	mov	r3,r2
 400ac70:	0021883a 	mov	r16,zero
 400ac74:	98801315 	stw	r2,76(r19)
 400ac78:	103fe41e 	bne	r2,zero,400ac0c <_Balloc+0x30>
 400ac7c:	003ff206 	br	400ac48 <_Balloc+0x6c>
 400ac80:	400bde80 	call	400bde8 <_calloc_r>
 400ac84:	103ff026 	beq	r2,zero,400ac48 <_Balloc+0x6c>
 400ac88:	1021883a 	mov	r16,r2
 400ac8c:	14800115 	stw	r18,4(r2)
 400ac90:	14400215 	stw	r17,8(r2)
 400ac94:	003fea06 	br	400ac40 <_Balloc+0x64>

0400ac98 <__d2b>:
 400ac98:	defff504 	addi	sp,sp,-44
 400ac9c:	dcc00515 	stw	r19,20(sp)
 400aca0:	04c00044 	movi	r19,1
 400aca4:	dc000215 	stw	r16,8(sp)
 400aca8:	2821883a 	mov	r16,r5
 400acac:	980b883a 	mov	r5,r19
 400acb0:	ddc00915 	stw	r23,36(sp)
 400acb4:	dd800815 	stw	r22,32(sp)
 400acb8:	dd400715 	stw	r21,28(sp)
 400acbc:	dd000615 	stw	r20,24(sp)
 400acc0:	dc800415 	stw	r18,16(sp)
 400acc4:	dc400315 	stw	r17,12(sp)
 400acc8:	dfc00a15 	stw	ra,40(sp)
 400accc:	3023883a 	mov	r17,r6
 400acd0:	382d883a 	mov	r22,r7
 400acd4:	ddc00b17 	ldw	r23,44(sp)
 400acd8:	400abdc0 	call	400abdc <_Balloc>
 400acdc:	1025883a 	mov	r18,r2
 400ace0:	00a00034 	movhi	r2,32768
 400ace4:	10bfffc4 	addi	r2,r2,-1
 400ace8:	8888703a 	and	r4,r17,r2
 400acec:	202ad53a 	srli	r21,r4,20
 400acf0:	00800434 	movhi	r2,16
 400acf4:	10bfffc4 	addi	r2,r2,-1
 400acf8:	8886703a 	and	r3,r17,r2
 400acfc:	a829003a 	cmpeq	r20,r21,zero
 400ad00:	800b883a 	mov	r5,r16
 400ad04:	d8c00115 	stw	r3,4(sp)
 400ad08:	94000504 	addi	r16,r18,20
 400ad0c:	a000021e 	bne	r20,zero,400ad18 <__d2b+0x80>
 400ad10:	18c00434 	orhi	r3,r3,16
 400ad14:	d8c00115 	stw	r3,4(sp)
 400ad18:	28002726 	beq	r5,zero,400adb8 <__d2b+0x120>
 400ad1c:	d809883a 	mov	r4,sp
 400ad20:	d9400015 	stw	r5,0(sp)
 400ad24:	400a6f40 	call	400a6f4 <__lo0bits>
 400ad28:	100d883a 	mov	r6,r2
 400ad2c:	10003526 	beq	r2,zero,400ae04 <__d2b+0x16c>
 400ad30:	d8c00117 	ldw	r3,4(sp)
 400ad34:	00800804 	movi	r2,32
 400ad38:	1185c83a 	sub	r2,r2,r6
 400ad3c:	d9000017 	ldw	r4,0(sp)
 400ad40:	1886983a 	sll	r3,r3,r2
 400ad44:	1906b03a 	or	r3,r3,r4
 400ad48:	90c00515 	stw	r3,20(r18)
 400ad4c:	d8c00117 	ldw	r3,4(sp)
 400ad50:	1986d83a 	srl	r3,r3,r6
 400ad54:	d8c00115 	stw	r3,4(sp)
 400ad58:	180b003a 	cmpeq	r5,r3,zero
 400ad5c:	00800084 	movi	r2,2
 400ad60:	114bc83a 	sub	r5,r2,r5
 400ad64:	80c00115 	stw	r3,4(r16)
 400ad68:	91400415 	stw	r5,16(r18)
 400ad6c:	a0001a1e 	bne	r20,zero,400add8 <__d2b+0x140>
 400ad70:	3545883a 	add	r2,r6,r21
 400ad74:	10bef344 	addi	r2,r2,-1075
 400ad78:	00c00d44 	movi	r3,53
 400ad7c:	b0800015 	stw	r2,0(r22)
 400ad80:	1987c83a 	sub	r3,r3,r6
 400ad84:	b8c00015 	stw	r3,0(r23)
 400ad88:	9005883a 	mov	r2,r18
 400ad8c:	dfc00a17 	ldw	ra,40(sp)
 400ad90:	ddc00917 	ldw	r23,36(sp)
 400ad94:	dd800817 	ldw	r22,32(sp)
 400ad98:	dd400717 	ldw	r21,28(sp)
 400ad9c:	dd000617 	ldw	r20,24(sp)
 400ada0:	dcc00517 	ldw	r19,20(sp)
 400ada4:	dc800417 	ldw	r18,16(sp)
 400ada8:	dc400317 	ldw	r17,12(sp)
 400adac:	dc000217 	ldw	r16,8(sp)
 400adb0:	dec00b04 	addi	sp,sp,44
 400adb4:	f800283a 	ret
 400adb8:	d9000104 	addi	r4,sp,4
 400adbc:	400a6f40 	call	400a6f4 <__lo0bits>
 400adc0:	11800804 	addi	r6,r2,32
 400adc4:	d8800117 	ldw	r2,4(sp)
 400adc8:	94c00415 	stw	r19,16(r18)
 400adcc:	980b883a 	mov	r5,r19
 400add0:	90800515 	stw	r2,20(r18)
 400add4:	a03fe626 	beq	r20,zero,400ad70 <__d2b+0xd8>
 400add8:	2945883a 	add	r2,r5,r5
 400addc:	1085883a 	add	r2,r2,r2
 400ade0:	1405883a 	add	r2,r2,r16
 400ade4:	113fff17 	ldw	r4,-4(r2)
 400ade8:	30fef384 	addi	r3,r6,-1074
 400adec:	2820917a 	slli	r16,r5,5
 400adf0:	b0c00015 	stw	r3,0(r22)
 400adf4:	400a6840 	call	400a684 <__hi0bits>
 400adf8:	80a1c83a 	sub	r16,r16,r2
 400adfc:	bc000015 	stw	r16,0(r23)
 400ae00:	003fe106 	br	400ad88 <__d2b+0xf0>
 400ae04:	d8800017 	ldw	r2,0(sp)
 400ae08:	90800515 	stw	r2,20(r18)
 400ae0c:	d8c00117 	ldw	r3,4(sp)
 400ae10:	003fd106 	br	400ad58 <__d2b+0xc0>

0400ae14 <__mdiff>:
 400ae14:	defffb04 	addi	sp,sp,-20
 400ae18:	dc000015 	stw	r16,0(sp)
 400ae1c:	2821883a 	mov	r16,r5
 400ae20:	dc800215 	stw	r18,8(sp)
 400ae24:	300b883a 	mov	r5,r6
 400ae28:	2025883a 	mov	r18,r4
 400ae2c:	8009883a 	mov	r4,r16
 400ae30:	dc400115 	stw	r17,4(sp)
 400ae34:	dfc00415 	stw	ra,16(sp)
 400ae38:	dcc00315 	stw	r19,12(sp)
 400ae3c:	3023883a 	mov	r17,r6
 400ae40:	400a7b80 	call	400a7b8 <__mcmp>
 400ae44:	10004226 	beq	r2,zero,400af50 <__mdiff+0x13c>
 400ae48:	10005016 	blt	r2,zero,400af8c <__mdiff+0x178>
 400ae4c:	0027883a 	mov	r19,zero
 400ae50:	81400117 	ldw	r5,4(r16)
 400ae54:	9009883a 	mov	r4,r18
 400ae58:	400abdc0 	call	400abdc <_Balloc>
 400ae5c:	1019883a 	mov	r12,r2
 400ae60:	82800417 	ldw	r10,16(r16)
 400ae64:	88800417 	ldw	r2,16(r17)
 400ae68:	81800504 	addi	r6,r16,20
 400ae6c:	5287883a 	add	r3,r10,r10
 400ae70:	1085883a 	add	r2,r2,r2
 400ae74:	18c7883a 	add	r3,r3,r3
 400ae78:	1085883a 	add	r2,r2,r2
 400ae7c:	8a000504 	addi	r8,r17,20
 400ae80:	64c00315 	stw	r19,12(r12)
 400ae84:	30db883a 	add	r13,r6,r3
 400ae88:	4097883a 	add	r11,r8,r2
 400ae8c:	61c00504 	addi	r7,r12,20
 400ae90:	0013883a 	mov	r9,zero
 400ae94:	31000017 	ldw	r4,0(r6)
 400ae98:	41400017 	ldw	r5,0(r8)
 400ae9c:	42000104 	addi	r8,r8,4
 400aea0:	20bfffcc 	andi	r2,r4,65535
 400aea4:	28ffffcc 	andi	r3,r5,65535
 400aea8:	10c5c83a 	sub	r2,r2,r3
 400aeac:	1245883a 	add	r2,r2,r9
 400aeb0:	2008d43a 	srli	r4,r4,16
 400aeb4:	280ad43a 	srli	r5,r5,16
 400aeb8:	1007d43a 	srai	r3,r2,16
 400aebc:	3880000d 	sth	r2,0(r7)
 400aec0:	2149c83a 	sub	r4,r4,r5
 400aec4:	20c9883a 	add	r4,r4,r3
 400aec8:	3900008d 	sth	r4,2(r7)
 400aecc:	31800104 	addi	r6,r6,4
 400aed0:	39c00104 	addi	r7,r7,4
 400aed4:	2013d43a 	srai	r9,r4,16
 400aed8:	42ffee36 	bltu	r8,r11,400ae94 <__mdiff+0x80>
 400aedc:	33400c2e 	bgeu	r6,r13,400af10 <__mdiff+0xfc>
 400aee0:	30800017 	ldw	r2,0(r6)
 400aee4:	31800104 	addi	r6,r6,4
 400aee8:	10ffffcc 	andi	r3,r2,65535
 400aeec:	1a47883a 	add	r3,r3,r9
 400aef0:	1004d43a 	srli	r2,r2,16
 400aef4:	1809d43a 	srai	r4,r3,16
 400aef8:	38c0000d 	sth	r3,0(r7)
 400aefc:	1105883a 	add	r2,r2,r4
 400af00:	3880008d 	sth	r2,2(r7)
 400af04:	1013d43a 	srai	r9,r2,16
 400af08:	39c00104 	addi	r7,r7,4
 400af0c:	337ff436 	bltu	r6,r13,400aee0 <__mdiff+0xcc>
 400af10:	38bfff17 	ldw	r2,-4(r7)
 400af14:	38ffff04 	addi	r3,r7,-4
 400af18:	1000041e 	bne	r2,zero,400af2c <__mdiff+0x118>
 400af1c:	18ffff04 	addi	r3,r3,-4
 400af20:	18800017 	ldw	r2,0(r3)
 400af24:	52bfffc4 	addi	r10,r10,-1
 400af28:	103ffc26 	beq	r2,zero,400af1c <__mdiff+0x108>
 400af2c:	6005883a 	mov	r2,r12
 400af30:	62800415 	stw	r10,16(r12)
 400af34:	dfc00417 	ldw	ra,16(sp)
 400af38:	dcc00317 	ldw	r19,12(sp)
 400af3c:	dc800217 	ldw	r18,8(sp)
 400af40:	dc400117 	ldw	r17,4(sp)
 400af44:	dc000017 	ldw	r16,0(sp)
 400af48:	dec00504 	addi	sp,sp,20
 400af4c:	f800283a 	ret
 400af50:	9009883a 	mov	r4,r18
 400af54:	000b883a 	mov	r5,zero
 400af58:	400abdc0 	call	400abdc <_Balloc>
 400af5c:	1019883a 	mov	r12,r2
 400af60:	00800044 	movi	r2,1
 400af64:	60800415 	stw	r2,16(r12)
 400af68:	6005883a 	mov	r2,r12
 400af6c:	60000515 	stw	zero,20(r12)
 400af70:	dfc00417 	ldw	ra,16(sp)
 400af74:	dcc00317 	ldw	r19,12(sp)
 400af78:	dc800217 	ldw	r18,8(sp)
 400af7c:	dc400117 	ldw	r17,4(sp)
 400af80:	dc000017 	ldw	r16,0(sp)
 400af84:	dec00504 	addi	sp,sp,20
 400af88:	f800283a 	ret
 400af8c:	880d883a 	mov	r6,r17
 400af90:	04c00044 	movi	r19,1
 400af94:	8023883a 	mov	r17,r16
 400af98:	3021883a 	mov	r16,r6
 400af9c:	003fac06 	br	400ae50 <__mdiff+0x3c>

0400afa0 <__lshift>:
 400afa0:	defff904 	addi	sp,sp,-28
 400afa4:	28800417 	ldw	r2,16(r5)
 400afa8:	dc000015 	stw	r16,0(sp)
 400afac:	3021d17a 	srai	r16,r6,5
 400afb0:	28c00217 	ldw	r3,8(r5)
 400afb4:	10800044 	addi	r2,r2,1
 400afb8:	dc400115 	stw	r17,4(sp)
 400afbc:	80a3883a 	add	r17,r16,r2
 400afc0:	dd400515 	stw	r21,20(sp)
 400afc4:	dd000415 	stw	r20,16(sp)
 400afc8:	dc800215 	stw	r18,8(sp)
 400afcc:	dfc00615 	stw	ra,24(sp)
 400afd0:	2825883a 	mov	r18,r5
 400afd4:	dcc00315 	stw	r19,12(sp)
 400afd8:	3029883a 	mov	r20,r6
 400afdc:	202b883a 	mov	r21,r4
 400afe0:	29400117 	ldw	r5,4(r5)
 400afe4:	1c40030e 	bge	r3,r17,400aff4 <__lshift+0x54>
 400afe8:	18c7883a 	add	r3,r3,r3
 400afec:	29400044 	addi	r5,r5,1
 400aff0:	1c7ffd16 	blt	r3,r17,400afe8 <__lshift+0x48>
 400aff4:	a809883a 	mov	r4,r21
 400aff8:	400abdc0 	call	400abdc <_Balloc>
 400affc:	1027883a 	mov	r19,r2
 400b000:	11400504 	addi	r5,r2,20
 400b004:	0400090e 	bge	zero,r16,400b02c <__lshift+0x8c>
 400b008:	2805883a 	mov	r2,r5
 400b00c:	0007883a 	mov	r3,zero
 400b010:	18c00044 	addi	r3,r3,1
 400b014:	10000015 	stw	zero,0(r2)
 400b018:	10800104 	addi	r2,r2,4
 400b01c:	80fffc1e 	bne	r16,r3,400b010 <__lshift+0x70>
 400b020:	8405883a 	add	r2,r16,r16
 400b024:	1085883a 	add	r2,r2,r2
 400b028:	288b883a 	add	r5,r5,r2
 400b02c:	90800417 	ldw	r2,16(r18)
 400b030:	91000504 	addi	r4,r18,20
 400b034:	a18007cc 	andi	r6,r20,31
 400b038:	1085883a 	add	r2,r2,r2
 400b03c:	1085883a 	add	r2,r2,r2
 400b040:	208f883a 	add	r7,r4,r2
 400b044:	30001e26 	beq	r6,zero,400b0c0 <__lshift+0x120>
 400b048:	00800804 	movi	r2,32
 400b04c:	1191c83a 	sub	r8,r2,r6
 400b050:	0007883a 	mov	r3,zero
 400b054:	20800017 	ldw	r2,0(r4)
 400b058:	1184983a 	sll	r2,r2,r6
 400b05c:	1884b03a 	or	r2,r3,r2
 400b060:	28800015 	stw	r2,0(r5)
 400b064:	20c00017 	ldw	r3,0(r4)
 400b068:	21000104 	addi	r4,r4,4
 400b06c:	29400104 	addi	r5,r5,4
 400b070:	1a06d83a 	srl	r3,r3,r8
 400b074:	21fff736 	bltu	r4,r7,400b054 <__lshift+0xb4>
 400b078:	28c00015 	stw	r3,0(r5)
 400b07c:	18000126 	beq	r3,zero,400b084 <__lshift+0xe4>
 400b080:	8c400044 	addi	r17,r17,1
 400b084:	88bfffc4 	addi	r2,r17,-1
 400b088:	98800415 	stw	r2,16(r19)
 400b08c:	a809883a 	mov	r4,r21
 400b090:	900b883a 	mov	r5,r18
 400b094:	400a65c0 	call	400a65c <_Bfree>
 400b098:	9805883a 	mov	r2,r19
 400b09c:	dfc00617 	ldw	ra,24(sp)
 400b0a0:	dd400517 	ldw	r21,20(sp)
 400b0a4:	dd000417 	ldw	r20,16(sp)
 400b0a8:	dcc00317 	ldw	r19,12(sp)
 400b0ac:	dc800217 	ldw	r18,8(sp)
 400b0b0:	dc400117 	ldw	r17,4(sp)
 400b0b4:	dc000017 	ldw	r16,0(sp)
 400b0b8:	dec00704 	addi	sp,sp,28
 400b0bc:	f800283a 	ret
 400b0c0:	20800017 	ldw	r2,0(r4)
 400b0c4:	21000104 	addi	r4,r4,4
 400b0c8:	28800015 	stw	r2,0(r5)
 400b0cc:	29400104 	addi	r5,r5,4
 400b0d0:	21ffec2e 	bgeu	r4,r7,400b084 <__lshift+0xe4>
 400b0d4:	20800017 	ldw	r2,0(r4)
 400b0d8:	21000104 	addi	r4,r4,4
 400b0dc:	28800015 	stw	r2,0(r5)
 400b0e0:	29400104 	addi	r5,r5,4
 400b0e4:	21fff636 	bltu	r4,r7,400b0c0 <__lshift+0x120>
 400b0e8:	003fe606 	br	400b084 <__lshift+0xe4>

0400b0ec <__multiply>:
 400b0ec:	defff904 	addi	sp,sp,-28
 400b0f0:	dcc00315 	stw	r19,12(sp)
 400b0f4:	dc800215 	stw	r18,8(sp)
 400b0f8:	2cc00417 	ldw	r19,16(r5)
 400b0fc:	34800417 	ldw	r18,16(r6)
 400b100:	dd000415 	stw	r20,16(sp)
 400b104:	dc400115 	stw	r17,4(sp)
 400b108:	dfc00615 	stw	ra,24(sp)
 400b10c:	dd400515 	stw	r21,20(sp)
 400b110:	dc000015 	stw	r16,0(sp)
 400b114:	2823883a 	mov	r17,r5
 400b118:	3029883a 	mov	r20,r6
 400b11c:	9c80040e 	bge	r19,r18,400b130 <__multiply+0x44>
 400b120:	9027883a 	mov	r19,r18
 400b124:	2c800417 	ldw	r18,16(r5)
 400b128:	2829883a 	mov	r20,r5
 400b12c:	3023883a 	mov	r17,r6
 400b130:	88800217 	ldw	r2,8(r17)
 400b134:	9ca1883a 	add	r16,r19,r18
 400b138:	89400117 	ldw	r5,4(r17)
 400b13c:	1400010e 	bge	r2,r16,400b144 <__multiply+0x58>
 400b140:	29400044 	addi	r5,r5,1
 400b144:	400abdc0 	call	400abdc <_Balloc>
 400b148:	102b883a 	mov	r21,r2
 400b14c:	8405883a 	add	r2,r16,r16
 400b150:	1085883a 	add	r2,r2,r2
 400b154:	a9000504 	addi	r4,r21,20
 400b158:	209d883a 	add	r14,r4,r2
 400b15c:	2380042e 	bgeu	r4,r14,400b170 <__multiply+0x84>
 400b160:	2005883a 	mov	r2,r4
 400b164:	10000015 	stw	zero,0(r2)
 400b168:	10800104 	addi	r2,r2,4
 400b16c:	13bffd36 	bltu	r2,r14,400b164 <__multiply+0x78>
 400b170:	9485883a 	add	r2,r18,r18
 400b174:	9cc7883a 	add	r3,r19,r19
 400b178:	a1800504 	addi	r6,r20,20
 400b17c:	1085883a 	add	r2,r2,r2
 400b180:	8b400504 	addi	r13,r17,20
 400b184:	18c7883a 	add	r3,r3,r3
 400b188:	309f883a 	add	r15,r6,r2
 400b18c:	68d7883a 	add	r11,r13,r3
 400b190:	33c03b2e 	bgeu	r6,r15,400b280 <__multiply+0x194>
 400b194:	2019883a 	mov	r12,r4
 400b198:	30800017 	ldw	r2,0(r6)
 400b19c:	127fffcc 	andi	r9,r2,65535
 400b1a0:	48001826 	beq	r9,zero,400b204 <__multiply+0x118>
 400b1a4:	6811883a 	mov	r8,r13
 400b1a8:	600f883a 	mov	r7,r12
 400b1ac:	0015883a 	mov	r10,zero
 400b1b0:	40c00017 	ldw	r3,0(r8)
 400b1b4:	39400017 	ldw	r5,0(r7)
 400b1b8:	42000104 	addi	r8,r8,4
 400b1bc:	193fffcc 	andi	r4,r3,65535
 400b1c0:	4909383a 	mul	r4,r9,r4
 400b1c4:	1806d43a 	srli	r3,r3,16
 400b1c8:	28bfffcc 	andi	r2,r5,65535
 400b1cc:	5085883a 	add	r2,r10,r2
 400b1d0:	2089883a 	add	r4,r4,r2
 400b1d4:	48c7383a 	mul	r3,r9,r3
 400b1d8:	280ad43a 	srli	r5,r5,16
 400b1dc:	2004d43a 	srli	r2,r4,16
 400b1e0:	3900000d 	sth	r4,0(r7)
 400b1e4:	1947883a 	add	r3,r3,r5
 400b1e8:	10c5883a 	add	r2,r2,r3
 400b1ec:	3880008d 	sth	r2,2(r7)
 400b1f0:	1014d43a 	srli	r10,r2,16
 400b1f4:	39c00104 	addi	r7,r7,4
 400b1f8:	42ffed36 	bltu	r8,r11,400b1b0 <__multiply+0xc4>
 400b1fc:	3a800015 	stw	r10,0(r7)
 400b200:	30800017 	ldw	r2,0(r6)
 400b204:	1012d43a 	srli	r9,r2,16
 400b208:	48001926 	beq	r9,zero,400b270 <__multiply+0x184>
 400b20c:	60800017 	ldw	r2,0(r12)
 400b210:	6811883a 	mov	r8,r13
 400b214:	600f883a 	mov	r7,r12
 400b218:	0015883a 	mov	r10,zero
 400b21c:	100b883a 	mov	r5,r2
 400b220:	41000017 	ldw	r4,0(r8)
 400b224:	2806d43a 	srli	r3,r5,16
 400b228:	3880000d 	sth	r2,0(r7)
 400b22c:	20bfffcc 	andi	r2,r4,65535
 400b230:	4885383a 	mul	r2,r9,r2
 400b234:	50c7883a 	add	r3,r10,r3
 400b238:	2008d43a 	srli	r4,r4,16
 400b23c:	10c5883a 	add	r2,r2,r3
 400b240:	3880008d 	sth	r2,2(r7)
 400b244:	39c00104 	addi	r7,r7,4
 400b248:	39400017 	ldw	r5,0(r7)
 400b24c:	4909383a 	mul	r4,r9,r4
 400b250:	1004d43a 	srli	r2,r2,16
 400b254:	28ffffcc 	andi	r3,r5,65535
 400b258:	20c9883a 	add	r4,r4,r3
 400b25c:	1105883a 	add	r2,r2,r4
 400b260:	42000104 	addi	r8,r8,4
 400b264:	1014d43a 	srli	r10,r2,16
 400b268:	42ffed36 	bltu	r8,r11,400b220 <__multiply+0x134>
 400b26c:	38800015 	stw	r2,0(r7)
 400b270:	31800104 	addi	r6,r6,4
 400b274:	33c0022e 	bgeu	r6,r15,400b280 <__multiply+0x194>
 400b278:	63000104 	addi	r12,r12,4
 400b27c:	003fc606 	br	400b198 <__multiply+0xac>
 400b280:	0400090e 	bge	zero,r16,400b2a8 <__multiply+0x1bc>
 400b284:	70bfff17 	ldw	r2,-4(r14)
 400b288:	70ffff04 	addi	r3,r14,-4
 400b28c:	10000326 	beq	r2,zero,400b29c <__multiply+0x1b0>
 400b290:	00000506 	br	400b2a8 <__multiply+0x1bc>
 400b294:	18800017 	ldw	r2,0(r3)
 400b298:	1000031e 	bne	r2,zero,400b2a8 <__multiply+0x1bc>
 400b29c:	843fffc4 	addi	r16,r16,-1
 400b2a0:	18ffff04 	addi	r3,r3,-4
 400b2a4:	803ffb1e 	bne	r16,zero,400b294 <__multiply+0x1a8>
 400b2a8:	a805883a 	mov	r2,r21
 400b2ac:	ac000415 	stw	r16,16(r21)
 400b2b0:	dfc00617 	ldw	ra,24(sp)
 400b2b4:	dd400517 	ldw	r21,20(sp)
 400b2b8:	dd000417 	ldw	r20,16(sp)
 400b2bc:	dcc00317 	ldw	r19,12(sp)
 400b2c0:	dc800217 	ldw	r18,8(sp)
 400b2c4:	dc400117 	ldw	r17,4(sp)
 400b2c8:	dc000017 	ldw	r16,0(sp)
 400b2cc:	dec00704 	addi	sp,sp,28
 400b2d0:	f800283a 	ret

0400b2d4 <__i2b>:
 400b2d4:	defffd04 	addi	sp,sp,-12
 400b2d8:	dc000015 	stw	r16,0(sp)
 400b2dc:	04000044 	movi	r16,1
 400b2e0:	dc800115 	stw	r18,4(sp)
 400b2e4:	2825883a 	mov	r18,r5
 400b2e8:	800b883a 	mov	r5,r16
 400b2ec:	dfc00215 	stw	ra,8(sp)
 400b2f0:	400abdc0 	call	400abdc <_Balloc>
 400b2f4:	14000415 	stw	r16,16(r2)
 400b2f8:	14800515 	stw	r18,20(r2)
 400b2fc:	dfc00217 	ldw	ra,8(sp)
 400b300:	dc800117 	ldw	r18,4(sp)
 400b304:	dc000017 	ldw	r16,0(sp)
 400b308:	dec00304 	addi	sp,sp,12
 400b30c:	f800283a 	ret

0400b310 <__multadd>:
 400b310:	defffa04 	addi	sp,sp,-24
 400b314:	dc800215 	stw	r18,8(sp)
 400b318:	2c800417 	ldw	r18,16(r5)
 400b31c:	dd000415 	stw	r20,16(sp)
 400b320:	dcc00315 	stw	r19,12(sp)
 400b324:	dc000015 	stw	r16,0(sp)
 400b328:	dfc00515 	stw	ra,20(sp)
 400b32c:	3821883a 	mov	r16,r7
 400b330:	dc400115 	stw	r17,4(sp)
 400b334:	2827883a 	mov	r19,r5
 400b338:	2029883a 	mov	r20,r4
 400b33c:	2a000504 	addi	r8,r5,20
 400b340:	000f883a 	mov	r7,zero
 400b344:	40800017 	ldw	r2,0(r8)
 400b348:	39c00044 	addi	r7,r7,1
 400b34c:	10ffffcc 	andi	r3,r2,65535
 400b350:	1987383a 	mul	r3,r3,r6
 400b354:	1004d43a 	srli	r2,r2,16
 400b358:	1c07883a 	add	r3,r3,r16
 400b35c:	180ad43a 	srli	r5,r3,16
 400b360:	1185383a 	mul	r2,r2,r6
 400b364:	18ffffcc 	andi	r3,r3,65535
 400b368:	1145883a 	add	r2,r2,r5
 400b36c:	1008943a 	slli	r4,r2,16
 400b370:	1020d43a 	srli	r16,r2,16
 400b374:	20c9883a 	add	r4,r4,r3
 400b378:	41000015 	stw	r4,0(r8)
 400b37c:	42000104 	addi	r8,r8,4
 400b380:	3cbff016 	blt	r7,r18,400b344 <__multadd+0x34>
 400b384:	80000826 	beq	r16,zero,400b3a8 <__multadd+0x98>
 400b388:	98800217 	ldw	r2,8(r19)
 400b38c:	90800f0e 	bge	r18,r2,400b3cc <__multadd+0xbc>
 400b390:	9485883a 	add	r2,r18,r18
 400b394:	1085883a 	add	r2,r2,r2
 400b398:	14c5883a 	add	r2,r2,r19
 400b39c:	90c00044 	addi	r3,r18,1
 400b3a0:	14000515 	stw	r16,20(r2)
 400b3a4:	98c00415 	stw	r3,16(r19)
 400b3a8:	9805883a 	mov	r2,r19
 400b3ac:	dfc00517 	ldw	ra,20(sp)
 400b3b0:	dd000417 	ldw	r20,16(sp)
 400b3b4:	dcc00317 	ldw	r19,12(sp)
 400b3b8:	dc800217 	ldw	r18,8(sp)
 400b3bc:	dc400117 	ldw	r17,4(sp)
 400b3c0:	dc000017 	ldw	r16,0(sp)
 400b3c4:	dec00604 	addi	sp,sp,24
 400b3c8:	f800283a 	ret
 400b3cc:	99400117 	ldw	r5,4(r19)
 400b3d0:	a009883a 	mov	r4,r20
 400b3d4:	29400044 	addi	r5,r5,1
 400b3d8:	400abdc0 	call	400abdc <_Balloc>
 400b3dc:	99800417 	ldw	r6,16(r19)
 400b3e0:	99400304 	addi	r5,r19,12
 400b3e4:	11000304 	addi	r4,r2,12
 400b3e8:	318d883a 	add	r6,r6,r6
 400b3ec:	318d883a 	add	r6,r6,r6
 400b3f0:	31800204 	addi	r6,r6,8
 400b3f4:	1023883a 	mov	r17,r2
 400b3f8:	4005cd80 	call	4005cd8 <memcpy>
 400b3fc:	980b883a 	mov	r5,r19
 400b400:	a009883a 	mov	r4,r20
 400b404:	400a65c0 	call	400a65c <_Bfree>
 400b408:	8827883a 	mov	r19,r17
 400b40c:	003fe006 	br	400b390 <__multadd+0x80>

0400b410 <__pow5mult>:
 400b410:	defffa04 	addi	sp,sp,-24
 400b414:	308000cc 	andi	r2,r6,3
 400b418:	dd000415 	stw	r20,16(sp)
 400b41c:	dcc00315 	stw	r19,12(sp)
 400b420:	dc000015 	stw	r16,0(sp)
 400b424:	dfc00515 	stw	ra,20(sp)
 400b428:	dc800215 	stw	r18,8(sp)
 400b42c:	dc400115 	stw	r17,4(sp)
 400b430:	3021883a 	mov	r16,r6
 400b434:	2027883a 	mov	r19,r4
 400b438:	2829883a 	mov	r20,r5
 400b43c:	10002b1e 	bne	r2,zero,400b4ec <__pow5mult+0xdc>
 400b440:	8025d0ba 	srai	r18,r16,2
 400b444:	90001b26 	beq	r18,zero,400b4b4 <__pow5mult+0xa4>
 400b448:	9c001217 	ldw	r16,72(r19)
 400b44c:	8000081e 	bne	r16,zero,400b470 <__pow5mult+0x60>
 400b450:	00003006 	br	400b514 <__pow5mult+0x104>
 400b454:	800b883a 	mov	r5,r16
 400b458:	800d883a 	mov	r6,r16
 400b45c:	9809883a 	mov	r4,r19
 400b460:	90001426 	beq	r18,zero,400b4b4 <__pow5mult+0xa4>
 400b464:	80800017 	ldw	r2,0(r16)
 400b468:	10001b26 	beq	r2,zero,400b4d8 <__pow5mult+0xc8>
 400b46c:	1021883a 	mov	r16,r2
 400b470:	9080004c 	andi	r2,r18,1
 400b474:	1005003a 	cmpeq	r2,r2,zero
 400b478:	9025d07a 	srai	r18,r18,1
 400b47c:	800d883a 	mov	r6,r16
 400b480:	9809883a 	mov	r4,r19
 400b484:	a00b883a 	mov	r5,r20
 400b488:	103ff21e 	bne	r2,zero,400b454 <__pow5mult+0x44>
 400b48c:	400b0ec0 	call	400b0ec <__multiply>
 400b490:	a00b883a 	mov	r5,r20
 400b494:	9809883a 	mov	r4,r19
 400b498:	1023883a 	mov	r17,r2
 400b49c:	400a65c0 	call	400a65c <_Bfree>
 400b4a0:	8829883a 	mov	r20,r17
 400b4a4:	800b883a 	mov	r5,r16
 400b4a8:	800d883a 	mov	r6,r16
 400b4ac:	9809883a 	mov	r4,r19
 400b4b0:	903fec1e 	bne	r18,zero,400b464 <__pow5mult+0x54>
 400b4b4:	a005883a 	mov	r2,r20
 400b4b8:	dfc00517 	ldw	ra,20(sp)
 400b4bc:	dd000417 	ldw	r20,16(sp)
 400b4c0:	dcc00317 	ldw	r19,12(sp)
 400b4c4:	dc800217 	ldw	r18,8(sp)
 400b4c8:	dc400117 	ldw	r17,4(sp)
 400b4cc:	dc000017 	ldw	r16,0(sp)
 400b4d0:	dec00604 	addi	sp,sp,24
 400b4d4:	f800283a 	ret
 400b4d8:	400b0ec0 	call	400b0ec <__multiply>
 400b4dc:	80800015 	stw	r2,0(r16)
 400b4e0:	1021883a 	mov	r16,r2
 400b4e4:	10000015 	stw	zero,0(r2)
 400b4e8:	003fe106 	br	400b470 <__pow5mult+0x60>
 400b4ec:	1085883a 	add	r2,r2,r2
 400b4f0:	00c10074 	movhi	r3,1025
 400b4f4:	18c52604 	addi	r3,r3,5272
 400b4f8:	1085883a 	add	r2,r2,r2
 400b4fc:	10c5883a 	add	r2,r2,r3
 400b500:	11bfff17 	ldw	r6,-4(r2)
 400b504:	000f883a 	mov	r7,zero
 400b508:	400b3100 	call	400b310 <__multadd>
 400b50c:	1029883a 	mov	r20,r2
 400b510:	003fcb06 	br	400b440 <__pow5mult+0x30>
 400b514:	9809883a 	mov	r4,r19
 400b518:	01409c44 	movi	r5,625
 400b51c:	400b2d40 	call	400b2d4 <__i2b>
 400b520:	98801215 	stw	r2,72(r19)
 400b524:	1021883a 	mov	r16,r2
 400b528:	10000015 	stw	zero,0(r2)
 400b52c:	003fd006 	br	400b470 <__pow5mult+0x60>

0400b530 <__s2b>:
 400b530:	defff904 	addi	sp,sp,-28
 400b534:	dcc00315 	stw	r19,12(sp)
 400b538:	dc800215 	stw	r18,8(sp)
 400b53c:	2827883a 	mov	r19,r5
 400b540:	2025883a 	mov	r18,r4
 400b544:	01400244 	movi	r5,9
 400b548:	39000204 	addi	r4,r7,8
 400b54c:	dd000415 	stw	r20,16(sp)
 400b550:	dc400115 	stw	r17,4(sp)
 400b554:	dfc00615 	stw	ra,24(sp)
 400b558:	dd400515 	stw	r21,20(sp)
 400b55c:	dc000015 	stw	r16,0(sp)
 400b560:	3829883a 	mov	r20,r7
 400b564:	3023883a 	mov	r17,r6
 400b568:	400cd480 	call	400cd48 <__divsi3>
 400b56c:	00c00044 	movi	r3,1
 400b570:	1880350e 	bge	r3,r2,400b648 <__s2b+0x118>
 400b574:	000b883a 	mov	r5,zero
 400b578:	18c7883a 	add	r3,r3,r3
 400b57c:	29400044 	addi	r5,r5,1
 400b580:	18bffd16 	blt	r3,r2,400b578 <__s2b+0x48>
 400b584:	9009883a 	mov	r4,r18
 400b588:	400abdc0 	call	400abdc <_Balloc>
 400b58c:	1011883a 	mov	r8,r2
 400b590:	d8800717 	ldw	r2,28(sp)
 400b594:	00c00044 	movi	r3,1
 400b598:	01800244 	movi	r6,9
 400b59c:	40800515 	stw	r2,20(r8)
 400b5a0:	40c00415 	stw	r3,16(r8)
 400b5a4:	3440260e 	bge	r6,r17,400b640 <__s2b+0x110>
 400b5a8:	3021883a 	mov	r16,r6
 400b5ac:	99ab883a 	add	r21,r19,r6
 400b5b0:	9c05883a 	add	r2,r19,r16
 400b5b4:	11c00007 	ldb	r7,0(r2)
 400b5b8:	400b883a 	mov	r5,r8
 400b5bc:	9009883a 	mov	r4,r18
 400b5c0:	39fff404 	addi	r7,r7,-48
 400b5c4:	01800284 	movi	r6,10
 400b5c8:	400b3100 	call	400b310 <__multadd>
 400b5cc:	84000044 	addi	r16,r16,1
 400b5d0:	1011883a 	mov	r8,r2
 400b5d4:	8c3ff61e 	bne	r17,r16,400b5b0 <__s2b+0x80>
 400b5d8:	ac45883a 	add	r2,r21,r17
 400b5dc:	117ffe04 	addi	r5,r2,-8
 400b5e0:	880d883a 	mov	r6,r17
 400b5e4:	35000c0e 	bge	r6,r20,400b618 <__s2b+0xe8>
 400b5e8:	a185c83a 	sub	r2,r20,r6
 400b5ec:	2821883a 	mov	r16,r5
 400b5f0:	28a3883a 	add	r17,r5,r2
 400b5f4:	81c00007 	ldb	r7,0(r16)
 400b5f8:	400b883a 	mov	r5,r8
 400b5fc:	9009883a 	mov	r4,r18
 400b600:	39fff404 	addi	r7,r7,-48
 400b604:	01800284 	movi	r6,10
 400b608:	400b3100 	call	400b310 <__multadd>
 400b60c:	84000044 	addi	r16,r16,1
 400b610:	1011883a 	mov	r8,r2
 400b614:	847ff71e 	bne	r16,r17,400b5f4 <__s2b+0xc4>
 400b618:	4005883a 	mov	r2,r8
 400b61c:	dfc00617 	ldw	ra,24(sp)
 400b620:	dd400517 	ldw	r21,20(sp)
 400b624:	dd000417 	ldw	r20,16(sp)
 400b628:	dcc00317 	ldw	r19,12(sp)
 400b62c:	dc800217 	ldw	r18,8(sp)
 400b630:	dc400117 	ldw	r17,4(sp)
 400b634:	dc000017 	ldw	r16,0(sp)
 400b638:	dec00704 	addi	sp,sp,28
 400b63c:	f800283a 	ret
 400b640:	99400284 	addi	r5,r19,10
 400b644:	003fe706 	br	400b5e4 <__s2b+0xb4>
 400b648:	000b883a 	mov	r5,zero
 400b64c:	003fcd06 	br	400b584 <__s2b+0x54>

0400b650 <_read_r>:
 400b650:	defffd04 	addi	sp,sp,-12
 400b654:	dc000015 	stw	r16,0(sp)
 400b658:	04010074 	movhi	r16,1025
 400b65c:	840c0804 	addi	r16,r16,12320
 400b660:	dc400115 	stw	r17,4(sp)
 400b664:	80000015 	stw	zero,0(r16)
 400b668:	2023883a 	mov	r17,r4
 400b66c:	2809883a 	mov	r4,r5
 400b670:	300b883a 	mov	r5,r6
 400b674:	380d883a 	mov	r6,r7
 400b678:	dfc00215 	stw	ra,8(sp)
 400b67c:	400d6b40 	call	400d6b4 <read>
 400b680:	1007883a 	mov	r3,r2
 400b684:	00bfffc4 	movi	r2,-1
 400b688:	18800626 	beq	r3,r2,400b6a4 <_read_r+0x54>
 400b68c:	1805883a 	mov	r2,r3
 400b690:	dfc00217 	ldw	ra,8(sp)
 400b694:	dc400117 	ldw	r17,4(sp)
 400b698:	dc000017 	ldw	r16,0(sp)
 400b69c:	dec00304 	addi	sp,sp,12
 400b6a0:	f800283a 	ret
 400b6a4:	80800017 	ldw	r2,0(r16)
 400b6a8:	103ff826 	beq	r2,zero,400b68c <_read_r+0x3c>
 400b6ac:	88800015 	stw	r2,0(r17)
 400b6b0:	1805883a 	mov	r2,r3
 400b6b4:	dfc00217 	ldw	ra,8(sp)
 400b6b8:	dc400117 	ldw	r17,4(sp)
 400b6bc:	dc000017 	ldw	r16,0(sp)
 400b6c0:	dec00304 	addi	sp,sp,12
 400b6c4:	f800283a 	ret

0400b6c8 <_realloc_r>:
 400b6c8:	defff404 	addi	sp,sp,-48
 400b6cc:	dd800815 	stw	r22,32(sp)
 400b6d0:	dc800415 	stw	r18,16(sp)
 400b6d4:	dc400315 	stw	r17,12(sp)
 400b6d8:	dfc00b15 	stw	ra,44(sp)
 400b6dc:	df000a15 	stw	fp,40(sp)
 400b6e0:	ddc00915 	stw	r23,36(sp)
 400b6e4:	dd400715 	stw	r21,28(sp)
 400b6e8:	dd000615 	stw	r20,24(sp)
 400b6ec:	dcc00515 	stw	r19,20(sp)
 400b6f0:	dc000215 	stw	r16,8(sp)
 400b6f4:	2825883a 	mov	r18,r5
 400b6f8:	3023883a 	mov	r17,r6
 400b6fc:	202d883a 	mov	r22,r4
 400b700:	2800c926 	beq	r5,zero,400ba28 <_realloc_r+0x360>
 400b704:	400d3b00 	call	400d3b0 <__malloc_lock>
 400b708:	943ffe04 	addi	r16,r18,-8
 400b70c:	88c002c4 	addi	r3,r17,11
 400b710:	00800584 	movi	r2,22
 400b714:	82000117 	ldw	r8,4(r16)
 400b718:	10c01b2e 	bgeu	r2,r3,400b788 <_realloc_r+0xc0>
 400b71c:	00bffe04 	movi	r2,-8
 400b720:	188e703a 	and	r7,r3,r2
 400b724:	3839883a 	mov	fp,r7
 400b728:	38001a16 	blt	r7,zero,400b794 <_realloc_r+0xcc>
 400b72c:	e4401936 	bltu	fp,r17,400b794 <_realloc_r+0xcc>
 400b730:	013fff04 	movi	r4,-4
 400b734:	4126703a 	and	r19,r8,r4
 400b738:	99c02616 	blt	r19,r7,400b7d4 <_realloc_r+0x10c>
 400b73c:	802b883a 	mov	r21,r16
 400b740:	9829883a 	mov	r20,r19
 400b744:	84000204 	addi	r16,r16,8
 400b748:	a80f883a 	mov	r7,r21
 400b74c:	a70dc83a 	sub	r6,r20,fp
 400b750:	008003c4 	movi	r2,15
 400b754:	1180c136 	bltu	r2,r6,400ba5c <_realloc_r+0x394>
 400b758:	38800117 	ldw	r2,4(r7)
 400b75c:	a549883a 	add	r4,r20,r21
 400b760:	1080004c 	andi	r2,r2,1
 400b764:	a084b03a 	or	r2,r20,r2
 400b768:	38800115 	stw	r2,4(r7)
 400b76c:	20c00117 	ldw	r3,4(r4)
 400b770:	18c00054 	ori	r3,r3,1
 400b774:	20c00115 	stw	r3,4(r4)
 400b778:	b009883a 	mov	r4,r22
 400b77c:	400d3d00 	call	400d3d0 <__malloc_unlock>
 400b780:	8023883a 	mov	r17,r16
 400b784:	00000606 	br	400b7a0 <_realloc_r+0xd8>
 400b788:	01c00404 	movi	r7,16
 400b78c:	3839883a 	mov	fp,r7
 400b790:	e47fe72e 	bgeu	fp,r17,400b730 <_realloc_r+0x68>
 400b794:	00800304 	movi	r2,12
 400b798:	0023883a 	mov	r17,zero
 400b79c:	b0800015 	stw	r2,0(r22)
 400b7a0:	8805883a 	mov	r2,r17
 400b7a4:	dfc00b17 	ldw	ra,44(sp)
 400b7a8:	df000a17 	ldw	fp,40(sp)
 400b7ac:	ddc00917 	ldw	r23,36(sp)
 400b7b0:	dd800817 	ldw	r22,32(sp)
 400b7b4:	dd400717 	ldw	r21,28(sp)
 400b7b8:	dd000617 	ldw	r20,24(sp)
 400b7bc:	dcc00517 	ldw	r19,20(sp)
 400b7c0:	dc800417 	ldw	r18,16(sp)
 400b7c4:	dc400317 	ldw	r17,12(sp)
 400b7c8:	dc000217 	ldw	r16,8(sp)
 400b7cc:	dec00c04 	addi	sp,sp,48
 400b7d0:	f800283a 	ret
 400b7d4:	00810074 	movhi	r2,1025
 400b7d8:	10863a04 	addi	r2,r2,6376
 400b7dc:	12400217 	ldw	r9,8(r2)
 400b7e0:	84cd883a 	add	r6,r16,r19
 400b7e4:	802b883a 	mov	r21,r16
 400b7e8:	3240b926 	beq	r6,r9,400bad0 <_realloc_r+0x408>
 400b7ec:	31400117 	ldw	r5,4(r6)
 400b7f0:	00bfff84 	movi	r2,-2
 400b7f4:	2884703a 	and	r2,r5,r2
 400b7f8:	1185883a 	add	r2,r2,r6
 400b7fc:	10c00117 	ldw	r3,4(r2)
 400b800:	18c0004c 	andi	r3,r3,1
 400b804:	1807003a 	cmpeq	r3,r3,zero
 400b808:	1800a326 	beq	r3,zero,400ba98 <_realloc_r+0x3d0>
 400b80c:	2908703a 	and	r4,r5,r4
 400b810:	9929883a 	add	r20,r19,r4
 400b814:	a1c0a30e 	bge	r20,r7,400baa4 <_realloc_r+0x3dc>
 400b818:	4080004c 	andi	r2,r8,1
 400b81c:	1000551e 	bne	r2,zero,400b974 <_realloc_r+0x2ac>
 400b820:	80800017 	ldw	r2,0(r16)
 400b824:	80afc83a 	sub	r23,r16,r2
 400b828:	b8c00117 	ldw	r3,4(r23)
 400b82c:	00bfff04 	movi	r2,-4
 400b830:	1884703a 	and	r2,r3,r2
 400b834:	30002e26 	beq	r6,zero,400b8f0 <_realloc_r+0x228>
 400b838:	3240b926 	beq	r6,r9,400bb20 <_realloc_r+0x458>
 400b83c:	98a9883a 	add	r20,r19,r2
 400b840:	2509883a 	add	r4,r4,r20
 400b844:	d9000015 	stw	r4,0(sp)
 400b848:	21c02a16 	blt	r4,r7,400b8f4 <_realloc_r+0x22c>
 400b84c:	30800317 	ldw	r2,12(r6)
 400b850:	30c00217 	ldw	r3,8(r6)
 400b854:	01400904 	movi	r5,36
 400b858:	99bfff04 	addi	r6,r19,-4
 400b85c:	18800315 	stw	r2,12(r3)
 400b860:	10c00215 	stw	r3,8(r2)
 400b864:	b9000317 	ldw	r4,12(r23)
 400b868:	b8800217 	ldw	r2,8(r23)
 400b86c:	b82b883a 	mov	r21,r23
 400b870:	bc000204 	addi	r16,r23,8
 400b874:	20800215 	stw	r2,8(r4)
 400b878:	11000315 	stw	r4,12(r2)
 400b87c:	2980e436 	bltu	r5,r6,400bc10 <_realloc_r+0x548>
 400b880:	008004c4 	movi	r2,19
 400b884:	9009883a 	mov	r4,r18
 400b888:	8011883a 	mov	r8,r16
 400b88c:	11800f2e 	bgeu	r2,r6,400b8cc <_realloc_r+0x204>
 400b890:	90800017 	ldw	r2,0(r18)
 400b894:	ba000404 	addi	r8,r23,16
 400b898:	91000204 	addi	r4,r18,8
 400b89c:	b8800215 	stw	r2,8(r23)
 400b8a0:	90c00117 	ldw	r3,4(r18)
 400b8a4:	008006c4 	movi	r2,27
 400b8a8:	b8c00315 	stw	r3,12(r23)
 400b8ac:	1180072e 	bgeu	r2,r6,400b8cc <_realloc_r+0x204>
 400b8b0:	90c00217 	ldw	r3,8(r18)
 400b8b4:	ba000604 	addi	r8,r23,24
 400b8b8:	91000404 	addi	r4,r18,16
 400b8bc:	b8c00415 	stw	r3,16(r23)
 400b8c0:	90800317 	ldw	r2,12(r18)
 400b8c4:	b8800515 	stw	r2,20(r23)
 400b8c8:	3140e726 	beq	r6,r5,400bc68 <_realloc_r+0x5a0>
 400b8cc:	20800017 	ldw	r2,0(r4)
 400b8d0:	dd000017 	ldw	r20,0(sp)
 400b8d4:	b80f883a 	mov	r7,r23
 400b8d8:	40800015 	stw	r2,0(r8)
 400b8dc:	20c00117 	ldw	r3,4(r4)
 400b8e0:	40c00115 	stw	r3,4(r8)
 400b8e4:	20800217 	ldw	r2,8(r4)
 400b8e8:	40800215 	stw	r2,8(r8)
 400b8ec:	003f9706 	br	400b74c <_realloc_r+0x84>
 400b8f0:	98a9883a 	add	r20,r19,r2
 400b8f4:	a1c01f16 	blt	r20,r7,400b974 <_realloc_r+0x2ac>
 400b8f8:	b8c00317 	ldw	r3,12(r23)
 400b8fc:	b8800217 	ldw	r2,8(r23)
 400b900:	99bfff04 	addi	r6,r19,-4
 400b904:	01400904 	movi	r5,36
 400b908:	b82b883a 	mov	r21,r23
 400b90c:	18800215 	stw	r2,8(r3)
 400b910:	10c00315 	stw	r3,12(r2)
 400b914:	bc000204 	addi	r16,r23,8
 400b918:	2980c336 	bltu	r5,r6,400bc28 <_realloc_r+0x560>
 400b91c:	008004c4 	movi	r2,19
 400b920:	9009883a 	mov	r4,r18
 400b924:	8011883a 	mov	r8,r16
 400b928:	11800f2e 	bgeu	r2,r6,400b968 <_realloc_r+0x2a0>
 400b92c:	90800017 	ldw	r2,0(r18)
 400b930:	ba000404 	addi	r8,r23,16
 400b934:	91000204 	addi	r4,r18,8
 400b938:	b8800215 	stw	r2,8(r23)
 400b93c:	90c00117 	ldw	r3,4(r18)
 400b940:	008006c4 	movi	r2,27
 400b944:	b8c00315 	stw	r3,12(r23)
 400b948:	1180072e 	bgeu	r2,r6,400b968 <_realloc_r+0x2a0>
 400b94c:	90c00217 	ldw	r3,8(r18)
 400b950:	ba000604 	addi	r8,r23,24
 400b954:	91000404 	addi	r4,r18,16
 400b958:	b8c00415 	stw	r3,16(r23)
 400b95c:	90800317 	ldw	r2,12(r18)
 400b960:	b8800515 	stw	r2,20(r23)
 400b964:	3140c726 	beq	r6,r5,400bc84 <_realloc_r+0x5bc>
 400b968:	20800017 	ldw	r2,0(r4)
 400b96c:	b80f883a 	mov	r7,r23
 400b970:	003fd906 	br	400b8d8 <_realloc_r+0x210>
 400b974:	880b883a 	mov	r5,r17
 400b978:	b009883a 	mov	r4,r22
 400b97c:	40055980 	call	4005598 <_malloc_r>
 400b980:	1023883a 	mov	r17,r2
 400b984:	10002526 	beq	r2,zero,400ba1c <_realloc_r+0x354>
 400b988:	80800117 	ldw	r2,4(r16)
 400b98c:	00ffff84 	movi	r3,-2
 400b990:	893ffe04 	addi	r4,r17,-8
 400b994:	10c4703a 	and	r2,r2,r3
 400b998:	8085883a 	add	r2,r16,r2
 400b99c:	20809526 	beq	r4,r2,400bbf4 <_realloc_r+0x52c>
 400b9a0:	99bfff04 	addi	r6,r19,-4
 400b9a4:	01c00904 	movi	r7,36
 400b9a8:	39804536 	bltu	r7,r6,400bac0 <_realloc_r+0x3f8>
 400b9ac:	008004c4 	movi	r2,19
 400b9b0:	9009883a 	mov	r4,r18
 400b9b4:	880b883a 	mov	r5,r17
 400b9b8:	11800f2e 	bgeu	r2,r6,400b9f8 <_realloc_r+0x330>
 400b9bc:	90800017 	ldw	r2,0(r18)
 400b9c0:	89400204 	addi	r5,r17,8
 400b9c4:	91000204 	addi	r4,r18,8
 400b9c8:	88800015 	stw	r2,0(r17)
 400b9cc:	90c00117 	ldw	r3,4(r18)
 400b9d0:	008006c4 	movi	r2,27
 400b9d4:	88c00115 	stw	r3,4(r17)
 400b9d8:	1180072e 	bgeu	r2,r6,400b9f8 <_realloc_r+0x330>
 400b9dc:	90c00217 	ldw	r3,8(r18)
 400b9e0:	89400404 	addi	r5,r17,16
 400b9e4:	91000404 	addi	r4,r18,16
 400b9e8:	88c00215 	stw	r3,8(r17)
 400b9ec:	90800317 	ldw	r2,12(r18)
 400b9f0:	88800315 	stw	r2,12(r17)
 400b9f4:	31c09126 	beq	r6,r7,400bc3c <_realloc_r+0x574>
 400b9f8:	20800017 	ldw	r2,0(r4)
 400b9fc:	28800015 	stw	r2,0(r5)
 400ba00:	20c00117 	ldw	r3,4(r4)
 400ba04:	28c00115 	stw	r3,4(r5)
 400ba08:	20800217 	ldw	r2,8(r4)
 400ba0c:	28800215 	stw	r2,8(r5)
 400ba10:	900b883a 	mov	r5,r18
 400ba14:	b009883a 	mov	r4,r22
 400ba18:	4004a9c0 	call	4004a9c <_free_r>
 400ba1c:	b009883a 	mov	r4,r22
 400ba20:	400d3d00 	call	400d3d0 <__malloc_unlock>
 400ba24:	003f5e06 	br	400b7a0 <_realloc_r+0xd8>
 400ba28:	300b883a 	mov	r5,r6
 400ba2c:	dfc00b17 	ldw	ra,44(sp)
 400ba30:	df000a17 	ldw	fp,40(sp)
 400ba34:	ddc00917 	ldw	r23,36(sp)
 400ba38:	dd800817 	ldw	r22,32(sp)
 400ba3c:	dd400717 	ldw	r21,28(sp)
 400ba40:	dd000617 	ldw	r20,24(sp)
 400ba44:	dcc00517 	ldw	r19,20(sp)
 400ba48:	dc800417 	ldw	r18,16(sp)
 400ba4c:	dc400317 	ldw	r17,12(sp)
 400ba50:	dc000217 	ldw	r16,8(sp)
 400ba54:	dec00c04 	addi	sp,sp,48
 400ba58:	40055981 	jmpi	4005598 <_malloc_r>
 400ba5c:	38800117 	ldw	r2,4(r7)
 400ba60:	e54b883a 	add	r5,fp,r21
 400ba64:	31000054 	ori	r4,r6,1
 400ba68:	1080004c 	andi	r2,r2,1
 400ba6c:	1704b03a 	or	r2,r2,fp
 400ba70:	38800115 	stw	r2,4(r7)
 400ba74:	29000115 	stw	r4,4(r5)
 400ba78:	2987883a 	add	r3,r5,r6
 400ba7c:	18800117 	ldw	r2,4(r3)
 400ba80:	29400204 	addi	r5,r5,8
 400ba84:	b009883a 	mov	r4,r22
 400ba88:	10800054 	ori	r2,r2,1
 400ba8c:	18800115 	stw	r2,4(r3)
 400ba90:	4004a9c0 	call	4004a9c <_free_r>
 400ba94:	003f3806 	br	400b778 <_realloc_r+0xb0>
 400ba98:	000d883a 	mov	r6,zero
 400ba9c:	0009883a 	mov	r4,zero
 400baa0:	003f5d06 	br	400b818 <_realloc_r+0x150>
 400baa4:	30c00217 	ldw	r3,8(r6)
 400baa8:	30800317 	ldw	r2,12(r6)
 400baac:	800f883a 	mov	r7,r16
 400bab0:	84000204 	addi	r16,r16,8
 400bab4:	10c00215 	stw	r3,8(r2)
 400bab8:	18800315 	stw	r2,12(r3)
 400babc:	003f2306 	br	400b74c <_realloc_r+0x84>
 400bac0:	8809883a 	mov	r4,r17
 400bac4:	900b883a 	mov	r5,r18
 400bac8:	400a57c0 	call	400a57c <memmove>
 400bacc:	003fd006 	br	400ba10 <_realloc_r+0x348>
 400bad0:	30800117 	ldw	r2,4(r6)
 400bad4:	e0c00404 	addi	r3,fp,16
 400bad8:	1108703a 	and	r4,r2,r4
 400badc:	9905883a 	add	r2,r19,r4
 400bae0:	10ff4d16 	blt	r2,r3,400b818 <_realloc_r+0x150>
 400bae4:	1705c83a 	sub	r2,r2,fp
 400bae8:	870b883a 	add	r5,r16,fp
 400baec:	10800054 	ori	r2,r2,1
 400baf0:	28800115 	stw	r2,4(r5)
 400baf4:	80c00117 	ldw	r3,4(r16)
 400baf8:	00810074 	movhi	r2,1025
 400bafc:	10863a04 	addi	r2,r2,6376
 400bb00:	b009883a 	mov	r4,r22
 400bb04:	18c0004c 	andi	r3,r3,1
 400bb08:	e0c6b03a 	or	r3,fp,r3
 400bb0c:	11400215 	stw	r5,8(r2)
 400bb10:	80c00115 	stw	r3,4(r16)
 400bb14:	400d3d00 	call	400d3d0 <__malloc_unlock>
 400bb18:	84400204 	addi	r17,r16,8
 400bb1c:	003f2006 	br	400b7a0 <_realloc_r+0xd8>
 400bb20:	98a9883a 	add	r20,r19,r2
 400bb24:	2509883a 	add	r4,r4,r20
 400bb28:	e0800404 	addi	r2,fp,16
 400bb2c:	d9000115 	stw	r4,4(sp)
 400bb30:	20bf7016 	blt	r4,r2,400b8f4 <_realloc_r+0x22c>
 400bb34:	b8c00317 	ldw	r3,12(r23)
 400bb38:	b8800217 	ldw	r2,8(r23)
 400bb3c:	99bfff04 	addi	r6,r19,-4
 400bb40:	01400904 	movi	r5,36
 400bb44:	18800215 	stw	r2,8(r3)
 400bb48:	10c00315 	stw	r3,12(r2)
 400bb4c:	bc400204 	addi	r17,r23,8
 400bb50:	29804136 	bltu	r5,r6,400bc58 <_realloc_r+0x590>
 400bb54:	008004c4 	movi	r2,19
 400bb58:	9009883a 	mov	r4,r18
 400bb5c:	880f883a 	mov	r7,r17
 400bb60:	11800f2e 	bgeu	r2,r6,400bba0 <_realloc_r+0x4d8>
 400bb64:	90800017 	ldw	r2,0(r18)
 400bb68:	b9c00404 	addi	r7,r23,16
 400bb6c:	91000204 	addi	r4,r18,8
 400bb70:	b8800215 	stw	r2,8(r23)
 400bb74:	90c00117 	ldw	r3,4(r18)
 400bb78:	008006c4 	movi	r2,27
 400bb7c:	b8c00315 	stw	r3,12(r23)
 400bb80:	1180072e 	bgeu	r2,r6,400bba0 <_realloc_r+0x4d8>
 400bb84:	90c00217 	ldw	r3,8(r18)
 400bb88:	b9c00604 	addi	r7,r23,24
 400bb8c:	91000404 	addi	r4,r18,16
 400bb90:	b8c00415 	stw	r3,16(r23)
 400bb94:	90800317 	ldw	r2,12(r18)
 400bb98:	b8800515 	stw	r2,20(r23)
 400bb9c:	31404026 	beq	r6,r5,400bca0 <_realloc_r+0x5d8>
 400bba0:	20800017 	ldw	r2,0(r4)
 400bba4:	38800015 	stw	r2,0(r7)
 400bba8:	20c00117 	ldw	r3,4(r4)
 400bbac:	38c00115 	stw	r3,4(r7)
 400bbb0:	20800217 	ldw	r2,8(r4)
 400bbb4:	38800215 	stw	r2,8(r7)
 400bbb8:	d8c00117 	ldw	r3,4(sp)
 400bbbc:	bf0b883a 	add	r5,r23,fp
 400bbc0:	b009883a 	mov	r4,r22
 400bbc4:	1f05c83a 	sub	r2,r3,fp
 400bbc8:	10800054 	ori	r2,r2,1
 400bbcc:	28800115 	stw	r2,4(r5)
 400bbd0:	b8c00117 	ldw	r3,4(r23)
 400bbd4:	00810074 	movhi	r2,1025
 400bbd8:	10863a04 	addi	r2,r2,6376
 400bbdc:	11400215 	stw	r5,8(r2)
 400bbe0:	18c0004c 	andi	r3,r3,1
 400bbe4:	e0c6b03a 	or	r3,fp,r3
 400bbe8:	b8c00115 	stw	r3,4(r23)
 400bbec:	400d3d00 	call	400d3d0 <__malloc_unlock>
 400bbf0:	003eeb06 	br	400b7a0 <_realloc_r+0xd8>
 400bbf4:	20800117 	ldw	r2,4(r4)
 400bbf8:	00ffff04 	movi	r3,-4
 400bbfc:	800f883a 	mov	r7,r16
 400bc00:	10c4703a 	and	r2,r2,r3
 400bc04:	98a9883a 	add	r20,r19,r2
 400bc08:	84000204 	addi	r16,r16,8
 400bc0c:	003ecf06 	br	400b74c <_realloc_r+0x84>
 400bc10:	900b883a 	mov	r5,r18
 400bc14:	8009883a 	mov	r4,r16
 400bc18:	400a57c0 	call	400a57c <memmove>
 400bc1c:	dd000017 	ldw	r20,0(sp)
 400bc20:	b80f883a 	mov	r7,r23
 400bc24:	003ec906 	br	400b74c <_realloc_r+0x84>
 400bc28:	900b883a 	mov	r5,r18
 400bc2c:	8009883a 	mov	r4,r16
 400bc30:	400a57c0 	call	400a57c <memmove>
 400bc34:	b80f883a 	mov	r7,r23
 400bc38:	003ec406 	br	400b74c <_realloc_r+0x84>
 400bc3c:	90c00417 	ldw	r3,16(r18)
 400bc40:	89400604 	addi	r5,r17,24
 400bc44:	91000604 	addi	r4,r18,24
 400bc48:	88c00415 	stw	r3,16(r17)
 400bc4c:	90800517 	ldw	r2,20(r18)
 400bc50:	88800515 	stw	r2,20(r17)
 400bc54:	003f6806 	br	400b9f8 <_realloc_r+0x330>
 400bc58:	900b883a 	mov	r5,r18
 400bc5c:	8809883a 	mov	r4,r17
 400bc60:	400a57c0 	call	400a57c <memmove>
 400bc64:	003fd406 	br	400bbb8 <_realloc_r+0x4f0>
 400bc68:	90c00417 	ldw	r3,16(r18)
 400bc6c:	91000604 	addi	r4,r18,24
 400bc70:	ba000804 	addi	r8,r23,32
 400bc74:	b8c00615 	stw	r3,24(r23)
 400bc78:	90800517 	ldw	r2,20(r18)
 400bc7c:	b8800715 	stw	r2,28(r23)
 400bc80:	003f1206 	br	400b8cc <_realloc_r+0x204>
 400bc84:	90c00417 	ldw	r3,16(r18)
 400bc88:	91000604 	addi	r4,r18,24
 400bc8c:	ba000804 	addi	r8,r23,32
 400bc90:	b8c00615 	stw	r3,24(r23)
 400bc94:	90800517 	ldw	r2,20(r18)
 400bc98:	b8800715 	stw	r2,28(r23)
 400bc9c:	003f3206 	br	400b968 <_realloc_r+0x2a0>
 400bca0:	90c00417 	ldw	r3,16(r18)
 400bca4:	91000604 	addi	r4,r18,24
 400bca8:	b9c00804 	addi	r7,r23,32
 400bcac:	b8c00615 	stw	r3,24(r23)
 400bcb0:	90800517 	ldw	r2,20(r18)
 400bcb4:	b8800715 	stw	r2,28(r23)
 400bcb8:	003fb906 	br	400bba0 <_realloc_r+0x4d8>

0400bcbc <__isinfd>:
 400bcbc:	200d883a 	mov	r6,r4
 400bcc0:	0109c83a 	sub	r4,zero,r4
 400bcc4:	2188b03a 	or	r4,r4,r6
 400bcc8:	2008d7fa 	srli	r4,r4,31
 400bccc:	00a00034 	movhi	r2,32768
 400bcd0:	10bfffc4 	addi	r2,r2,-1
 400bcd4:	1144703a 	and	r2,r2,r5
 400bcd8:	2088b03a 	or	r4,r4,r2
 400bcdc:	009ffc34 	movhi	r2,32752
 400bce0:	1105c83a 	sub	r2,r2,r4
 400bce4:	0087c83a 	sub	r3,zero,r2
 400bce8:	10c4b03a 	or	r2,r2,r3
 400bcec:	1004d7fa 	srli	r2,r2,31
 400bcf0:	00c00044 	movi	r3,1
 400bcf4:	1885c83a 	sub	r2,r3,r2
 400bcf8:	f800283a 	ret

0400bcfc <__isnand>:
 400bcfc:	200d883a 	mov	r6,r4
 400bd00:	0109c83a 	sub	r4,zero,r4
 400bd04:	2188b03a 	or	r4,r4,r6
 400bd08:	2008d7fa 	srli	r4,r4,31
 400bd0c:	00a00034 	movhi	r2,32768
 400bd10:	10bfffc4 	addi	r2,r2,-1
 400bd14:	1144703a 	and	r2,r2,r5
 400bd18:	2088b03a 	or	r4,r4,r2
 400bd1c:	009ffc34 	movhi	r2,32752
 400bd20:	1105c83a 	sub	r2,r2,r4
 400bd24:	1004d7fa 	srli	r2,r2,31
 400bd28:	f800283a 	ret

0400bd2c <strcmp>:
 400bd2c:	2144b03a 	or	r2,r4,r5
 400bd30:	108000cc 	andi	r2,r2,3
 400bd34:	10001d1e 	bne	r2,zero,400bdac <strcmp+0x80>
 400bd38:	200f883a 	mov	r7,r4
 400bd3c:	28800017 	ldw	r2,0(r5)
 400bd40:	21000017 	ldw	r4,0(r4)
 400bd44:	280d883a 	mov	r6,r5
 400bd48:	2080161e 	bne	r4,r2,400bda4 <strcmp+0x78>
 400bd4c:	023fbff4 	movhi	r8,65279
 400bd50:	423fbfc4 	addi	r8,r8,-257
 400bd54:	2207883a 	add	r3,r4,r8
 400bd58:	01602074 	movhi	r5,32897
 400bd5c:	29602004 	addi	r5,r5,-32640
 400bd60:	1946703a 	and	r3,r3,r5
 400bd64:	0104303a 	nor	r2,zero,r4
 400bd68:	10c4703a 	and	r2,r2,r3
 400bd6c:	10001c1e 	bne	r2,zero,400bde0 <strcmp+0xb4>
 400bd70:	4013883a 	mov	r9,r8
 400bd74:	2811883a 	mov	r8,r5
 400bd78:	00000106 	br	400bd80 <strcmp+0x54>
 400bd7c:	1800181e 	bne	r3,zero,400bde0 <strcmp+0xb4>
 400bd80:	39c00104 	addi	r7,r7,4
 400bd84:	39000017 	ldw	r4,0(r7)
 400bd88:	31800104 	addi	r6,r6,4
 400bd8c:	31400017 	ldw	r5,0(r6)
 400bd90:	2245883a 	add	r2,r4,r9
 400bd94:	1204703a 	and	r2,r2,r8
 400bd98:	0106303a 	nor	r3,zero,r4
 400bd9c:	1886703a 	and	r3,r3,r2
 400bda0:	217ff626 	beq	r4,r5,400bd7c <strcmp+0x50>
 400bda4:	3809883a 	mov	r4,r7
 400bda8:	300b883a 	mov	r5,r6
 400bdac:	20c00007 	ldb	r3,0(r4)
 400bdb0:	1800051e 	bne	r3,zero,400bdc8 <strcmp+0x9c>
 400bdb4:	00000606 	br	400bdd0 <strcmp+0xa4>
 400bdb8:	21000044 	addi	r4,r4,1
 400bdbc:	20c00007 	ldb	r3,0(r4)
 400bdc0:	29400044 	addi	r5,r5,1
 400bdc4:	18000226 	beq	r3,zero,400bdd0 <strcmp+0xa4>
 400bdc8:	28800007 	ldb	r2,0(r5)
 400bdcc:	18bffa26 	beq	r3,r2,400bdb8 <strcmp+0x8c>
 400bdd0:	20c00003 	ldbu	r3,0(r4)
 400bdd4:	28800003 	ldbu	r2,0(r5)
 400bdd8:	1885c83a 	sub	r2,r3,r2
 400bddc:	f800283a 	ret
 400bde0:	0005883a 	mov	r2,zero
 400bde4:	f800283a 	ret

0400bde8 <_calloc_r>:
 400bde8:	298b383a 	mul	r5,r5,r6
 400bdec:	defffe04 	addi	sp,sp,-8
 400bdf0:	dc000015 	stw	r16,0(sp)
 400bdf4:	dfc00115 	stw	ra,4(sp)
 400bdf8:	40055980 	call	4005598 <_malloc_r>
 400bdfc:	1021883a 	mov	r16,r2
 400be00:	01c00904 	movi	r7,36
 400be04:	10000d26 	beq	r2,zero,400be3c <_calloc_r+0x54>
 400be08:	10ffff17 	ldw	r3,-4(r2)
 400be0c:	1009883a 	mov	r4,r2
 400be10:	00bfff04 	movi	r2,-4
 400be14:	1886703a 	and	r3,r3,r2
 400be18:	1887883a 	add	r3,r3,r2
 400be1c:	180d883a 	mov	r6,r3
 400be20:	000b883a 	mov	r5,zero
 400be24:	38c01736 	bltu	r7,r3,400be84 <_calloc_r+0x9c>
 400be28:	008004c4 	movi	r2,19
 400be2c:	10c00836 	bltu	r2,r3,400be50 <_calloc_r+0x68>
 400be30:	20000215 	stw	zero,8(r4)
 400be34:	20000015 	stw	zero,0(r4)
 400be38:	20000115 	stw	zero,4(r4)
 400be3c:	8005883a 	mov	r2,r16
 400be40:	dfc00117 	ldw	ra,4(sp)
 400be44:	dc000017 	ldw	r16,0(sp)
 400be48:	dec00204 	addi	sp,sp,8
 400be4c:	f800283a 	ret
 400be50:	008006c4 	movi	r2,27
 400be54:	80000015 	stw	zero,0(r16)
 400be58:	80000115 	stw	zero,4(r16)
 400be5c:	81000204 	addi	r4,r16,8
 400be60:	10fff32e 	bgeu	r2,r3,400be30 <_calloc_r+0x48>
 400be64:	80000215 	stw	zero,8(r16)
 400be68:	80000315 	stw	zero,12(r16)
 400be6c:	81000404 	addi	r4,r16,16
 400be70:	19ffef1e 	bne	r3,r7,400be30 <_calloc_r+0x48>
 400be74:	81000604 	addi	r4,r16,24
 400be78:	80000415 	stw	zero,16(r16)
 400be7c:	80000515 	stw	zero,20(r16)
 400be80:	003feb06 	br	400be30 <_calloc_r+0x48>
 400be84:	4005d780 	call	4005d78 <memset>
 400be88:	8005883a 	mov	r2,r16
 400be8c:	dfc00117 	ldw	ra,4(sp)
 400be90:	dc000017 	ldw	r16,0(sp)
 400be94:	dec00204 	addi	sp,sp,8
 400be98:	f800283a 	ret

0400be9c <__udivdi3>:
 400be9c:	defff004 	addi	sp,sp,-64
 400bea0:	2005883a 	mov	r2,r4
 400bea4:	3011883a 	mov	r8,r6
 400bea8:	df000e15 	stw	fp,56(sp)
 400beac:	dd000a15 	stw	r20,40(sp)
 400beb0:	dc000615 	stw	r16,24(sp)
 400beb4:	dfc00f15 	stw	ra,60(sp)
 400beb8:	ddc00d15 	stw	r23,52(sp)
 400bebc:	dd800c15 	stw	r22,48(sp)
 400bec0:	dd400b15 	stw	r21,44(sp)
 400bec4:	dcc00915 	stw	r19,36(sp)
 400bec8:	dc800815 	stw	r18,32(sp)
 400becc:	dc400715 	stw	r17,28(sp)
 400bed0:	4021883a 	mov	r16,r8
 400bed4:	1039883a 	mov	fp,r2
 400bed8:	2829883a 	mov	r20,r5
 400bedc:	38003b1e 	bne	r7,zero,400bfcc <__udivdi3+0x130>
 400bee0:	2a005c36 	bltu	r5,r8,400c054 <__udivdi3+0x1b8>
 400bee4:	4000a626 	beq	r8,zero,400c180 <__udivdi3+0x2e4>
 400bee8:	00bfffd4 	movui	r2,65535
 400beec:	14009e36 	bltu	r2,r16,400c168 <__udivdi3+0x2cc>
 400bef0:	00803fc4 	movi	r2,255
 400bef4:	14013d36 	bltu	r2,r16,400c3ec <__udivdi3+0x550>
 400bef8:	000b883a 	mov	r5,zero
 400befc:	0005883a 	mov	r2,zero
 400bf00:	8084d83a 	srl	r2,r16,r2
 400bf04:	01010074 	movhi	r4,1025
 400bf08:	21046a04 	addi	r4,r4,4520
 400bf0c:	01800804 	movi	r6,32
 400bf10:	1105883a 	add	r2,r2,r4
 400bf14:	10c00003 	ldbu	r3,0(r2)
 400bf18:	28c7883a 	add	r3,r5,r3
 400bf1c:	30edc83a 	sub	r22,r6,r3
 400bf20:	b000ee1e 	bne	r22,zero,400c2dc <__udivdi3+0x440>
 400bf24:	802ad43a 	srli	r21,r16,16
 400bf28:	00800044 	movi	r2,1
 400bf2c:	a423c83a 	sub	r17,r20,r16
 400bf30:	85ffffcc 	andi	r23,r16,65535
 400bf34:	d8800315 	stw	r2,12(sp)
 400bf38:	8809883a 	mov	r4,r17
 400bf3c:	a80b883a 	mov	r5,r21
 400bf40:	400ce080 	call	400ce08 <__udivsi3>
 400bf44:	8809883a 	mov	r4,r17
 400bf48:	a80b883a 	mov	r5,r21
 400bf4c:	102d883a 	mov	r22,r2
 400bf50:	400ce100 	call	400ce10 <__umodsi3>
 400bf54:	1004943a 	slli	r2,r2,16
 400bf58:	e006d43a 	srli	r3,fp,16
 400bf5c:	bda3383a 	mul	r17,r23,r22
 400bf60:	10c4b03a 	or	r2,r2,r3
 400bf64:	1440042e 	bgeu	r2,r17,400bf78 <__udivdi3+0xdc>
 400bf68:	1405883a 	add	r2,r2,r16
 400bf6c:	b5bfffc4 	addi	r22,r22,-1
 400bf70:	14000136 	bltu	r2,r16,400bf78 <__udivdi3+0xdc>
 400bf74:	14413d36 	bltu	r2,r17,400c46c <__udivdi3+0x5d0>
 400bf78:	1463c83a 	sub	r17,r2,r17
 400bf7c:	8809883a 	mov	r4,r17
 400bf80:	a80b883a 	mov	r5,r21
 400bf84:	400ce080 	call	400ce08 <__udivsi3>
 400bf88:	8809883a 	mov	r4,r17
 400bf8c:	a80b883a 	mov	r5,r21
 400bf90:	1029883a 	mov	r20,r2
 400bf94:	400ce100 	call	400ce10 <__umodsi3>
 400bf98:	1004943a 	slli	r2,r2,16
 400bf9c:	bd09383a 	mul	r4,r23,r20
 400bfa0:	e0ffffcc 	andi	r3,fp,65535
 400bfa4:	10c4b03a 	or	r2,r2,r3
 400bfa8:	1100042e 	bgeu	r2,r4,400bfbc <__udivdi3+0x120>
 400bfac:	8085883a 	add	r2,r16,r2
 400bfb0:	a53fffc4 	addi	r20,r20,-1
 400bfb4:	14000136 	bltu	r2,r16,400bfbc <__udivdi3+0x120>
 400bfb8:	11012036 	bltu	r2,r4,400c43c <__udivdi3+0x5a0>
 400bfbc:	b004943a 	slli	r2,r22,16
 400bfc0:	d9000317 	ldw	r4,12(sp)
 400bfc4:	a084b03a 	or	r2,r20,r2
 400bfc8:	00001506 	br	400c020 <__udivdi3+0x184>
 400bfcc:	380d883a 	mov	r6,r7
 400bfd0:	29c06236 	bltu	r5,r7,400c15c <__udivdi3+0x2c0>
 400bfd4:	00bfffd4 	movui	r2,65535
 400bfd8:	11c05a36 	bltu	r2,r7,400c144 <__udivdi3+0x2a8>
 400bfdc:	00803fc4 	movi	r2,255
 400bfe0:	11c0fc36 	bltu	r2,r7,400c3d4 <__udivdi3+0x538>
 400bfe4:	000b883a 	mov	r5,zero
 400bfe8:	0005883a 	mov	r2,zero
 400bfec:	3084d83a 	srl	r2,r6,r2
 400bff0:	01010074 	movhi	r4,1025
 400bff4:	21046a04 	addi	r4,r4,4520
 400bff8:	01c00804 	movi	r7,32
 400bffc:	1105883a 	add	r2,r2,r4
 400c000:	10c00003 	ldbu	r3,0(r2)
 400c004:	28c7883a 	add	r3,r5,r3
 400c008:	38efc83a 	sub	r23,r7,r3
 400c00c:	b800691e 	bne	r23,zero,400c1b4 <__udivdi3+0x318>
 400c010:	35000136 	bltu	r6,r20,400c018 <__udivdi3+0x17c>
 400c014:	e4005136 	bltu	fp,r16,400c15c <__udivdi3+0x2c0>
 400c018:	00800044 	movi	r2,1
 400c01c:	0009883a 	mov	r4,zero
 400c020:	2007883a 	mov	r3,r4
 400c024:	dfc00f17 	ldw	ra,60(sp)
 400c028:	df000e17 	ldw	fp,56(sp)
 400c02c:	ddc00d17 	ldw	r23,52(sp)
 400c030:	dd800c17 	ldw	r22,48(sp)
 400c034:	dd400b17 	ldw	r21,44(sp)
 400c038:	dd000a17 	ldw	r20,40(sp)
 400c03c:	dcc00917 	ldw	r19,36(sp)
 400c040:	dc800817 	ldw	r18,32(sp)
 400c044:	dc400717 	ldw	r17,28(sp)
 400c048:	dc000617 	ldw	r16,24(sp)
 400c04c:	dec01004 	addi	sp,sp,64
 400c050:	f800283a 	ret
 400c054:	00bfffd4 	movui	r2,65535
 400c058:	12005036 	bltu	r2,r8,400c19c <__udivdi3+0x300>
 400c05c:	00803fc4 	movi	r2,255
 400c060:	1200e836 	bltu	r2,r8,400c404 <__udivdi3+0x568>
 400c064:	000b883a 	mov	r5,zero
 400c068:	0005883a 	mov	r2,zero
 400c06c:	8084d83a 	srl	r2,r16,r2
 400c070:	01010074 	movhi	r4,1025
 400c074:	21046a04 	addi	r4,r4,4520
 400c078:	01800804 	movi	r6,32
 400c07c:	1105883a 	add	r2,r2,r4
 400c080:	10c00003 	ldbu	r3,0(r2)
 400c084:	28c7883a 	add	r3,r5,r3
 400c088:	30cbc83a 	sub	r5,r6,r3
 400c08c:	28000626 	beq	r5,zero,400c0a8 <__udivdi3+0x20c>
 400c090:	3145c83a 	sub	r2,r6,r5
 400c094:	e084d83a 	srl	r2,fp,r2
 400c098:	a146983a 	sll	r3,r20,r5
 400c09c:	e178983a 	sll	fp,fp,r5
 400c0a0:	8160983a 	sll	r16,r16,r5
 400c0a4:	18a8b03a 	or	r20,r3,r2
 400c0a8:	802ad43a 	srli	r21,r16,16
 400c0ac:	a009883a 	mov	r4,r20
 400c0b0:	85ffffcc 	andi	r23,r16,65535
 400c0b4:	a80b883a 	mov	r5,r21
 400c0b8:	400ce080 	call	400ce08 <__udivsi3>
 400c0bc:	a009883a 	mov	r4,r20
 400c0c0:	a80b883a 	mov	r5,r21
 400c0c4:	102d883a 	mov	r22,r2
 400c0c8:	400ce100 	call	400ce10 <__umodsi3>
 400c0cc:	1004943a 	slli	r2,r2,16
 400c0d0:	e006d43a 	srli	r3,fp,16
 400c0d4:	bda3383a 	mul	r17,r23,r22
 400c0d8:	10c4b03a 	or	r2,r2,r3
 400c0dc:	1440042e 	bgeu	r2,r17,400c0f0 <__udivdi3+0x254>
 400c0e0:	1405883a 	add	r2,r2,r16
 400c0e4:	b5bfffc4 	addi	r22,r22,-1
 400c0e8:	14000136 	bltu	r2,r16,400c0f0 <__udivdi3+0x254>
 400c0ec:	1440d536 	bltu	r2,r17,400c444 <__udivdi3+0x5a8>
 400c0f0:	1463c83a 	sub	r17,r2,r17
 400c0f4:	8809883a 	mov	r4,r17
 400c0f8:	a80b883a 	mov	r5,r21
 400c0fc:	400ce080 	call	400ce08 <__udivsi3>
 400c100:	8809883a 	mov	r4,r17
 400c104:	a80b883a 	mov	r5,r21
 400c108:	1029883a 	mov	r20,r2
 400c10c:	400ce100 	call	400ce10 <__umodsi3>
 400c110:	1004943a 	slli	r2,r2,16
 400c114:	bd09383a 	mul	r4,r23,r20
 400c118:	e0ffffcc 	andi	r3,fp,65535
 400c11c:	10c4b03a 	or	r2,r2,r3
 400c120:	1100042e 	bgeu	r2,r4,400c134 <__udivdi3+0x298>
 400c124:	8085883a 	add	r2,r16,r2
 400c128:	a53fffc4 	addi	r20,r20,-1
 400c12c:	14000136 	bltu	r2,r16,400c134 <__udivdi3+0x298>
 400c130:	1100c736 	bltu	r2,r4,400c450 <__udivdi3+0x5b4>
 400c134:	b004943a 	slli	r2,r22,16
 400c138:	0009883a 	mov	r4,zero
 400c13c:	a084b03a 	or	r2,r20,r2
 400c140:	003fb706 	br	400c020 <__udivdi3+0x184>
 400c144:	00804034 	movhi	r2,256
 400c148:	10bfffc4 	addi	r2,r2,-1
 400c14c:	11c0a436 	bltu	r2,r7,400c3e0 <__udivdi3+0x544>
 400c150:	01400404 	movi	r5,16
 400c154:	2805883a 	mov	r2,r5
 400c158:	003fa406 	br	400bfec <__udivdi3+0x150>
 400c15c:	0005883a 	mov	r2,zero
 400c160:	0009883a 	mov	r4,zero
 400c164:	003fae06 	br	400c020 <__udivdi3+0x184>
 400c168:	00804034 	movhi	r2,256
 400c16c:	10bfffc4 	addi	r2,r2,-1
 400c170:	1400a136 	bltu	r2,r16,400c3f8 <__udivdi3+0x55c>
 400c174:	01400404 	movi	r5,16
 400c178:	2805883a 	mov	r2,r5
 400c17c:	003f6006 	br	400bf00 <__udivdi3+0x64>
 400c180:	01000044 	movi	r4,1
 400c184:	000b883a 	mov	r5,zero
 400c188:	400ce080 	call	400ce08 <__udivsi3>
 400c18c:	1021883a 	mov	r16,r2
 400c190:	00bfffd4 	movui	r2,65535
 400c194:	143ff436 	bltu	r2,r16,400c168 <__udivdi3+0x2cc>
 400c198:	003f5506 	br	400bef0 <__udivdi3+0x54>
 400c19c:	00804034 	movhi	r2,256
 400c1a0:	10bfffc4 	addi	r2,r2,-1
 400c1a4:	12009a36 	bltu	r2,r8,400c410 <__udivdi3+0x574>
 400c1a8:	01400404 	movi	r5,16
 400c1ac:	2805883a 	mov	r2,r5
 400c1b0:	003fae06 	br	400c06c <__udivdi3+0x1d0>
 400c1b4:	3dc5c83a 	sub	r2,r7,r23
 400c1b8:	35c8983a 	sll	r4,r6,r23
 400c1bc:	8086d83a 	srl	r3,r16,r2
 400c1c0:	a0a2d83a 	srl	r17,r20,r2
 400c1c4:	e084d83a 	srl	r2,fp,r2
 400c1c8:	20eab03a 	or	r21,r4,r3
 400c1cc:	a82cd43a 	srli	r22,r21,16
 400c1d0:	a5c6983a 	sll	r3,r20,r23
 400c1d4:	8809883a 	mov	r4,r17
 400c1d8:	b00b883a 	mov	r5,r22
 400c1dc:	1886b03a 	or	r3,r3,r2
 400c1e0:	d8c00215 	stw	r3,8(sp)
 400c1e4:	400ce080 	call	400ce08 <__udivsi3>
 400c1e8:	8809883a 	mov	r4,r17
 400c1ec:	b00b883a 	mov	r5,r22
 400c1f0:	1029883a 	mov	r20,r2
 400c1f4:	400ce100 	call	400ce10 <__umodsi3>
 400c1f8:	a8ffffcc 	andi	r3,r21,65535
 400c1fc:	d8c00515 	stw	r3,20(sp)
 400c200:	d9000217 	ldw	r4,8(sp)
 400c204:	d9400517 	ldw	r5,20(sp)
 400c208:	1004943a 	slli	r2,r2,16
 400c20c:	2006d43a 	srli	r3,r4,16
 400c210:	85e0983a 	sll	r16,r16,r23
 400c214:	2d23383a 	mul	r17,r5,r20
 400c218:	10c4b03a 	or	r2,r2,r3
 400c21c:	dc000015 	stw	r16,0(sp)
 400c220:	1440032e 	bgeu	r2,r17,400c230 <__udivdi3+0x394>
 400c224:	1545883a 	add	r2,r2,r21
 400c228:	a53fffc4 	addi	r20,r20,-1
 400c22c:	15407f2e 	bgeu	r2,r21,400c42c <__udivdi3+0x590>
 400c230:	1463c83a 	sub	r17,r2,r17
 400c234:	8809883a 	mov	r4,r17
 400c238:	b00b883a 	mov	r5,r22
 400c23c:	400ce080 	call	400ce08 <__udivsi3>
 400c240:	8809883a 	mov	r4,r17
 400c244:	b00b883a 	mov	r5,r22
 400c248:	1021883a 	mov	r16,r2
 400c24c:	400ce100 	call	400ce10 <__umodsi3>
 400c250:	d8c00517 	ldw	r3,20(sp)
 400c254:	d9000217 	ldw	r4,8(sp)
 400c258:	1004943a 	slli	r2,r2,16
 400c25c:	1c0f383a 	mul	r7,r3,r16
 400c260:	20ffffcc 	andi	r3,r4,65535
 400c264:	10e2b03a 	or	r17,r2,r3
 400c268:	89c0032e 	bgeu	r17,r7,400c278 <__udivdi3+0x3dc>
 400c26c:	8d63883a 	add	r17,r17,r21
 400c270:	843fffc4 	addi	r16,r16,-1
 400c274:	8d40692e 	bgeu	r17,r21,400c41c <__udivdi3+0x580>
 400c278:	a008943a 	slli	r4,r20,16
 400c27c:	d9400017 	ldw	r5,0(sp)
 400c280:	89e3c83a 	sub	r17,r17,r7
 400c284:	8110b03a 	or	r8,r16,r4
 400c288:	280cd43a 	srli	r6,r5,16
 400c28c:	28ffffcc 	andi	r3,r5,65535
 400c290:	40bfffcc 	andi	r2,r8,65535
 400c294:	400ad43a 	srli	r5,r8,16
 400c298:	10d3383a 	mul	r9,r2,r3
 400c29c:	1185383a 	mul	r2,r2,r6
 400c2a0:	28c7383a 	mul	r3,r5,r3
 400c2a4:	4808d43a 	srli	r4,r9,16
 400c2a8:	298b383a 	mul	r5,r5,r6
 400c2ac:	10c5883a 	add	r2,r2,r3
 400c2b0:	2089883a 	add	r4,r4,r2
 400c2b4:	20c0022e 	bgeu	r4,r3,400c2c0 <__udivdi3+0x424>
 400c2b8:	00800074 	movhi	r2,1
 400c2bc:	288b883a 	add	r5,r5,r2
 400c2c0:	2004d43a 	srli	r2,r4,16
 400c2c4:	288b883a 	add	r5,r5,r2
 400c2c8:	89403f36 	bltu	r17,r5,400c3c8 <__udivdi3+0x52c>
 400c2cc:	89403926 	beq	r17,r5,400c3b4 <__udivdi3+0x518>
 400c2d0:	4005883a 	mov	r2,r8
 400c2d4:	0009883a 	mov	r4,zero
 400c2d8:	003f5106 	br	400c020 <__udivdi3+0x184>
 400c2dc:	85a0983a 	sll	r16,r16,r22
 400c2e0:	3585c83a 	sub	r2,r6,r22
 400c2e4:	a0a2d83a 	srl	r17,r20,r2
 400c2e8:	802ad43a 	srli	r21,r16,16
 400c2ec:	e084d83a 	srl	r2,fp,r2
 400c2f0:	a586983a 	sll	r3,r20,r22
 400c2f4:	8809883a 	mov	r4,r17
 400c2f8:	a80b883a 	mov	r5,r21
 400c2fc:	1886b03a 	or	r3,r3,r2
 400c300:	d8c00115 	stw	r3,4(sp)
 400c304:	400ce080 	call	400ce08 <__udivsi3>
 400c308:	8809883a 	mov	r4,r17
 400c30c:	a80b883a 	mov	r5,r21
 400c310:	d8800415 	stw	r2,16(sp)
 400c314:	400ce100 	call	400ce10 <__umodsi3>
 400c318:	d9000117 	ldw	r4,4(sp)
 400c31c:	d9400417 	ldw	r5,16(sp)
 400c320:	1004943a 	slli	r2,r2,16
 400c324:	85ffffcc 	andi	r23,r16,65535
 400c328:	2006d43a 	srli	r3,r4,16
 400c32c:	b963383a 	mul	r17,r23,r5
 400c330:	10c4b03a 	or	r2,r2,r3
 400c334:	1440042e 	bgeu	r2,r17,400c348 <__udivdi3+0x4ac>
 400c338:	297fffc4 	addi	r5,r5,-1
 400c33c:	1405883a 	add	r2,r2,r16
 400c340:	d9400415 	stw	r5,16(sp)
 400c344:	1400442e 	bgeu	r2,r16,400c458 <__udivdi3+0x5bc>
 400c348:	1463c83a 	sub	r17,r2,r17
 400c34c:	8809883a 	mov	r4,r17
 400c350:	a80b883a 	mov	r5,r21
 400c354:	400ce080 	call	400ce08 <__udivsi3>
 400c358:	8809883a 	mov	r4,r17
 400c35c:	a80b883a 	mov	r5,r21
 400c360:	1029883a 	mov	r20,r2
 400c364:	400ce100 	call	400ce10 <__umodsi3>
 400c368:	d9400117 	ldw	r5,4(sp)
 400c36c:	1004943a 	slli	r2,r2,16
 400c370:	bd09383a 	mul	r4,r23,r20
 400c374:	28ffffcc 	andi	r3,r5,65535
 400c378:	10c6b03a 	or	r3,r2,r3
 400c37c:	1900062e 	bgeu	r3,r4,400c398 <__udivdi3+0x4fc>
 400c380:	1c07883a 	add	r3,r3,r16
 400c384:	a53fffc4 	addi	r20,r20,-1
 400c388:	1c000336 	bltu	r3,r16,400c398 <__udivdi3+0x4fc>
 400c38c:	1900022e 	bgeu	r3,r4,400c398 <__udivdi3+0x4fc>
 400c390:	a53fffc4 	addi	r20,r20,-1
 400c394:	1c07883a 	add	r3,r3,r16
 400c398:	d9400417 	ldw	r5,16(sp)
 400c39c:	e5b8983a 	sll	fp,fp,r22
 400c3a0:	1923c83a 	sub	r17,r3,r4
 400c3a4:	2804943a 	slli	r2,r5,16
 400c3a8:	a0a8b03a 	or	r20,r20,r2
 400c3ac:	dd000315 	stw	r20,12(sp)
 400c3b0:	003ee106 	br	400bf38 <__udivdi3+0x9c>
 400c3b4:	2004943a 	slli	r2,r4,16
 400c3b8:	e5c8983a 	sll	r4,fp,r23
 400c3bc:	48ffffcc 	andi	r3,r9,65535
 400c3c0:	10c5883a 	add	r2,r2,r3
 400c3c4:	20bfc22e 	bgeu	r4,r2,400c2d0 <__udivdi3+0x434>
 400c3c8:	40bfffc4 	addi	r2,r8,-1
 400c3cc:	0009883a 	mov	r4,zero
 400c3d0:	003f1306 	br	400c020 <__udivdi3+0x184>
 400c3d4:	01400204 	movi	r5,8
 400c3d8:	2805883a 	mov	r2,r5
 400c3dc:	003f0306 	br	400bfec <__udivdi3+0x150>
 400c3e0:	01400604 	movi	r5,24
 400c3e4:	2805883a 	mov	r2,r5
 400c3e8:	003f0006 	br	400bfec <__udivdi3+0x150>
 400c3ec:	01400204 	movi	r5,8
 400c3f0:	2805883a 	mov	r2,r5
 400c3f4:	003ec206 	br	400bf00 <__udivdi3+0x64>
 400c3f8:	01400604 	movi	r5,24
 400c3fc:	2805883a 	mov	r2,r5
 400c400:	003ebf06 	br	400bf00 <__udivdi3+0x64>
 400c404:	01400204 	movi	r5,8
 400c408:	2805883a 	mov	r2,r5
 400c40c:	003f1706 	br	400c06c <__udivdi3+0x1d0>
 400c410:	01400604 	movi	r5,24
 400c414:	2805883a 	mov	r2,r5
 400c418:	003f1406 	br	400c06c <__udivdi3+0x1d0>
 400c41c:	89ff962e 	bgeu	r17,r7,400c278 <__udivdi3+0x3dc>
 400c420:	8d63883a 	add	r17,r17,r21
 400c424:	843fffc4 	addi	r16,r16,-1
 400c428:	003f9306 	br	400c278 <__udivdi3+0x3dc>
 400c42c:	147f802e 	bgeu	r2,r17,400c230 <__udivdi3+0x394>
 400c430:	a53fffc4 	addi	r20,r20,-1
 400c434:	1545883a 	add	r2,r2,r21
 400c438:	003f7d06 	br	400c230 <__udivdi3+0x394>
 400c43c:	a53fffc4 	addi	r20,r20,-1
 400c440:	003ede06 	br	400bfbc <__udivdi3+0x120>
 400c444:	b5bfffc4 	addi	r22,r22,-1
 400c448:	1405883a 	add	r2,r2,r16
 400c44c:	003f2806 	br	400c0f0 <__udivdi3+0x254>
 400c450:	a53fffc4 	addi	r20,r20,-1
 400c454:	003f3706 	br	400c134 <__udivdi3+0x298>
 400c458:	147fbb2e 	bgeu	r2,r17,400c348 <__udivdi3+0x4ac>
 400c45c:	297fffc4 	addi	r5,r5,-1
 400c460:	1405883a 	add	r2,r2,r16
 400c464:	d9400415 	stw	r5,16(sp)
 400c468:	003fb706 	br	400c348 <__udivdi3+0x4ac>
 400c46c:	b5bfffc4 	addi	r22,r22,-1
 400c470:	1405883a 	add	r2,r2,r16
 400c474:	003ec006 	br	400bf78 <__udivdi3+0xdc>

0400c478 <__umoddi3>:
 400c478:	defff104 	addi	sp,sp,-60
 400c47c:	dd800b15 	stw	r22,44(sp)
 400c480:	dd000915 	stw	r20,36(sp)
 400c484:	dc000515 	stw	r16,20(sp)
 400c488:	dfc00e15 	stw	ra,56(sp)
 400c48c:	df000d15 	stw	fp,52(sp)
 400c490:	ddc00c15 	stw	r23,48(sp)
 400c494:	dd400a15 	stw	r21,40(sp)
 400c498:	dcc00815 	stw	r19,32(sp)
 400c49c:	dc800715 	stw	r18,28(sp)
 400c4a0:	dc400615 	stw	r17,24(sp)
 400c4a4:	3021883a 	mov	r16,r6
 400c4a8:	202d883a 	mov	r22,r4
 400c4ac:	2829883a 	mov	r20,r5
 400c4b0:	38002b1e 	bne	r7,zero,400c560 <__umoddi3+0xe8>
 400c4b4:	29805036 	bltu	r5,r6,400c5f8 <__umoddi3+0x180>
 400c4b8:	30008a26 	beq	r6,zero,400c6e4 <__umoddi3+0x26c>
 400c4bc:	00bfffd4 	movui	r2,65535
 400c4c0:	14008236 	bltu	r2,r16,400c6cc <__umoddi3+0x254>
 400c4c4:	00803fc4 	movi	r2,255
 400c4c8:	14013636 	bltu	r2,r16,400c9a4 <__umoddi3+0x52c>
 400c4cc:	000b883a 	mov	r5,zero
 400c4d0:	0005883a 	mov	r2,zero
 400c4d4:	8084d83a 	srl	r2,r16,r2
 400c4d8:	01010074 	movhi	r4,1025
 400c4dc:	21046a04 	addi	r4,r4,4520
 400c4e0:	01800804 	movi	r6,32
 400c4e4:	1105883a 	add	r2,r2,r4
 400c4e8:	10c00003 	ldbu	r3,0(r2)
 400c4ec:	28c7883a 	add	r3,r5,r3
 400c4f0:	30efc83a 	sub	r23,r6,r3
 400c4f4:	b800941e 	bne	r23,zero,400c748 <__umoddi3+0x2d0>
 400c4f8:	802ad43a 	srli	r21,r16,16
 400c4fc:	a423c83a 	sub	r17,r20,r16
 400c500:	0039883a 	mov	fp,zero
 400c504:	853fffcc 	andi	r20,r16,65535
 400c508:	8809883a 	mov	r4,r17
 400c50c:	a80b883a 	mov	r5,r21
 400c510:	400ce080 	call	400ce08 <__udivsi3>
 400c514:	8809883a 	mov	r4,r17
 400c518:	a80b883a 	mov	r5,r21
 400c51c:	a0a3383a 	mul	r17,r20,r2
 400c520:	400ce100 	call	400ce10 <__umodsi3>
 400c524:	1004943a 	slli	r2,r2,16
 400c528:	b006d43a 	srli	r3,r22,16
 400c52c:	10c4b03a 	or	r2,r2,r3
 400c530:	1440032e 	bgeu	r2,r17,400c540 <__umoddi3+0xc8>
 400c534:	1405883a 	add	r2,r2,r16
 400c538:	14000136 	bltu	r2,r16,400c540 <__umoddi3+0xc8>
 400c53c:	14413536 	bltu	r2,r17,400ca14 <__umoddi3+0x59c>
 400c540:	1463c83a 	sub	r17,r2,r17
 400c544:	8809883a 	mov	r4,r17
 400c548:	a80b883a 	mov	r5,r21
 400c54c:	400ce080 	call	400ce08 <__udivsi3>
 400c550:	8809883a 	mov	r4,r17
 400c554:	a0a3383a 	mul	r17,r20,r2
 400c558:	a80b883a 	mov	r5,r21
 400c55c:	00004d06 	br	400c694 <__umoddi3+0x21c>
 400c560:	380d883a 	mov	r6,r7
 400c564:	29c0102e 	bgeu	r5,r7,400c5a8 <__umoddi3+0x130>
 400c568:	2011883a 	mov	r8,r4
 400c56c:	2813883a 	mov	r9,r5
 400c570:	4005883a 	mov	r2,r8
 400c574:	4807883a 	mov	r3,r9
 400c578:	dfc00e17 	ldw	ra,56(sp)
 400c57c:	df000d17 	ldw	fp,52(sp)
 400c580:	ddc00c17 	ldw	r23,48(sp)
 400c584:	dd800b17 	ldw	r22,44(sp)
 400c588:	dd400a17 	ldw	r21,40(sp)
 400c58c:	dd000917 	ldw	r20,36(sp)
 400c590:	dcc00817 	ldw	r19,32(sp)
 400c594:	dc800717 	ldw	r18,28(sp)
 400c598:	dc400617 	ldw	r17,24(sp)
 400c59c:	dc000517 	ldw	r16,20(sp)
 400c5a0:	dec00f04 	addi	sp,sp,60
 400c5a4:	f800283a 	ret
 400c5a8:	00bfffd4 	movui	r2,65535
 400c5ac:	11c05a36 	bltu	r2,r7,400c718 <__umoddi3+0x2a0>
 400c5b0:	00803fc4 	movi	r2,255
 400c5b4:	11c0fe36 	bltu	r2,r7,400c9b0 <__umoddi3+0x538>
 400c5b8:	000b883a 	mov	r5,zero
 400c5bc:	0005883a 	mov	r2,zero
 400c5c0:	3084d83a 	srl	r2,r6,r2
 400c5c4:	01010074 	movhi	r4,1025
 400c5c8:	21046a04 	addi	r4,r4,4520
 400c5cc:	01c00804 	movi	r7,32
 400c5d0:	1105883a 	add	r2,r2,r4
 400c5d4:	10c00003 	ldbu	r3,0(r2)
 400c5d8:	28c7883a 	add	r3,r5,r3
 400c5dc:	38ebc83a 	sub	r21,r7,r3
 400c5e0:	a800851e 	bne	r21,zero,400c7f8 <__umoddi3+0x380>
 400c5e4:	35005236 	bltu	r6,r20,400c730 <__umoddi3+0x2b8>
 400c5e8:	b400512e 	bgeu	r22,r16,400c730 <__umoddi3+0x2b8>
 400c5ec:	b011883a 	mov	r8,r22
 400c5f0:	a013883a 	mov	r9,r20
 400c5f4:	003fde06 	br	400c570 <__umoddi3+0xf8>
 400c5f8:	00bfffd4 	movui	r2,65535
 400c5fc:	11804036 	bltu	r2,r6,400c700 <__umoddi3+0x288>
 400c600:	00803fc4 	movi	r2,255
 400c604:	1180ed36 	bltu	r2,r6,400c9bc <__umoddi3+0x544>
 400c608:	000b883a 	mov	r5,zero
 400c60c:	0005883a 	mov	r2,zero
 400c610:	8084d83a 	srl	r2,r16,r2
 400c614:	01010074 	movhi	r4,1025
 400c618:	21046a04 	addi	r4,r4,4520
 400c61c:	01800804 	movi	r6,32
 400c620:	1105883a 	add	r2,r2,r4
 400c624:	10c00003 	ldbu	r3,0(r2)
 400c628:	28c7883a 	add	r3,r5,r3
 400c62c:	30c7c83a 	sub	r3,r6,r3
 400c630:	1800bf1e 	bne	r3,zero,400c930 <__umoddi3+0x4b8>
 400c634:	0039883a 	mov	fp,zero
 400c638:	802ad43a 	srli	r21,r16,16
 400c63c:	a009883a 	mov	r4,r20
 400c640:	85ffffcc 	andi	r23,r16,65535
 400c644:	a80b883a 	mov	r5,r21
 400c648:	400ce080 	call	400ce08 <__udivsi3>
 400c64c:	a009883a 	mov	r4,r20
 400c650:	a80b883a 	mov	r5,r21
 400c654:	b8a3383a 	mul	r17,r23,r2
 400c658:	400ce100 	call	400ce10 <__umodsi3>
 400c65c:	1004943a 	slli	r2,r2,16
 400c660:	b006d43a 	srli	r3,r22,16
 400c664:	10c4b03a 	or	r2,r2,r3
 400c668:	1440032e 	bgeu	r2,r17,400c678 <__umoddi3+0x200>
 400c66c:	1405883a 	add	r2,r2,r16
 400c670:	14000136 	bltu	r2,r16,400c678 <__umoddi3+0x200>
 400c674:	1440e536 	bltu	r2,r17,400ca0c <__umoddi3+0x594>
 400c678:	1463c83a 	sub	r17,r2,r17
 400c67c:	8809883a 	mov	r4,r17
 400c680:	a80b883a 	mov	r5,r21
 400c684:	400ce080 	call	400ce08 <__udivsi3>
 400c688:	8809883a 	mov	r4,r17
 400c68c:	b8a3383a 	mul	r17,r23,r2
 400c690:	a80b883a 	mov	r5,r21
 400c694:	400ce100 	call	400ce10 <__umodsi3>
 400c698:	1004943a 	slli	r2,r2,16
 400c69c:	b0ffffcc 	andi	r3,r22,65535
 400c6a0:	10c4b03a 	or	r2,r2,r3
 400c6a4:	1440042e 	bgeu	r2,r17,400c6b8 <__umoddi3+0x240>
 400c6a8:	1405883a 	add	r2,r2,r16
 400c6ac:	14000236 	bltu	r2,r16,400c6b8 <__umoddi3+0x240>
 400c6b0:	1440012e 	bgeu	r2,r17,400c6b8 <__umoddi3+0x240>
 400c6b4:	1405883a 	add	r2,r2,r16
 400c6b8:	1445c83a 	sub	r2,r2,r17
 400c6bc:	1724d83a 	srl	r18,r2,fp
 400c6c0:	0013883a 	mov	r9,zero
 400c6c4:	9011883a 	mov	r8,r18
 400c6c8:	003fa906 	br	400c570 <__umoddi3+0xf8>
 400c6cc:	00804034 	movhi	r2,256
 400c6d0:	10bfffc4 	addi	r2,r2,-1
 400c6d4:	1400b036 	bltu	r2,r16,400c998 <__umoddi3+0x520>
 400c6d8:	01400404 	movi	r5,16
 400c6dc:	2805883a 	mov	r2,r5
 400c6e0:	003f7c06 	br	400c4d4 <__umoddi3+0x5c>
 400c6e4:	01000044 	movi	r4,1
 400c6e8:	000b883a 	mov	r5,zero
 400c6ec:	400ce080 	call	400ce08 <__udivsi3>
 400c6f0:	1021883a 	mov	r16,r2
 400c6f4:	00bfffd4 	movui	r2,65535
 400c6f8:	143ff436 	bltu	r2,r16,400c6cc <__umoddi3+0x254>
 400c6fc:	003f7106 	br	400c4c4 <__umoddi3+0x4c>
 400c700:	00804034 	movhi	r2,256
 400c704:	10bfffc4 	addi	r2,r2,-1
 400c708:	1180af36 	bltu	r2,r6,400c9c8 <__umoddi3+0x550>
 400c70c:	01400404 	movi	r5,16
 400c710:	2805883a 	mov	r2,r5
 400c714:	003fbe06 	br	400c610 <__umoddi3+0x198>
 400c718:	00804034 	movhi	r2,256
 400c71c:	10bfffc4 	addi	r2,r2,-1
 400c720:	11c0ac36 	bltu	r2,r7,400c9d4 <__umoddi3+0x55c>
 400c724:	01400404 	movi	r5,16
 400c728:	2805883a 	mov	r2,r5
 400c72c:	003fa406 	br	400c5c0 <__umoddi3+0x148>
 400c730:	b409c83a 	sub	r4,r22,r16
 400c734:	b105803a 	cmpltu	r2,r22,r4
 400c738:	a187c83a 	sub	r3,r20,r6
 400c73c:	18a9c83a 	sub	r20,r3,r2
 400c740:	202d883a 	mov	r22,r4
 400c744:	003fa906 	br	400c5ec <__umoddi3+0x174>
 400c748:	85e0983a 	sll	r16,r16,r23
 400c74c:	35c5c83a 	sub	r2,r6,r23
 400c750:	a0a2d83a 	srl	r17,r20,r2
 400c754:	802ad43a 	srli	r21,r16,16
 400c758:	b084d83a 	srl	r2,r22,r2
 400c75c:	a5c6983a 	sll	r3,r20,r23
 400c760:	8809883a 	mov	r4,r17
 400c764:	a80b883a 	mov	r5,r21
 400c768:	1886b03a 	or	r3,r3,r2
 400c76c:	d8c00115 	stw	r3,4(sp)
 400c770:	853fffcc 	andi	r20,r16,65535
 400c774:	400ce080 	call	400ce08 <__udivsi3>
 400c778:	8809883a 	mov	r4,r17
 400c77c:	a80b883a 	mov	r5,r21
 400c780:	a0a3383a 	mul	r17,r20,r2
 400c784:	400ce100 	call	400ce10 <__umodsi3>
 400c788:	d9000117 	ldw	r4,4(sp)
 400c78c:	1004943a 	slli	r2,r2,16
 400c790:	b839883a 	mov	fp,r23
 400c794:	2006d43a 	srli	r3,r4,16
 400c798:	10c4b03a 	or	r2,r2,r3
 400c79c:	1440022e 	bgeu	r2,r17,400c7a8 <__umoddi3+0x330>
 400c7a0:	1405883a 	add	r2,r2,r16
 400c7a4:	1400962e 	bgeu	r2,r16,400ca00 <__umoddi3+0x588>
 400c7a8:	1463c83a 	sub	r17,r2,r17
 400c7ac:	8809883a 	mov	r4,r17
 400c7b0:	a80b883a 	mov	r5,r21
 400c7b4:	400ce080 	call	400ce08 <__udivsi3>
 400c7b8:	8809883a 	mov	r4,r17
 400c7bc:	a80b883a 	mov	r5,r21
 400c7c0:	a0a3383a 	mul	r17,r20,r2
 400c7c4:	400ce100 	call	400ce10 <__umodsi3>
 400c7c8:	d9400117 	ldw	r5,4(sp)
 400c7cc:	1004943a 	slli	r2,r2,16
 400c7d0:	28ffffcc 	andi	r3,r5,65535
 400c7d4:	10c4b03a 	or	r2,r2,r3
 400c7d8:	1440042e 	bgeu	r2,r17,400c7ec <__umoddi3+0x374>
 400c7dc:	1405883a 	add	r2,r2,r16
 400c7e0:	14000236 	bltu	r2,r16,400c7ec <__umoddi3+0x374>
 400c7e4:	1440012e 	bgeu	r2,r17,400c7ec <__umoddi3+0x374>
 400c7e8:	1405883a 	add	r2,r2,r16
 400c7ec:	b5ec983a 	sll	r22,r22,r23
 400c7f0:	1463c83a 	sub	r17,r2,r17
 400c7f4:	003f4406 	br	400c508 <__umoddi3+0x90>
 400c7f8:	3d4fc83a 	sub	r7,r7,r21
 400c7fc:	3546983a 	sll	r3,r6,r21
 400c800:	81c4d83a 	srl	r2,r16,r7
 400c804:	a1e2d83a 	srl	r17,r20,r7
 400c808:	a54c983a 	sll	r6,r20,r21
 400c80c:	18aeb03a 	or	r23,r3,r2
 400c810:	b828d43a 	srli	r20,r23,16
 400c814:	b1c4d83a 	srl	r2,r22,r7
 400c818:	8809883a 	mov	r4,r17
 400c81c:	a00b883a 	mov	r5,r20
 400c820:	308cb03a 	or	r6,r6,r2
 400c824:	d9c00315 	stw	r7,12(sp)
 400c828:	d9800215 	stw	r6,8(sp)
 400c82c:	400ce080 	call	400ce08 <__udivsi3>
 400c830:	8809883a 	mov	r4,r17
 400c834:	a00b883a 	mov	r5,r20
 400c838:	1039883a 	mov	fp,r2
 400c83c:	400ce100 	call	400ce10 <__umodsi3>
 400c840:	b8ffffcc 	andi	r3,r23,65535
 400c844:	d8c00415 	stw	r3,16(sp)
 400c848:	d9000217 	ldw	r4,8(sp)
 400c84c:	d9400417 	ldw	r5,16(sp)
 400c850:	1004943a 	slli	r2,r2,16
 400c854:	2006d43a 	srli	r3,r4,16
 400c858:	8560983a 	sll	r16,r16,r21
 400c85c:	2f23383a 	mul	r17,r5,fp
 400c860:	10c4b03a 	or	r2,r2,r3
 400c864:	dc000015 	stw	r16,0(sp)
 400c868:	b56c983a 	sll	r22,r22,r21
 400c86c:	1440032e 	bgeu	r2,r17,400c87c <__umoddi3+0x404>
 400c870:	15c5883a 	add	r2,r2,r23
 400c874:	e73fffc4 	addi	fp,fp,-1
 400c878:	15c05d2e 	bgeu	r2,r23,400c9f0 <__umoddi3+0x578>
 400c87c:	1463c83a 	sub	r17,r2,r17
 400c880:	8809883a 	mov	r4,r17
 400c884:	a00b883a 	mov	r5,r20
 400c888:	400ce080 	call	400ce08 <__udivsi3>
 400c88c:	8809883a 	mov	r4,r17
 400c890:	a00b883a 	mov	r5,r20
 400c894:	1021883a 	mov	r16,r2
 400c898:	400ce100 	call	400ce10 <__umodsi3>
 400c89c:	d8c00417 	ldw	r3,16(sp)
 400c8a0:	d9000217 	ldw	r4,8(sp)
 400c8a4:	1004943a 	slli	r2,r2,16
 400c8a8:	1c23383a 	mul	r17,r3,r16
 400c8ac:	20ffffcc 	andi	r3,r4,65535
 400c8b0:	10ceb03a 	or	r7,r2,r3
 400c8b4:	3c40032e 	bgeu	r7,r17,400c8c4 <__umoddi3+0x44c>
 400c8b8:	3dcf883a 	add	r7,r7,r23
 400c8bc:	843fffc4 	addi	r16,r16,-1
 400c8c0:	3dc0472e 	bgeu	r7,r23,400c9e0 <__umoddi3+0x568>
 400c8c4:	e004943a 	slli	r2,fp,16
 400c8c8:	d9400017 	ldw	r5,0(sp)
 400c8cc:	3c4fc83a 	sub	r7,r7,r17
 400c8d0:	8084b03a 	or	r2,r16,r2
 400c8d4:	28ffffcc 	andi	r3,r5,65535
 400c8d8:	280cd43a 	srli	r6,r5,16
 400c8dc:	100ad43a 	srli	r5,r2,16
 400c8e0:	10bfffcc 	andi	r2,r2,65535
 400c8e4:	10d1383a 	mul	r8,r2,r3
 400c8e8:	28c7383a 	mul	r3,r5,r3
 400c8ec:	1185383a 	mul	r2,r2,r6
 400c8f0:	4008d43a 	srli	r4,r8,16
 400c8f4:	298b383a 	mul	r5,r5,r6
 400c8f8:	10c5883a 	add	r2,r2,r3
 400c8fc:	2089883a 	add	r4,r4,r2
 400c900:	20c0022e 	bgeu	r4,r3,400c90c <__umoddi3+0x494>
 400c904:	00800074 	movhi	r2,1
 400c908:	288b883a 	add	r5,r5,r2
 400c90c:	2004d43a 	srli	r2,r4,16
 400c910:	2008943a 	slli	r4,r4,16
 400c914:	40ffffcc 	andi	r3,r8,65535
 400c918:	288b883a 	add	r5,r5,r2
 400c91c:	20c9883a 	add	r4,r4,r3
 400c920:	39400b36 	bltu	r7,r5,400c950 <__umoddi3+0x4d8>
 400c924:	39403d26 	beq	r7,r5,400ca1c <__umoddi3+0x5a4>
 400c928:	394bc83a 	sub	r5,r7,r5
 400c92c:	00000f06 	br	400c96c <__umoddi3+0x4f4>
 400c930:	30c5c83a 	sub	r2,r6,r3
 400c934:	1839883a 	mov	fp,r3
 400c938:	b084d83a 	srl	r2,r22,r2
 400c93c:	a0c6983a 	sll	r3,r20,r3
 400c940:	8720983a 	sll	r16,r16,fp
 400c944:	b72c983a 	sll	r22,r22,fp
 400c948:	18a8b03a 	or	r20,r3,r2
 400c94c:	003f3a06 	br	400c638 <__umoddi3+0x1c0>
 400c950:	d8c00017 	ldw	r3,0(sp)
 400c954:	20c5c83a 	sub	r2,r4,r3
 400c958:	2089803a 	cmpltu	r4,r4,r2
 400c95c:	2dc7c83a 	sub	r3,r5,r23
 400c960:	1907c83a 	sub	r3,r3,r4
 400c964:	38cbc83a 	sub	r5,r7,r3
 400c968:	1009883a 	mov	r4,r2
 400c96c:	b105c83a 	sub	r2,r22,r4
 400c970:	b087803a 	cmpltu	r3,r22,r2
 400c974:	28c7c83a 	sub	r3,r5,r3
 400c978:	d9400317 	ldw	r5,12(sp)
 400c97c:	1544d83a 	srl	r2,r2,r21
 400c980:	1948983a 	sll	r4,r3,r5
 400c984:	1d46d83a 	srl	r3,r3,r21
 400c988:	20a4b03a 	or	r18,r4,r2
 400c98c:	9011883a 	mov	r8,r18
 400c990:	1813883a 	mov	r9,r3
 400c994:	003ef606 	br	400c570 <__umoddi3+0xf8>
 400c998:	01400604 	movi	r5,24
 400c99c:	2805883a 	mov	r2,r5
 400c9a0:	003ecc06 	br	400c4d4 <__umoddi3+0x5c>
 400c9a4:	01400204 	movi	r5,8
 400c9a8:	2805883a 	mov	r2,r5
 400c9ac:	003ec906 	br	400c4d4 <__umoddi3+0x5c>
 400c9b0:	01400204 	movi	r5,8
 400c9b4:	2805883a 	mov	r2,r5
 400c9b8:	003f0106 	br	400c5c0 <__umoddi3+0x148>
 400c9bc:	01400204 	movi	r5,8
 400c9c0:	2805883a 	mov	r2,r5
 400c9c4:	003f1206 	br	400c610 <__umoddi3+0x198>
 400c9c8:	01400604 	movi	r5,24
 400c9cc:	2805883a 	mov	r2,r5
 400c9d0:	003f0f06 	br	400c610 <__umoddi3+0x198>
 400c9d4:	01400604 	movi	r5,24
 400c9d8:	2805883a 	mov	r2,r5
 400c9dc:	003ef806 	br	400c5c0 <__umoddi3+0x148>
 400c9e0:	3c7fb82e 	bgeu	r7,r17,400c8c4 <__umoddi3+0x44c>
 400c9e4:	843fffc4 	addi	r16,r16,-1
 400c9e8:	3dcf883a 	add	r7,r7,r23
 400c9ec:	003fb506 	br	400c8c4 <__umoddi3+0x44c>
 400c9f0:	147fa22e 	bgeu	r2,r17,400c87c <__umoddi3+0x404>
 400c9f4:	e73fffc4 	addi	fp,fp,-1
 400c9f8:	15c5883a 	add	r2,r2,r23
 400c9fc:	003f9f06 	br	400c87c <__umoddi3+0x404>
 400ca00:	147f692e 	bgeu	r2,r17,400c7a8 <__umoddi3+0x330>
 400ca04:	1405883a 	add	r2,r2,r16
 400ca08:	003f6706 	br	400c7a8 <__umoddi3+0x330>
 400ca0c:	1405883a 	add	r2,r2,r16
 400ca10:	003f1906 	br	400c678 <__umoddi3+0x200>
 400ca14:	1405883a 	add	r2,r2,r16
 400ca18:	003ec906 	br	400c540 <__umoddi3+0xc8>
 400ca1c:	b13fcc36 	bltu	r22,r4,400c950 <__umoddi3+0x4d8>
 400ca20:	000b883a 	mov	r5,zero
 400ca24:	003fd106 	br	400c96c <__umoddi3+0x4f4>

0400ca28 <__gtdf2>:
 400ca28:	deffef04 	addi	sp,sp,-68
 400ca2c:	dc400f15 	stw	r17,60(sp)
 400ca30:	dc400404 	addi	r17,sp,16
 400ca34:	2005883a 	mov	r2,r4
 400ca38:	2807883a 	mov	r3,r5
 400ca3c:	dc000e15 	stw	r16,56(sp)
 400ca40:	d809883a 	mov	r4,sp
 400ca44:	880b883a 	mov	r5,r17
 400ca48:	dc000904 	addi	r16,sp,36
 400ca4c:	d8c00115 	stw	r3,4(sp)
 400ca50:	d8800015 	stw	r2,0(sp)
 400ca54:	d9800215 	stw	r6,8(sp)
 400ca58:	dfc01015 	stw	ra,64(sp)
 400ca5c:	d9c00315 	stw	r7,12(sp)
 400ca60:	4003fec0 	call	4003fec <__unpack_d>
 400ca64:	d9000204 	addi	r4,sp,8
 400ca68:	800b883a 	mov	r5,r16
 400ca6c:	4003fec0 	call	4003fec <__unpack_d>
 400ca70:	d8800417 	ldw	r2,16(sp)
 400ca74:	00c00044 	movi	r3,1
 400ca78:	01bfffc4 	movi	r6,-1
 400ca7c:	1880062e 	bgeu	r3,r2,400ca98 <__gtdf2+0x70>
 400ca80:	d8800917 	ldw	r2,36(sp)
 400ca84:	8809883a 	mov	r4,r17
 400ca88:	800b883a 	mov	r5,r16
 400ca8c:	1880022e 	bgeu	r3,r2,400ca98 <__gtdf2+0x70>
 400ca90:	40041240 	call	4004124 <__fpcmp_parts_d>
 400ca94:	100d883a 	mov	r6,r2
 400ca98:	3005883a 	mov	r2,r6
 400ca9c:	dfc01017 	ldw	ra,64(sp)
 400caa0:	dc400f17 	ldw	r17,60(sp)
 400caa4:	dc000e17 	ldw	r16,56(sp)
 400caa8:	dec01104 	addi	sp,sp,68
 400caac:	f800283a 	ret

0400cab0 <__ltdf2>:
 400cab0:	deffef04 	addi	sp,sp,-68
 400cab4:	dc400f15 	stw	r17,60(sp)
 400cab8:	dc400404 	addi	r17,sp,16
 400cabc:	2005883a 	mov	r2,r4
 400cac0:	2807883a 	mov	r3,r5
 400cac4:	dc000e15 	stw	r16,56(sp)
 400cac8:	d809883a 	mov	r4,sp
 400cacc:	880b883a 	mov	r5,r17
 400cad0:	dc000904 	addi	r16,sp,36
 400cad4:	d8c00115 	stw	r3,4(sp)
 400cad8:	d8800015 	stw	r2,0(sp)
 400cadc:	d9800215 	stw	r6,8(sp)
 400cae0:	dfc01015 	stw	ra,64(sp)
 400cae4:	d9c00315 	stw	r7,12(sp)
 400cae8:	4003fec0 	call	4003fec <__unpack_d>
 400caec:	d9000204 	addi	r4,sp,8
 400caf0:	800b883a 	mov	r5,r16
 400caf4:	4003fec0 	call	4003fec <__unpack_d>
 400caf8:	d8800417 	ldw	r2,16(sp)
 400cafc:	00c00044 	movi	r3,1
 400cb00:	180d883a 	mov	r6,r3
 400cb04:	1880062e 	bgeu	r3,r2,400cb20 <__ltdf2+0x70>
 400cb08:	d8800917 	ldw	r2,36(sp)
 400cb0c:	8809883a 	mov	r4,r17
 400cb10:	800b883a 	mov	r5,r16
 400cb14:	1880022e 	bgeu	r3,r2,400cb20 <__ltdf2+0x70>
 400cb18:	40041240 	call	4004124 <__fpcmp_parts_d>
 400cb1c:	100d883a 	mov	r6,r2
 400cb20:	3005883a 	mov	r2,r6
 400cb24:	dfc01017 	ldw	ra,64(sp)
 400cb28:	dc400f17 	ldw	r17,60(sp)
 400cb2c:	dc000e17 	ldw	r16,56(sp)
 400cb30:	dec01104 	addi	sp,sp,68
 400cb34:	f800283a 	ret

0400cb38 <__floatunsidf>:
 400cb38:	defff204 	addi	sp,sp,-56
 400cb3c:	dfc00d15 	stw	ra,52(sp)
 400cb40:	ddc00c15 	stw	r23,48(sp)
 400cb44:	dd800b15 	stw	r22,44(sp)
 400cb48:	dd400a15 	stw	r21,40(sp)
 400cb4c:	dd000915 	stw	r20,36(sp)
 400cb50:	dcc00815 	stw	r19,32(sp)
 400cb54:	dc800715 	stw	r18,28(sp)
 400cb58:	dc400615 	stw	r17,24(sp)
 400cb5c:	dc000515 	stw	r16,20(sp)
 400cb60:	d8000115 	stw	zero,4(sp)
 400cb64:	20000f1e 	bne	r4,zero,400cba4 <__floatunsidf+0x6c>
 400cb68:	00800084 	movi	r2,2
 400cb6c:	d8800015 	stw	r2,0(sp)
 400cb70:	d809883a 	mov	r4,sp
 400cb74:	4003cd80 	call	4003cd8 <__pack_d>
 400cb78:	dfc00d17 	ldw	ra,52(sp)
 400cb7c:	ddc00c17 	ldw	r23,48(sp)
 400cb80:	dd800b17 	ldw	r22,44(sp)
 400cb84:	dd400a17 	ldw	r21,40(sp)
 400cb88:	dd000917 	ldw	r20,36(sp)
 400cb8c:	dcc00817 	ldw	r19,32(sp)
 400cb90:	dc800717 	ldw	r18,28(sp)
 400cb94:	dc400617 	ldw	r17,24(sp)
 400cb98:	dc000517 	ldw	r16,20(sp)
 400cb9c:	dec00e04 	addi	sp,sp,56
 400cba0:	f800283a 	ret
 400cba4:	008000c4 	movi	r2,3
 400cba8:	00c00f04 	movi	r3,60
 400cbac:	002f883a 	mov	r23,zero
 400cbb0:	202d883a 	mov	r22,r4
 400cbb4:	d8800015 	stw	r2,0(sp)
 400cbb8:	d8c00215 	stw	r3,8(sp)
 400cbbc:	d9000315 	stw	r4,12(sp)
 400cbc0:	ddc00415 	stw	r23,16(sp)
 400cbc4:	4003c580 	call	4003c58 <__clzsi2>
 400cbc8:	12400744 	addi	r9,r2,29
 400cbcc:	48000b16 	blt	r9,zero,400cbfc <__floatunsidf+0xc4>
 400cbd0:	483fe726 	beq	r9,zero,400cb70 <__floatunsidf+0x38>
 400cbd4:	10bfff44 	addi	r2,r2,-3
 400cbd8:	10002e16 	blt	r2,zero,400cc94 <__floatunsidf+0x15c>
 400cbdc:	b0a2983a 	sll	r17,r22,r2
 400cbe0:	0021883a 	mov	r16,zero
 400cbe4:	d8800217 	ldw	r2,8(sp)
 400cbe8:	dc400415 	stw	r17,16(sp)
 400cbec:	dc000315 	stw	r16,12(sp)
 400cbf0:	1245c83a 	sub	r2,r2,r9
 400cbf4:	d8800215 	stw	r2,8(sp)
 400cbf8:	003fdd06 	br	400cb70 <__floatunsidf+0x38>
 400cbfc:	0255c83a 	sub	r10,zero,r9
 400cc00:	51bff804 	addi	r6,r10,-32
 400cc04:	30001b16 	blt	r6,zero,400cc74 <__floatunsidf+0x13c>
 400cc08:	b9a8d83a 	srl	r20,r23,r6
 400cc0c:	002b883a 	mov	r21,zero
 400cc10:	000f883a 	mov	r7,zero
 400cc14:	01000044 	movi	r4,1
 400cc18:	0011883a 	mov	r8,zero
 400cc1c:	30002516 	blt	r6,zero,400ccb4 <__floatunsidf+0x17c>
 400cc20:	21a6983a 	sll	r19,r4,r6
 400cc24:	0025883a 	mov	r18,zero
 400cc28:	00bfffc4 	movi	r2,-1
 400cc2c:	9089883a 	add	r4,r18,r2
 400cc30:	988b883a 	add	r5,r19,r2
 400cc34:	248d803a 	cmpltu	r6,r4,r18
 400cc38:	314b883a 	add	r5,r6,r5
 400cc3c:	b104703a 	and	r2,r22,r4
 400cc40:	b946703a 	and	r3,r23,r5
 400cc44:	10c4b03a 	or	r2,r2,r3
 400cc48:	10000226 	beq	r2,zero,400cc54 <__floatunsidf+0x11c>
 400cc4c:	01c00044 	movi	r7,1
 400cc50:	0011883a 	mov	r8,zero
 400cc54:	d9000217 	ldw	r4,8(sp)
 400cc58:	a1c4b03a 	or	r2,r20,r7
 400cc5c:	aa06b03a 	or	r3,r21,r8
 400cc60:	2249c83a 	sub	r4,r4,r9
 400cc64:	d8c00415 	stw	r3,16(sp)
 400cc68:	d9000215 	stw	r4,8(sp)
 400cc6c:	d8800315 	stw	r2,12(sp)
 400cc70:	003fbf06 	br	400cb70 <__floatunsidf+0x38>
 400cc74:	bdc7883a 	add	r3,r23,r23
 400cc78:	008007c4 	movi	r2,31
 400cc7c:	1285c83a 	sub	r2,r2,r10
 400cc80:	1886983a 	sll	r3,r3,r2
 400cc84:	b2a8d83a 	srl	r20,r22,r10
 400cc88:	baaad83a 	srl	r21,r23,r10
 400cc8c:	1d28b03a 	or	r20,r3,r20
 400cc90:	003fdf06 	br	400cc10 <__floatunsidf+0xd8>
 400cc94:	b006d07a 	srli	r3,r22,1
 400cc98:	008007c4 	movi	r2,31
 400cc9c:	1245c83a 	sub	r2,r2,r9
 400cca0:	1886d83a 	srl	r3,r3,r2
 400cca4:	ba62983a 	sll	r17,r23,r9
 400cca8:	b260983a 	sll	r16,r22,r9
 400ccac:	1c62b03a 	or	r17,r3,r17
 400ccb0:	003fcc06 	br	400cbe4 <__floatunsidf+0xac>
 400ccb4:	2006d07a 	srli	r3,r4,1
 400ccb8:	008007c4 	movi	r2,31
 400ccbc:	1285c83a 	sub	r2,r2,r10
 400ccc0:	18a6d83a 	srl	r19,r3,r2
 400ccc4:	22a4983a 	sll	r18,r4,r10
 400ccc8:	003fd706 	br	400cc28 <__floatunsidf+0xf0>

0400cccc <udivmodsi4>:
 400cccc:	29001b2e 	bgeu	r5,r4,400cd3c <udivmodsi4+0x70>
 400ccd0:	28001a16 	blt	r5,zero,400cd3c <udivmodsi4+0x70>
 400ccd4:	00800044 	movi	r2,1
 400ccd8:	0007883a 	mov	r3,zero
 400ccdc:	01c007c4 	movi	r7,31
 400cce0:	00000306 	br	400ccf0 <udivmodsi4+0x24>
 400cce4:	19c01326 	beq	r3,r7,400cd34 <udivmodsi4+0x68>
 400cce8:	18c00044 	addi	r3,r3,1
 400ccec:	28000416 	blt	r5,zero,400cd00 <udivmodsi4+0x34>
 400ccf0:	294b883a 	add	r5,r5,r5
 400ccf4:	1085883a 	add	r2,r2,r2
 400ccf8:	293ffa36 	bltu	r5,r4,400cce4 <udivmodsi4+0x18>
 400ccfc:	10000d26 	beq	r2,zero,400cd34 <udivmodsi4+0x68>
 400cd00:	0007883a 	mov	r3,zero
 400cd04:	21400236 	bltu	r4,r5,400cd10 <udivmodsi4+0x44>
 400cd08:	2149c83a 	sub	r4,r4,r5
 400cd0c:	1886b03a 	or	r3,r3,r2
 400cd10:	1004d07a 	srli	r2,r2,1
 400cd14:	280ad07a 	srli	r5,r5,1
 400cd18:	103ffa1e 	bne	r2,zero,400cd04 <udivmodsi4+0x38>
 400cd1c:	30000226 	beq	r6,zero,400cd28 <udivmodsi4+0x5c>
 400cd20:	2005883a 	mov	r2,r4
 400cd24:	f800283a 	ret
 400cd28:	1809883a 	mov	r4,r3
 400cd2c:	2005883a 	mov	r2,r4
 400cd30:	f800283a 	ret
 400cd34:	0007883a 	mov	r3,zero
 400cd38:	003ff806 	br	400cd1c <udivmodsi4+0x50>
 400cd3c:	00800044 	movi	r2,1
 400cd40:	0007883a 	mov	r3,zero
 400cd44:	003fef06 	br	400cd04 <udivmodsi4+0x38>

0400cd48 <__divsi3>:
 400cd48:	defffe04 	addi	sp,sp,-8
 400cd4c:	dc000015 	stw	r16,0(sp)
 400cd50:	dfc00115 	stw	ra,4(sp)
 400cd54:	0021883a 	mov	r16,zero
 400cd58:	20000c16 	blt	r4,zero,400cd8c <__divsi3+0x44>
 400cd5c:	000d883a 	mov	r6,zero
 400cd60:	28000e16 	blt	r5,zero,400cd9c <__divsi3+0x54>
 400cd64:	400cccc0 	call	400cccc <udivmodsi4>
 400cd68:	1007883a 	mov	r3,r2
 400cd6c:	8005003a 	cmpeq	r2,r16,zero
 400cd70:	1000011e 	bne	r2,zero,400cd78 <__divsi3+0x30>
 400cd74:	00c7c83a 	sub	r3,zero,r3
 400cd78:	1805883a 	mov	r2,r3
 400cd7c:	dfc00117 	ldw	ra,4(sp)
 400cd80:	dc000017 	ldw	r16,0(sp)
 400cd84:	dec00204 	addi	sp,sp,8
 400cd88:	f800283a 	ret
 400cd8c:	0109c83a 	sub	r4,zero,r4
 400cd90:	04000044 	movi	r16,1
 400cd94:	000d883a 	mov	r6,zero
 400cd98:	283ff20e 	bge	r5,zero,400cd64 <__divsi3+0x1c>
 400cd9c:	014bc83a 	sub	r5,zero,r5
 400cda0:	8021003a 	cmpeq	r16,r16,zero
 400cda4:	003fef06 	br	400cd64 <__divsi3+0x1c>

0400cda8 <__modsi3>:
 400cda8:	deffff04 	addi	sp,sp,-4
 400cdac:	dfc00015 	stw	ra,0(sp)
 400cdb0:	01800044 	movi	r6,1
 400cdb4:	2807883a 	mov	r3,r5
 400cdb8:	20000416 	blt	r4,zero,400cdcc <__modsi3+0x24>
 400cdbc:	28000c16 	blt	r5,zero,400cdf0 <__modsi3+0x48>
 400cdc0:	dfc00017 	ldw	ra,0(sp)
 400cdc4:	dec00104 	addi	sp,sp,4
 400cdc8:	400cccc1 	jmpi	400cccc <udivmodsi4>
 400cdcc:	0109c83a 	sub	r4,zero,r4
 400cdd0:	28000b16 	blt	r5,zero,400ce00 <__modsi3+0x58>
 400cdd4:	180b883a 	mov	r5,r3
 400cdd8:	01800044 	movi	r6,1
 400cddc:	400cccc0 	call	400cccc <udivmodsi4>
 400cde0:	0085c83a 	sub	r2,zero,r2
 400cde4:	dfc00017 	ldw	ra,0(sp)
 400cde8:	dec00104 	addi	sp,sp,4
 400cdec:	f800283a 	ret
 400cdf0:	014bc83a 	sub	r5,zero,r5
 400cdf4:	dfc00017 	ldw	ra,0(sp)
 400cdf8:	dec00104 	addi	sp,sp,4
 400cdfc:	400cccc1 	jmpi	400cccc <udivmodsi4>
 400ce00:	0147c83a 	sub	r3,zero,r5
 400ce04:	003ff306 	br	400cdd4 <__modsi3+0x2c>

0400ce08 <__udivsi3>:
 400ce08:	000d883a 	mov	r6,zero
 400ce0c:	400cccc1 	jmpi	400cccc <udivmodsi4>

0400ce10 <__umodsi3>:
 400ce10:	01800044 	movi	r6,1
 400ce14:	400cccc1 	jmpi	400cccc <udivmodsi4>

0400ce18 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400ce18:	defff804 	addi	sp,sp,-32
 400ce1c:	dfc00715 	stw	ra,28(sp)
 400ce20:	df000615 	stw	fp,24(sp)
 400ce24:	df000604 	addi	fp,sp,24
 400ce28:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400ce2c:	e0bffc17 	ldw	r2,-16(fp)
 400ce30:	1004803a 	cmplt	r2,r2,zero
 400ce34:	1000081e 	bne	r2,zero,400ce58 <close+0x40>
 400ce38:	e0bffc17 	ldw	r2,-16(fp)
 400ce3c:	10800324 	muli	r2,r2,12
 400ce40:	1007883a 	mov	r3,r2
 400ce44:	00810074 	movhi	r2,1025
 400ce48:	10874904 	addi	r2,r2,7460
 400ce4c:	1887883a 	add	r3,r3,r2
 400ce50:	e0ffff15 	stw	r3,-4(fp)
 400ce54:	00000106 	br	400ce5c <close+0x44>
 400ce58:	e03fff15 	stw	zero,-4(fp)
 400ce5c:	e0bfff17 	ldw	r2,-4(fp)
 400ce60:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 400ce64:	e0bffb17 	ldw	r2,-20(fp)
 400ce68:	1005003a 	cmpeq	r2,r2,zero
 400ce6c:	10001d1e 	bne	r2,zero,400cee4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400ce70:	e0bffb17 	ldw	r2,-20(fp)
 400ce74:	10800017 	ldw	r2,0(r2)
 400ce78:	10800417 	ldw	r2,16(r2)
 400ce7c:	1005003a 	cmpeq	r2,r2,zero
 400ce80:	1000071e 	bne	r2,zero,400cea0 <close+0x88>
 400ce84:	e0bffb17 	ldw	r2,-20(fp)
 400ce88:	10800017 	ldw	r2,0(r2)
 400ce8c:	10800417 	ldw	r2,16(r2)
 400ce90:	e13ffb17 	ldw	r4,-20(fp)
 400ce94:	103ee83a 	callr	r2
 400ce98:	e0bffe15 	stw	r2,-8(fp)
 400ce9c:	00000106 	br	400cea4 <close+0x8c>
 400cea0:	e03ffe15 	stw	zero,-8(fp)
 400cea4:	e0bffe17 	ldw	r2,-8(fp)
 400cea8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400ceac:	e13ffc17 	ldw	r4,-16(fp)
 400ceb0:	400d8340 	call	400d834 <alt_release_fd>
    if (rval < 0)
 400ceb4:	e0bffa17 	ldw	r2,-24(fp)
 400ceb8:	1004403a 	cmpge	r2,r2,zero
 400cebc:	1000071e 	bne	r2,zero,400cedc <close+0xc4>
    {
      ALT_ERRNO = -rval;
 400cec0:	400cf140 	call	400cf14 <alt_get_errno>
 400cec4:	e0fffa17 	ldw	r3,-24(fp)
 400cec8:	00c7c83a 	sub	r3,zero,r3
 400cecc:	10c00015 	stw	r3,0(r2)
      return -1;
 400ced0:	00bfffc4 	movi	r2,-1
 400ced4:	e0bffd15 	stw	r2,-12(fp)
 400ced8:	00000806 	br	400cefc <close+0xe4>
    }
    return 0;
 400cedc:	e03ffd15 	stw	zero,-12(fp)
 400cee0:	00000606 	br	400cefc <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400cee4:	400cf140 	call	400cf14 <alt_get_errno>
 400cee8:	1007883a 	mov	r3,r2
 400ceec:	00801444 	movi	r2,81
 400cef0:	18800015 	stw	r2,0(r3)
    return -1;
 400cef4:	00bfffc4 	movi	r2,-1
 400cef8:	e0bffd15 	stw	r2,-12(fp)
 400cefc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 400cf00:	e037883a 	mov	sp,fp
 400cf04:	dfc00117 	ldw	ra,4(sp)
 400cf08:	df000017 	ldw	fp,0(sp)
 400cf0c:	dec00204 	addi	sp,sp,8
 400cf10:	f800283a 	ret

0400cf14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400cf14:	defffd04 	addi	sp,sp,-12
 400cf18:	dfc00215 	stw	ra,8(sp)
 400cf1c:	df000115 	stw	fp,4(sp)
 400cf20:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400cf24:	00810074 	movhi	r2,1025
 400cf28:	108bfe04 	addi	r2,r2,12280
 400cf2c:	10800017 	ldw	r2,0(r2)
 400cf30:	1005003a 	cmpeq	r2,r2,zero
 400cf34:	1000061e 	bne	r2,zero,400cf50 <alt_get_errno+0x3c>
 400cf38:	00810074 	movhi	r2,1025
 400cf3c:	108bfe04 	addi	r2,r2,12280
 400cf40:	10800017 	ldw	r2,0(r2)
 400cf44:	103ee83a 	callr	r2
 400cf48:	e0bfff15 	stw	r2,-4(fp)
 400cf4c:	00000306 	br	400cf5c <alt_get_errno+0x48>
 400cf50:	00810074 	movhi	r2,1025
 400cf54:	108c0804 	addi	r2,r2,12320
 400cf58:	e0bfff15 	stw	r2,-4(fp)
 400cf5c:	e0bfff17 	ldw	r2,-4(fp)
}
 400cf60:	e037883a 	mov	sp,fp
 400cf64:	dfc00117 	ldw	ra,4(sp)
 400cf68:	df000017 	ldw	fp,0(sp)
 400cf6c:	dec00204 	addi	sp,sp,8
 400cf70:	f800283a 	ret

0400cf74 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400cf74:	defffc04 	addi	sp,sp,-16
 400cf78:	df000315 	stw	fp,12(sp)
 400cf7c:	df000304 	addi	fp,sp,12
 400cf80:	e13ffd15 	stw	r4,-12(fp)
 400cf84:	e17ffe15 	stw	r5,-8(fp)
 400cf88:	e1bfff15 	stw	r6,-4(fp)
  return len;
 400cf8c:	e0bfff17 	ldw	r2,-4(fp)
}
 400cf90:	e037883a 	mov	sp,fp
 400cf94:	df000017 	ldw	fp,0(sp)
 400cf98:	dec00104 	addi	sp,sp,4
 400cf9c:	f800283a 	ret

0400cfa0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400cfa0:	defff904 	addi	sp,sp,-28
 400cfa4:	dfc00615 	stw	ra,24(sp)
 400cfa8:	df000515 	stw	fp,20(sp)
 400cfac:	df000504 	addi	fp,sp,20
 400cfb0:	e13ffc15 	stw	r4,-16(fp)
 400cfb4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400cfb8:	e0bffc17 	ldw	r2,-16(fp)
 400cfbc:	1004803a 	cmplt	r2,r2,zero
 400cfc0:	1000081e 	bne	r2,zero,400cfe4 <fstat+0x44>
 400cfc4:	e0bffc17 	ldw	r2,-16(fp)
 400cfc8:	10800324 	muli	r2,r2,12
 400cfcc:	1007883a 	mov	r3,r2
 400cfd0:	00810074 	movhi	r2,1025
 400cfd4:	10874904 	addi	r2,r2,7460
 400cfd8:	1887883a 	add	r3,r3,r2
 400cfdc:	e0ffff15 	stw	r3,-4(fp)
 400cfe0:	00000106 	br	400cfe8 <fstat+0x48>
 400cfe4:	e03fff15 	stw	zero,-4(fp)
 400cfe8:	e0bfff17 	ldw	r2,-4(fp)
 400cfec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400cff0:	e0bffb17 	ldw	r2,-20(fp)
 400cff4:	1005003a 	cmpeq	r2,r2,zero
 400cff8:	1000121e 	bne	r2,zero,400d044 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400cffc:	e0bffb17 	ldw	r2,-20(fp)
 400d000:	10800017 	ldw	r2,0(r2)
 400d004:	10800817 	ldw	r2,32(r2)
 400d008:	1005003a 	cmpeq	r2,r2,zero
 400d00c:	1000081e 	bne	r2,zero,400d030 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 400d010:	e0bffb17 	ldw	r2,-20(fp)
 400d014:	10800017 	ldw	r2,0(r2)
 400d018:	10800817 	ldw	r2,32(r2)
 400d01c:	e13ffb17 	ldw	r4,-20(fp)
 400d020:	e17ffd17 	ldw	r5,-12(fp)
 400d024:	103ee83a 	callr	r2
 400d028:	e0bffe15 	stw	r2,-8(fp)
 400d02c:	00000b06 	br	400d05c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400d030:	e0fffd17 	ldw	r3,-12(fp)
 400d034:	00880004 	movi	r2,8192
 400d038:	18800115 	stw	r2,4(r3)
      return 0;
 400d03c:	e03ffe15 	stw	zero,-8(fp)
 400d040:	00000606 	br	400d05c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400d044:	400d0740 	call	400d074 <alt_get_errno>
 400d048:	1007883a 	mov	r3,r2
 400d04c:	00801444 	movi	r2,81
 400d050:	18800015 	stw	r2,0(r3)
    return -1;
 400d054:	00bfffc4 	movi	r2,-1
 400d058:	e0bffe15 	stw	r2,-8(fp)
 400d05c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 400d060:	e037883a 	mov	sp,fp
 400d064:	dfc00117 	ldw	ra,4(sp)
 400d068:	df000017 	ldw	fp,0(sp)
 400d06c:	dec00204 	addi	sp,sp,8
 400d070:	f800283a 	ret

0400d074 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d074:	defffd04 	addi	sp,sp,-12
 400d078:	dfc00215 	stw	ra,8(sp)
 400d07c:	df000115 	stw	fp,4(sp)
 400d080:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400d084:	00810074 	movhi	r2,1025
 400d088:	108bfe04 	addi	r2,r2,12280
 400d08c:	10800017 	ldw	r2,0(r2)
 400d090:	1005003a 	cmpeq	r2,r2,zero
 400d094:	1000061e 	bne	r2,zero,400d0b0 <alt_get_errno+0x3c>
 400d098:	00810074 	movhi	r2,1025
 400d09c:	108bfe04 	addi	r2,r2,12280
 400d0a0:	10800017 	ldw	r2,0(r2)
 400d0a4:	103ee83a 	callr	r2
 400d0a8:	e0bfff15 	stw	r2,-4(fp)
 400d0ac:	00000306 	br	400d0bc <alt_get_errno+0x48>
 400d0b0:	00810074 	movhi	r2,1025
 400d0b4:	108c0804 	addi	r2,r2,12320
 400d0b8:	e0bfff15 	stw	r2,-4(fp)
 400d0bc:	e0bfff17 	ldw	r2,-4(fp)
}
 400d0c0:	e037883a 	mov	sp,fp
 400d0c4:	dfc00117 	ldw	ra,4(sp)
 400d0c8:	df000017 	ldw	fp,0(sp)
 400d0cc:	dec00204 	addi	sp,sp,8
 400d0d0:	f800283a 	ret

0400d0d4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400d0d4:	deffeb04 	addi	sp,sp,-84
 400d0d8:	dfc01415 	stw	ra,80(sp)
 400d0dc:	df001315 	stw	fp,76(sp)
 400d0e0:	df001304 	addi	fp,sp,76
 400d0e4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d0e8:	e0bffd17 	ldw	r2,-12(fp)
 400d0ec:	1004803a 	cmplt	r2,r2,zero
 400d0f0:	1000081e 	bne	r2,zero,400d114 <isatty+0x40>
 400d0f4:	e0bffd17 	ldw	r2,-12(fp)
 400d0f8:	10800324 	muli	r2,r2,12
 400d0fc:	1007883a 	mov	r3,r2
 400d100:	00810074 	movhi	r2,1025
 400d104:	10874904 	addi	r2,r2,7460
 400d108:	1887883a 	add	r3,r3,r2
 400d10c:	e0ffff15 	stw	r3,-4(fp)
 400d110:	00000106 	br	400d118 <isatty+0x44>
 400d114:	e03fff15 	stw	zero,-4(fp)
 400d118:	e0bfff17 	ldw	r2,-4(fp)
 400d11c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 400d120:	e0bfed17 	ldw	r2,-76(fp)
 400d124:	1005003a 	cmpeq	r2,r2,zero
 400d128:	10000f1e 	bne	r2,zero,400d168 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400d12c:	e0bfed17 	ldw	r2,-76(fp)
 400d130:	10800017 	ldw	r2,0(r2)
 400d134:	10800817 	ldw	r2,32(r2)
 400d138:	1004c03a 	cmpne	r2,r2,zero
 400d13c:	1000031e 	bne	r2,zero,400d14c <isatty+0x78>
    {
      return 1;
 400d140:	00800044 	movi	r2,1
 400d144:	e0bffe15 	stw	r2,-8(fp)
 400d148:	00000c06 	br	400d17c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400d14c:	e17fee04 	addi	r5,fp,-72
 400d150:	e13ffd17 	ldw	r4,-12(fp)
 400d154:	400cfa00 	call	400cfa0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400d158:	e0bfef17 	ldw	r2,-68(fp)
 400d15c:	10880020 	cmpeqi	r2,r2,8192
 400d160:	e0bffe15 	stw	r2,-8(fp)
 400d164:	00000506 	br	400d17c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400d168:	400d1940 	call	400d194 <alt_get_errno>
 400d16c:	1007883a 	mov	r3,r2
 400d170:	00801444 	movi	r2,81
 400d174:	18800015 	stw	r2,0(r3)
    return 0;
 400d178:	e03ffe15 	stw	zero,-8(fp)
 400d17c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 400d180:	e037883a 	mov	sp,fp
 400d184:	dfc00117 	ldw	ra,4(sp)
 400d188:	df000017 	ldw	fp,0(sp)
 400d18c:	dec00204 	addi	sp,sp,8
 400d190:	f800283a 	ret

0400d194 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d194:	defffd04 	addi	sp,sp,-12
 400d198:	dfc00215 	stw	ra,8(sp)
 400d19c:	df000115 	stw	fp,4(sp)
 400d1a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400d1a4:	00810074 	movhi	r2,1025
 400d1a8:	108bfe04 	addi	r2,r2,12280
 400d1ac:	10800017 	ldw	r2,0(r2)
 400d1b0:	1005003a 	cmpeq	r2,r2,zero
 400d1b4:	1000061e 	bne	r2,zero,400d1d0 <alt_get_errno+0x3c>
 400d1b8:	00810074 	movhi	r2,1025
 400d1bc:	108bfe04 	addi	r2,r2,12280
 400d1c0:	10800017 	ldw	r2,0(r2)
 400d1c4:	103ee83a 	callr	r2
 400d1c8:	e0bfff15 	stw	r2,-4(fp)
 400d1cc:	00000306 	br	400d1dc <alt_get_errno+0x48>
 400d1d0:	00810074 	movhi	r2,1025
 400d1d4:	108c0804 	addi	r2,r2,12320
 400d1d8:	e0bfff15 	stw	r2,-4(fp)
 400d1dc:	e0bfff17 	ldw	r2,-4(fp)
}
 400d1e0:	e037883a 	mov	sp,fp
 400d1e4:	dfc00117 	ldw	ra,4(sp)
 400d1e8:	df000017 	ldw	fp,0(sp)
 400d1ec:	dec00204 	addi	sp,sp,8
 400d1f0:	f800283a 	ret

0400d1f4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400d1f4:	defff804 	addi	sp,sp,-32
 400d1f8:	dfc00715 	stw	ra,28(sp)
 400d1fc:	df000615 	stw	fp,24(sp)
 400d200:	df000604 	addi	fp,sp,24
 400d204:	e13ffc15 	stw	r4,-16(fp)
 400d208:	e17ffd15 	stw	r5,-12(fp)
 400d20c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400d210:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d214:	e0bffc17 	ldw	r2,-16(fp)
 400d218:	1004803a 	cmplt	r2,r2,zero
 400d21c:	1000081e 	bne	r2,zero,400d240 <lseek+0x4c>
 400d220:	e0bffc17 	ldw	r2,-16(fp)
 400d224:	10800324 	muli	r2,r2,12
 400d228:	1007883a 	mov	r3,r2
 400d22c:	00810074 	movhi	r2,1025
 400d230:	10874904 	addi	r2,r2,7460
 400d234:	1887883a 	add	r3,r3,r2
 400d238:	e0ffff15 	stw	r3,-4(fp)
 400d23c:	00000106 	br	400d244 <lseek+0x50>
 400d240:	e03fff15 	stw	zero,-4(fp)
 400d244:	e0bfff17 	ldw	r2,-4(fp)
 400d248:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 400d24c:	e0bffb17 	ldw	r2,-20(fp)
 400d250:	1005003a 	cmpeq	r2,r2,zero
 400d254:	1000111e 	bne	r2,zero,400d29c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400d258:	e0bffb17 	ldw	r2,-20(fp)
 400d25c:	10800017 	ldw	r2,0(r2)
 400d260:	10800717 	ldw	r2,28(r2)
 400d264:	1005003a 	cmpeq	r2,r2,zero
 400d268:	1000091e 	bne	r2,zero,400d290 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400d26c:	e0bffb17 	ldw	r2,-20(fp)
 400d270:	10800017 	ldw	r2,0(r2)
 400d274:	10800717 	ldw	r2,28(r2)
 400d278:	e13ffb17 	ldw	r4,-20(fp)
 400d27c:	e17ffd17 	ldw	r5,-12(fp)
 400d280:	e1bffe17 	ldw	r6,-8(fp)
 400d284:	103ee83a 	callr	r2
 400d288:	e0bffa15 	stw	r2,-24(fp)
 400d28c:	00000506 	br	400d2a4 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400d290:	00bfde84 	movi	r2,-134
 400d294:	e0bffa15 	stw	r2,-24(fp)
 400d298:	00000206 	br	400d2a4 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 400d29c:	00bfebc4 	movi	r2,-81
 400d2a0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 400d2a4:	e0bffa17 	ldw	r2,-24(fp)
 400d2a8:	1004403a 	cmpge	r2,r2,zero
 400d2ac:	1000071e 	bne	r2,zero,400d2cc <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 400d2b0:	400d2e40 	call	400d2e4 <alt_get_errno>
 400d2b4:	1007883a 	mov	r3,r2
 400d2b8:	e0bffa17 	ldw	r2,-24(fp)
 400d2bc:	0085c83a 	sub	r2,zero,r2
 400d2c0:	18800015 	stw	r2,0(r3)
    rc = -1;
 400d2c4:	00bfffc4 	movi	r2,-1
 400d2c8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 400d2cc:	e0bffa17 	ldw	r2,-24(fp)
}
 400d2d0:	e037883a 	mov	sp,fp
 400d2d4:	dfc00117 	ldw	ra,4(sp)
 400d2d8:	df000017 	ldw	fp,0(sp)
 400d2dc:	dec00204 	addi	sp,sp,8
 400d2e0:	f800283a 	ret

0400d2e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d2e4:	defffd04 	addi	sp,sp,-12
 400d2e8:	dfc00215 	stw	ra,8(sp)
 400d2ec:	df000115 	stw	fp,4(sp)
 400d2f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400d2f4:	00810074 	movhi	r2,1025
 400d2f8:	108bfe04 	addi	r2,r2,12280
 400d2fc:	10800017 	ldw	r2,0(r2)
 400d300:	1005003a 	cmpeq	r2,r2,zero
 400d304:	1000061e 	bne	r2,zero,400d320 <alt_get_errno+0x3c>
 400d308:	00810074 	movhi	r2,1025
 400d30c:	108bfe04 	addi	r2,r2,12280
 400d310:	10800017 	ldw	r2,0(r2)
 400d314:	103ee83a 	callr	r2
 400d318:	e0bfff15 	stw	r2,-4(fp)
 400d31c:	00000306 	br	400d32c <alt_get_errno+0x48>
 400d320:	00810074 	movhi	r2,1025
 400d324:	108c0804 	addi	r2,r2,12320
 400d328:	e0bfff15 	stw	r2,-4(fp)
 400d32c:	e0bfff17 	ldw	r2,-4(fp)
}
 400d330:	e037883a 	mov	sp,fp
 400d334:	dfc00117 	ldw	ra,4(sp)
 400d338:	df000017 	ldw	fp,0(sp)
 400d33c:	dec00204 	addi	sp,sp,8
 400d340:	f800283a 	ret

0400d344 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400d344:	defffd04 	addi	sp,sp,-12
 400d348:	dfc00215 	stw	ra,8(sp)
 400d34c:	df000115 	stw	fp,4(sp)
 400d350:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400d354:	0009883a 	mov	r4,zero
 400d358:	400db000 	call	400db00 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400d35c:	400db340 	call	400db34 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400d360:	01010074 	movhi	r4,1025
 400d364:	21052c04 	addi	r4,r4,5296
 400d368:	01410074 	movhi	r5,1025
 400d36c:	29452c04 	addi	r5,r5,5296
 400d370:	01810074 	movhi	r6,1025
 400d374:	31852c04 	addi	r6,r6,5296
 400d378:	40104a00 	call	40104a0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400d37c:	400fd0c0 	call	400fd0c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400d380:	01010074 	movhi	r4,1025
 400d384:	213f5c04 	addi	r4,r4,-656
 400d388:	40106dc0 	call	40106dc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400d38c:	d1201c17 	ldw	r4,-32656(gp)
 400d390:	d1601d17 	ldw	r5,-32652(gp)
 400d394:	d1a01e17 	ldw	r6,-32648(gp)
 400d398:	40017c00 	call	40017c0 <main>
 400d39c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400d3a0:	01000044 	movi	r4,1
 400d3a4:	400ce180 	call	400ce18 <close>
  exit (result);
 400d3a8:	e13fff17 	ldw	r4,-4(fp)
 400d3ac:	40106f00 	call	40106f0 <exit>

0400d3b0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400d3b0:	defffe04 	addi	sp,sp,-8
 400d3b4:	df000115 	stw	fp,4(sp)
 400d3b8:	df000104 	addi	fp,sp,4
 400d3bc:	e13fff15 	stw	r4,-4(fp)
}
 400d3c0:	e037883a 	mov	sp,fp
 400d3c4:	df000017 	ldw	fp,0(sp)
 400d3c8:	dec00104 	addi	sp,sp,4
 400d3cc:	f800283a 	ret

0400d3d0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400d3d0:	defffe04 	addi	sp,sp,-8
 400d3d4:	df000115 	stw	fp,4(sp)
 400d3d8:	df000104 	addi	fp,sp,4
 400d3dc:	e13fff15 	stw	r4,-4(fp)
}
 400d3e0:	e037883a 	mov	sp,fp
 400d3e4:	df000017 	ldw	fp,0(sp)
 400d3e8:	dec00104 	addi	sp,sp,4
 400d3ec:	f800283a 	ret

0400d3f0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 400d3f0:	defffc04 	addi	sp,sp,-16
 400d3f4:	df000315 	stw	fp,12(sp)
 400d3f8:	df000304 	addi	fp,sp,12
 400d3fc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400d400:	e0bffe17 	ldw	r2,-8(fp)
 400d404:	10800217 	ldw	r2,8(r2)
 400d408:	10d00034 	orhi	r3,r2,16384
 400d40c:	e0bffe17 	ldw	r2,-8(fp)
 400d410:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400d414:	e03ffd15 	stw	zero,-12(fp)
 400d418:	00002006 	br	400d49c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400d41c:	e0bffd17 	ldw	r2,-12(fp)
 400d420:	00c10074 	movhi	r3,1025
 400d424:	18c74904 	addi	r3,r3,7460
 400d428:	10800324 	muli	r2,r2,12
 400d42c:	10c5883a 	add	r2,r2,r3
 400d430:	10c00017 	ldw	r3,0(r2)
 400d434:	e0bffe17 	ldw	r2,-8(fp)
 400d438:	10800017 	ldw	r2,0(r2)
 400d43c:	1880141e 	bne	r3,r2,400d490 <alt_file_locked+0xa0>
 400d440:	e0bffd17 	ldw	r2,-12(fp)
 400d444:	00c10074 	movhi	r3,1025
 400d448:	18c74904 	addi	r3,r3,7460
 400d44c:	10800324 	muli	r2,r2,12
 400d450:	10c5883a 	add	r2,r2,r3
 400d454:	10800204 	addi	r2,r2,8
 400d458:	10800017 	ldw	r2,0(r2)
 400d45c:	1004403a 	cmpge	r2,r2,zero
 400d460:	10000b1e 	bne	r2,zero,400d490 <alt_file_locked+0xa0>
 400d464:	e0bffd17 	ldw	r2,-12(fp)
 400d468:	10800324 	muli	r2,r2,12
 400d46c:	1007883a 	mov	r3,r2
 400d470:	00810074 	movhi	r2,1025
 400d474:	10874904 	addi	r2,r2,7460
 400d478:	1887883a 	add	r3,r3,r2
 400d47c:	e0bffe17 	ldw	r2,-8(fp)
 400d480:	18800326 	beq	r3,r2,400d490 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 400d484:	00bffcc4 	movi	r2,-13
 400d488:	e0bfff15 	stw	r2,-4(fp)
 400d48c:	00000a06 	br	400d4b8 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400d490:	e0bffd17 	ldw	r2,-12(fp)
 400d494:	10800044 	addi	r2,r2,1
 400d498:	e0bffd15 	stw	r2,-12(fp)
 400d49c:	00810074 	movhi	r2,1025
 400d4a0:	108bfd04 	addi	r2,r2,12276
 400d4a4:	10800017 	ldw	r2,0(r2)
 400d4a8:	1007883a 	mov	r3,r2
 400d4ac:	e0bffd17 	ldw	r2,-12(fp)
 400d4b0:	18bfda2e 	bgeu	r3,r2,400d41c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 400d4b4:	e03fff15 	stw	zero,-4(fp)
 400d4b8:	e0bfff17 	ldw	r2,-4(fp)
}
 400d4bc:	e037883a 	mov	sp,fp
 400d4c0:	df000017 	ldw	fp,0(sp)
 400d4c4:	dec00104 	addi	sp,sp,4
 400d4c8:	f800283a 	ret

0400d4cc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 400d4cc:	defff404 	addi	sp,sp,-48
 400d4d0:	dfc00b15 	stw	ra,44(sp)
 400d4d4:	df000a15 	stw	fp,40(sp)
 400d4d8:	df000a04 	addi	fp,sp,40
 400d4dc:	e13ffb15 	stw	r4,-20(fp)
 400d4e0:	e17ffc15 	stw	r5,-16(fp)
 400d4e4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 400d4e8:	00bfffc4 	movi	r2,-1
 400d4ec:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 400d4f0:	00bffb44 	movi	r2,-19
 400d4f4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 400d4f8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 400d4fc:	e13ffb17 	ldw	r4,-20(fp)
 400d500:	01410074 	movhi	r5,1025
 400d504:	294bfb04 	addi	r5,r5,12268
 400d508:	400fdd40 	call	400fdd4 <alt_find_dev>
 400d50c:	e0bffa15 	stw	r2,-24(fp)
 400d510:	e0bffa17 	ldw	r2,-24(fp)
 400d514:	1004c03a 	cmpne	r2,r2,zero
 400d518:	1000051e 	bne	r2,zero,400d530 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 400d51c:	e13ffb17 	ldw	r4,-20(fp)
 400d520:	400fe680 	call	400fe68 <alt_find_file>
 400d524:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 400d528:	00800044 	movi	r2,1
 400d52c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 400d530:	e0bffa17 	ldw	r2,-24(fp)
 400d534:	1005003a 	cmpeq	r2,r2,zero
 400d538:	1000301e 	bne	r2,zero,400d5fc <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 400d53c:	e13ffa17 	ldw	r4,-24(fp)
 400d540:	40100580 	call	4010058 <alt_get_fd>
 400d544:	e0bff815 	stw	r2,-32(fp)
 400d548:	e0bff817 	ldw	r2,-32(fp)
 400d54c:	1004403a 	cmpge	r2,r2,zero
 400d550:	1000031e 	bne	r2,zero,400d560 <open+0x94>
    {
      status = index;
 400d554:	e0bff817 	ldw	r2,-32(fp)
 400d558:	e0bff715 	stw	r2,-36(fp)
 400d55c:	00002906 	br	400d604 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 400d560:	e0bff817 	ldw	r2,-32(fp)
 400d564:	10800324 	muli	r2,r2,12
 400d568:	1007883a 	mov	r3,r2
 400d56c:	00810074 	movhi	r2,1025
 400d570:	10874904 	addi	r2,r2,7460
 400d574:	1885883a 	add	r2,r3,r2
 400d578:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 400d57c:	e0fffc17 	ldw	r3,-16(fp)
 400d580:	00900034 	movhi	r2,16384
 400d584:	10bfffc4 	addi	r2,r2,-1
 400d588:	1886703a 	and	r3,r3,r2
 400d58c:	e0bff917 	ldw	r2,-28(fp)
 400d590:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 400d594:	e0bff617 	ldw	r2,-40(fp)
 400d598:	1004c03a 	cmpne	r2,r2,zero
 400d59c:	1000061e 	bne	r2,zero,400d5b8 <open+0xec>
 400d5a0:	e13ff917 	ldw	r4,-28(fp)
 400d5a4:	400d3f00 	call	400d3f0 <alt_file_locked>
 400d5a8:	e0bff715 	stw	r2,-36(fp)
 400d5ac:	e0bff717 	ldw	r2,-36(fp)
 400d5b0:	1004803a 	cmplt	r2,r2,zero
 400d5b4:	1000131e 	bne	r2,zero,400d604 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 400d5b8:	e0bffa17 	ldw	r2,-24(fp)
 400d5bc:	10800317 	ldw	r2,12(r2)
 400d5c0:	1005003a 	cmpeq	r2,r2,zero
 400d5c4:	1000091e 	bne	r2,zero,400d5ec <open+0x120>
 400d5c8:	e0bffa17 	ldw	r2,-24(fp)
 400d5cc:	10800317 	ldw	r2,12(r2)
 400d5d0:	e13ff917 	ldw	r4,-28(fp)
 400d5d4:	e17ffb17 	ldw	r5,-20(fp)
 400d5d8:	e1bffc17 	ldw	r6,-16(fp)
 400d5dc:	e1fffd17 	ldw	r7,-12(fp)
 400d5e0:	103ee83a 	callr	r2
 400d5e4:	e0bfff15 	stw	r2,-4(fp)
 400d5e8:	00000106 	br	400d5f0 <open+0x124>
 400d5ec:	e03fff15 	stw	zero,-4(fp)
 400d5f0:	e0bfff17 	ldw	r2,-4(fp)
 400d5f4:	e0bff715 	stw	r2,-36(fp)
 400d5f8:	00000206 	br	400d604 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 400d5fc:	00bffb44 	movi	r2,-19
 400d600:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 400d604:	e0bff717 	ldw	r2,-36(fp)
 400d608:	1004403a 	cmpge	r2,r2,zero
 400d60c:	1000091e 	bne	r2,zero,400d634 <open+0x168>
  {
    alt_release_fd (index);  
 400d610:	e13ff817 	ldw	r4,-32(fp)
 400d614:	400d8340 	call	400d834 <alt_release_fd>
    ALT_ERRNO = -status;
 400d618:	400d6540 	call	400d654 <alt_get_errno>
 400d61c:	e0fff717 	ldw	r3,-36(fp)
 400d620:	00c7c83a 	sub	r3,zero,r3
 400d624:	10c00015 	stw	r3,0(r2)
    return -1;
 400d628:	00bfffc4 	movi	r2,-1
 400d62c:	e0bffe15 	stw	r2,-8(fp)
 400d630:	00000206 	br	400d63c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 400d634:	e0bff817 	ldw	r2,-32(fp)
 400d638:	e0bffe15 	stw	r2,-8(fp)
 400d63c:	e0bffe17 	ldw	r2,-8(fp)
}
 400d640:	e037883a 	mov	sp,fp
 400d644:	dfc00117 	ldw	ra,4(sp)
 400d648:	df000017 	ldw	fp,0(sp)
 400d64c:	dec00204 	addi	sp,sp,8
 400d650:	f800283a 	ret

0400d654 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d654:	defffd04 	addi	sp,sp,-12
 400d658:	dfc00215 	stw	ra,8(sp)
 400d65c:	df000115 	stw	fp,4(sp)
 400d660:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400d664:	00810074 	movhi	r2,1025
 400d668:	108bfe04 	addi	r2,r2,12280
 400d66c:	10800017 	ldw	r2,0(r2)
 400d670:	1005003a 	cmpeq	r2,r2,zero
 400d674:	1000061e 	bne	r2,zero,400d690 <alt_get_errno+0x3c>
 400d678:	00810074 	movhi	r2,1025
 400d67c:	108bfe04 	addi	r2,r2,12280
 400d680:	10800017 	ldw	r2,0(r2)
 400d684:	103ee83a 	callr	r2
 400d688:	e0bfff15 	stw	r2,-4(fp)
 400d68c:	00000306 	br	400d69c <alt_get_errno+0x48>
 400d690:	00810074 	movhi	r2,1025
 400d694:	108c0804 	addi	r2,r2,12320
 400d698:	e0bfff15 	stw	r2,-4(fp)
 400d69c:	e0bfff17 	ldw	r2,-4(fp)
}
 400d6a0:	e037883a 	mov	sp,fp
 400d6a4:	dfc00117 	ldw	ra,4(sp)
 400d6a8:	df000017 	ldw	fp,0(sp)
 400d6ac:	dec00204 	addi	sp,sp,8
 400d6b0:	f800283a 	ret

0400d6b4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400d6b4:	defff704 	addi	sp,sp,-36
 400d6b8:	dfc00815 	stw	ra,32(sp)
 400d6bc:	df000715 	stw	fp,28(sp)
 400d6c0:	df000704 	addi	fp,sp,28
 400d6c4:	e13ffb15 	stw	r4,-20(fp)
 400d6c8:	e17ffc15 	stw	r5,-16(fp)
 400d6cc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d6d0:	e0bffb17 	ldw	r2,-20(fp)
 400d6d4:	1004803a 	cmplt	r2,r2,zero
 400d6d8:	1000081e 	bne	r2,zero,400d6fc <read+0x48>
 400d6dc:	e0bffb17 	ldw	r2,-20(fp)
 400d6e0:	10800324 	muli	r2,r2,12
 400d6e4:	1007883a 	mov	r3,r2
 400d6e8:	00810074 	movhi	r2,1025
 400d6ec:	10874904 	addi	r2,r2,7460
 400d6f0:	1887883a 	add	r3,r3,r2
 400d6f4:	e0ffff15 	stw	r3,-4(fp)
 400d6f8:	00000106 	br	400d700 <read+0x4c>
 400d6fc:	e03fff15 	stw	zero,-4(fp)
 400d700:	e0bfff17 	ldw	r2,-4(fp)
 400d704:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 400d708:	e0bffa17 	ldw	r2,-24(fp)
 400d70c:	1005003a 	cmpeq	r2,r2,zero
 400d710:	1000241e 	bne	r2,zero,400d7a4 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400d714:	e0bffa17 	ldw	r2,-24(fp)
 400d718:	10800217 	ldw	r2,8(r2)
 400d71c:	108000cc 	andi	r2,r2,3
 400d720:	10800060 	cmpeqi	r2,r2,1
 400d724:	10001a1e 	bne	r2,zero,400d790 <read+0xdc>
 400d728:	e0bffa17 	ldw	r2,-24(fp)
 400d72c:	10800017 	ldw	r2,0(r2)
 400d730:	10800517 	ldw	r2,20(r2)
 400d734:	1005003a 	cmpeq	r2,r2,zero
 400d738:	1000151e 	bne	r2,zero,400d790 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400d73c:	e0bffa17 	ldw	r2,-24(fp)
 400d740:	10800017 	ldw	r2,0(r2)
 400d744:	10800517 	ldw	r2,20(r2)
 400d748:	e17ffc17 	ldw	r5,-16(fp)
 400d74c:	e1bffd17 	ldw	r6,-12(fp)
 400d750:	e13ffa17 	ldw	r4,-24(fp)
 400d754:	103ee83a 	callr	r2
 400d758:	e0bff915 	stw	r2,-28(fp)
 400d75c:	e0bff917 	ldw	r2,-28(fp)
 400d760:	1004403a 	cmpge	r2,r2,zero
 400d764:	1000071e 	bne	r2,zero,400d784 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 400d768:	400d7d40 	call	400d7d4 <alt_get_errno>
 400d76c:	e0fff917 	ldw	r3,-28(fp)
 400d770:	00c7c83a 	sub	r3,zero,r3
 400d774:	10c00015 	stw	r3,0(r2)
          return -1;
 400d778:	00bfffc4 	movi	r2,-1
 400d77c:	e0bffe15 	stw	r2,-8(fp)
 400d780:	00000e06 	br	400d7bc <read+0x108>
        }
        return rval;
 400d784:	e0bff917 	ldw	r2,-28(fp)
 400d788:	e0bffe15 	stw	r2,-8(fp)
 400d78c:	00000b06 	br	400d7bc <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400d790:	400d7d40 	call	400d7d4 <alt_get_errno>
 400d794:	1007883a 	mov	r3,r2
 400d798:	00800344 	movi	r2,13
 400d79c:	18800015 	stw	r2,0(r3)
 400d7a0:	00000406 	br	400d7b4 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400d7a4:	400d7d40 	call	400d7d4 <alt_get_errno>
 400d7a8:	1007883a 	mov	r3,r2
 400d7ac:	00801444 	movi	r2,81
 400d7b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400d7b4:	00bfffc4 	movi	r2,-1
 400d7b8:	e0bffe15 	stw	r2,-8(fp)
 400d7bc:	e0bffe17 	ldw	r2,-8(fp)
}
 400d7c0:	e037883a 	mov	sp,fp
 400d7c4:	dfc00117 	ldw	ra,4(sp)
 400d7c8:	df000017 	ldw	fp,0(sp)
 400d7cc:	dec00204 	addi	sp,sp,8
 400d7d0:	f800283a 	ret

0400d7d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d7d4:	defffd04 	addi	sp,sp,-12
 400d7d8:	dfc00215 	stw	ra,8(sp)
 400d7dc:	df000115 	stw	fp,4(sp)
 400d7e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400d7e4:	00810074 	movhi	r2,1025
 400d7e8:	108bfe04 	addi	r2,r2,12280
 400d7ec:	10800017 	ldw	r2,0(r2)
 400d7f0:	1005003a 	cmpeq	r2,r2,zero
 400d7f4:	1000061e 	bne	r2,zero,400d810 <alt_get_errno+0x3c>
 400d7f8:	00810074 	movhi	r2,1025
 400d7fc:	108bfe04 	addi	r2,r2,12280
 400d800:	10800017 	ldw	r2,0(r2)
 400d804:	103ee83a 	callr	r2
 400d808:	e0bfff15 	stw	r2,-4(fp)
 400d80c:	00000306 	br	400d81c <alt_get_errno+0x48>
 400d810:	00810074 	movhi	r2,1025
 400d814:	108c0804 	addi	r2,r2,12320
 400d818:	e0bfff15 	stw	r2,-4(fp)
 400d81c:	e0bfff17 	ldw	r2,-4(fp)
}
 400d820:	e037883a 	mov	sp,fp
 400d824:	dfc00117 	ldw	ra,4(sp)
 400d828:	df000017 	ldw	fp,0(sp)
 400d82c:	dec00204 	addi	sp,sp,8
 400d830:	f800283a 	ret

0400d834 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400d834:	defffe04 	addi	sp,sp,-8
 400d838:	df000115 	stw	fp,4(sp)
 400d83c:	df000104 	addi	fp,sp,4
 400d840:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 400d844:	e0bfff17 	ldw	r2,-4(fp)
 400d848:	108000d0 	cmplti	r2,r2,3
 400d84c:	10000d1e 	bne	r2,zero,400d884 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 400d850:	e0bfff17 	ldw	r2,-4(fp)
 400d854:	00c10074 	movhi	r3,1025
 400d858:	18c74904 	addi	r3,r3,7460
 400d85c:	10800324 	muli	r2,r2,12
 400d860:	10c5883a 	add	r2,r2,r3
 400d864:	10800204 	addi	r2,r2,8
 400d868:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400d86c:	e0bfff17 	ldw	r2,-4(fp)
 400d870:	00c10074 	movhi	r3,1025
 400d874:	18c74904 	addi	r3,r3,7460
 400d878:	10800324 	muli	r2,r2,12
 400d87c:	10c5883a 	add	r2,r2,r3
 400d880:	10000015 	stw	zero,0(r2)
  }
}
 400d884:	e037883a 	mov	sp,fp
 400d888:	df000017 	ldw	fp,0(sp)
 400d88c:	dec00104 	addi	sp,sp,4
 400d890:	f800283a 	ret

0400d894 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400d894:	defff804 	addi	sp,sp,-32
 400d898:	df000715 	stw	fp,28(sp)
 400d89c:	df000704 	addi	fp,sp,28
 400d8a0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d8a4:	0005303a 	rdctl	r2,status
 400d8a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d8ac:	e0fffb17 	ldw	r3,-20(fp)
 400d8b0:	00bfff84 	movi	r2,-2
 400d8b4:	1884703a 	and	r2,r3,r2
 400d8b8:	1001703a 	wrctl	status,r2
  
  return context;
 400d8bc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400d8c0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400d8c4:	d0a00c17 	ldw	r2,-32720(gp)
 400d8c8:	10c000c4 	addi	r3,r2,3
 400d8cc:	00bfff04 	movi	r2,-4
 400d8d0:	1884703a 	and	r2,r3,r2
 400d8d4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400d8d8:	d0e00c17 	ldw	r3,-32720(gp)
 400d8dc:	e0bffe17 	ldw	r2,-8(fp)
 400d8e0:	1887883a 	add	r3,r3,r2
 400d8e4:	00818034 	movhi	r2,1536
 400d8e8:	10800004 	addi	r2,r2,0
 400d8ec:	10c0072e 	bgeu	r2,r3,400d90c <sbrk+0x78>
 400d8f0:	e0bffd17 	ldw	r2,-12(fp)
 400d8f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d8f8:	e0bffa17 	ldw	r2,-24(fp)
 400d8fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400d900:	00bfffc4 	movi	r2,-1
 400d904:	e0bfff15 	stw	r2,-4(fp)
 400d908:	00000c06 	br	400d93c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 400d90c:	d0a00c17 	ldw	r2,-32720(gp)
 400d910:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 400d914:	d0e00c17 	ldw	r3,-32720(gp)
 400d918:	e0bffe17 	ldw	r2,-8(fp)
 400d91c:	1885883a 	add	r2,r3,r2
 400d920:	d0a00c15 	stw	r2,-32720(gp)
 400d924:	e0bffd17 	ldw	r2,-12(fp)
 400d928:	e0bff915 	stw	r2,-28(fp)
 400d92c:	e0bff917 	ldw	r2,-28(fp)
 400d930:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400d934:	e0bffc17 	ldw	r2,-16(fp)
 400d938:	e0bfff15 	stw	r2,-4(fp)
 400d93c:	e0bfff17 	ldw	r2,-4(fp)
} 
 400d940:	e037883a 	mov	sp,fp
 400d944:	df000017 	ldw	fp,0(sp)
 400d948:	dec00104 	addi	sp,sp,4
 400d94c:	f800283a 	ret

0400d950 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 400d950:	defffd04 	addi	sp,sp,-12
 400d954:	dfc00215 	stw	ra,8(sp)
 400d958:	df000115 	stw	fp,4(sp)
 400d95c:	df000104 	addi	fp,sp,4
 400d960:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 400d964:	e13fff17 	ldw	r4,-4(fp)
 400d968:	400faac0 	call	400faac <alt_busy_sleep>
}
 400d96c:	e037883a 	mov	sp,fp
 400d970:	dfc00117 	ldw	ra,4(sp)
 400d974:	df000017 	ldw	fp,0(sp)
 400d978:	dec00204 	addi	sp,sp,8
 400d97c:	f800283a 	ret

0400d980 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400d980:	defff704 	addi	sp,sp,-36
 400d984:	dfc00815 	stw	ra,32(sp)
 400d988:	df000715 	stw	fp,28(sp)
 400d98c:	df000704 	addi	fp,sp,28
 400d990:	e13ffb15 	stw	r4,-20(fp)
 400d994:	e17ffc15 	stw	r5,-16(fp)
 400d998:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d99c:	e0bffb17 	ldw	r2,-20(fp)
 400d9a0:	1004803a 	cmplt	r2,r2,zero
 400d9a4:	1000081e 	bne	r2,zero,400d9c8 <write+0x48>
 400d9a8:	e0bffb17 	ldw	r2,-20(fp)
 400d9ac:	10800324 	muli	r2,r2,12
 400d9b0:	1007883a 	mov	r3,r2
 400d9b4:	00810074 	movhi	r2,1025
 400d9b8:	10874904 	addi	r2,r2,7460
 400d9bc:	1887883a 	add	r3,r3,r2
 400d9c0:	e0ffff15 	stw	r3,-4(fp)
 400d9c4:	00000106 	br	400d9cc <write+0x4c>
 400d9c8:	e03fff15 	stw	zero,-4(fp)
 400d9cc:	e0bfff17 	ldw	r2,-4(fp)
 400d9d0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 400d9d4:	e0bffa17 	ldw	r2,-24(fp)
 400d9d8:	1005003a 	cmpeq	r2,r2,zero
 400d9dc:	1000241e 	bne	r2,zero,400da70 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400d9e0:	e0bffa17 	ldw	r2,-24(fp)
 400d9e4:	10800217 	ldw	r2,8(r2)
 400d9e8:	108000cc 	andi	r2,r2,3
 400d9ec:	1005003a 	cmpeq	r2,r2,zero
 400d9f0:	10001a1e 	bne	r2,zero,400da5c <write+0xdc>
 400d9f4:	e0bffa17 	ldw	r2,-24(fp)
 400d9f8:	10800017 	ldw	r2,0(r2)
 400d9fc:	10800617 	ldw	r2,24(r2)
 400da00:	1005003a 	cmpeq	r2,r2,zero
 400da04:	1000151e 	bne	r2,zero,400da5c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400da08:	e0bffa17 	ldw	r2,-24(fp)
 400da0c:	10800017 	ldw	r2,0(r2)
 400da10:	10800617 	ldw	r2,24(r2)
 400da14:	e17ffc17 	ldw	r5,-16(fp)
 400da18:	e1bffd17 	ldw	r6,-12(fp)
 400da1c:	e13ffa17 	ldw	r4,-24(fp)
 400da20:	103ee83a 	callr	r2
 400da24:	e0bff915 	stw	r2,-28(fp)
 400da28:	e0bff917 	ldw	r2,-28(fp)
 400da2c:	1004403a 	cmpge	r2,r2,zero
 400da30:	1000071e 	bne	r2,zero,400da50 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 400da34:	400daa00 	call	400daa0 <alt_get_errno>
 400da38:	e0fff917 	ldw	r3,-28(fp)
 400da3c:	00c7c83a 	sub	r3,zero,r3
 400da40:	10c00015 	stw	r3,0(r2)
        return -1;
 400da44:	00bfffc4 	movi	r2,-1
 400da48:	e0bffe15 	stw	r2,-8(fp)
 400da4c:	00000e06 	br	400da88 <write+0x108>
      }
      return rval;
 400da50:	e0bff917 	ldw	r2,-28(fp)
 400da54:	e0bffe15 	stw	r2,-8(fp)
 400da58:	00000b06 	br	400da88 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400da5c:	400daa00 	call	400daa0 <alt_get_errno>
 400da60:	1007883a 	mov	r3,r2
 400da64:	00800344 	movi	r2,13
 400da68:	18800015 	stw	r2,0(r3)
 400da6c:	00000406 	br	400da80 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400da70:	400daa00 	call	400daa0 <alt_get_errno>
 400da74:	1007883a 	mov	r3,r2
 400da78:	00801444 	movi	r2,81
 400da7c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400da80:	00bfffc4 	movi	r2,-1
 400da84:	e0bffe15 	stw	r2,-8(fp)
 400da88:	e0bffe17 	ldw	r2,-8(fp)
}
 400da8c:	e037883a 	mov	sp,fp
 400da90:	dfc00117 	ldw	ra,4(sp)
 400da94:	df000017 	ldw	fp,0(sp)
 400da98:	dec00204 	addi	sp,sp,8
 400da9c:	f800283a 	ret

0400daa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400daa0:	defffd04 	addi	sp,sp,-12
 400daa4:	dfc00215 	stw	ra,8(sp)
 400daa8:	df000115 	stw	fp,4(sp)
 400daac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400dab0:	00810074 	movhi	r2,1025
 400dab4:	108bfe04 	addi	r2,r2,12280
 400dab8:	10800017 	ldw	r2,0(r2)
 400dabc:	1005003a 	cmpeq	r2,r2,zero
 400dac0:	1000061e 	bne	r2,zero,400dadc <alt_get_errno+0x3c>
 400dac4:	00810074 	movhi	r2,1025
 400dac8:	108bfe04 	addi	r2,r2,12280
 400dacc:	10800017 	ldw	r2,0(r2)
 400dad0:	103ee83a 	callr	r2
 400dad4:	e0bfff15 	stw	r2,-4(fp)
 400dad8:	00000306 	br	400dae8 <alt_get_errno+0x48>
 400dadc:	00810074 	movhi	r2,1025
 400dae0:	108c0804 	addi	r2,r2,12320
 400dae4:	e0bfff15 	stw	r2,-4(fp)
 400dae8:	e0bfff17 	ldw	r2,-4(fp)
}
 400daec:	e037883a 	mov	sp,fp
 400daf0:	dfc00117 	ldw	ra,4(sp)
 400daf4:	df000017 	ldw	fp,0(sp)
 400daf8:	dec00204 	addi	sp,sp,8
 400dafc:	f800283a 	ret

0400db00 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400db00:	defffd04 	addi	sp,sp,-12
 400db04:	dfc00215 	stw	ra,8(sp)
 400db08:	df000115 	stw	fp,4(sp)
 400db0c:	df000104 	addi	fp,sp,4
 400db10:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 400db14:	40106bc0 	call	40106bc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400db18:	00800044 	movi	r2,1
 400db1c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400db20:	e037883a 	mov	sp,fp
 400db24:	dfc00117 	ldw	ra,4(sp)
 400db28:	df000017 	ldw	fp,0(sp)
 400db2c:	dec00204 	addi	sp,sp,8
 400db30:	f800283a 	ret

0400db34 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400db34:	defffe04 	addi	sp,sp,-8
 400db38:	dfc00115 	stw	ra,4(sp)
 400db3c:	df000015 	stw	fp,0(sp)
 400db40:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
 400db44:	01010074 	movhi	r4,1025
 400db48:	2107a904 	addi	r4,r4,7844
 400db4c:	400dbbc0 	call	400dbbc <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 400db50:	01010074 	movhi	r4,1025
 400db54:	2107e504 	addi	r4,r4,8084
 400db58:	000b883a 	mov	r5,zero
 400db5c:	01800044 	movi	r6,1
 400db60:	400e6e80 	call	400e6e8 <altera_avalon_jtag_uart_init>
 400db64:	01010074 	movhi	r4,1025
 400db68:	2107db04 	addi	r4,r4,8044
 400db6c:	400db840 	call	400db84 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_TOUCH, spi_touch);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
 400db70:	e037883a 	mov	sp,fp
 400db74:	dfc00117 	ldw	ra,4(sp)
 400db78:	df000017 	ldw	fp,0(sp)
 400db7c:	dec00204 	addi	sp,sp,8
 400db80:	f800283a 	ret

0400db84 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400db84:	defffd04 	addi	sp,sp,-12
 400db88:	dfc00215 	stw	ra,8(sp)
 400db8c:	df000115 	stw	fp,4(sp)
 400db90:	df000104 	addi	fp,sp,4
 400db94:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400db98:	e13fff17 	ldw	r4,-4(fp)
 400db9c:	01410074 	movhi	r5,1025
 400dba0:	294bfb04 	addi	r5,r5,12268
 400dba4:	400fbf80 	call	400fbf8 <alt_dev_llist_insert>
}
 400dba8:	e037883a 	mov	sp,fp
 400dbac:	dfc00117 	ldw	ra,4(sp)
 400dbb0:	df000017 	ldw	fp,0(sp)
 400dbb4:	dec00204 	addi	sp,sp,8
 400dbb8:	f800283a 	ret

0400dbbc <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 400dbbc:	defffc04 	addi	sp,sp,-16
 400dbc0:	dfc00315 	stw	ra,12(sp)
 400dbc4:	df000215 	stw	fp,8(sp)
 400dbc8:	df000204 	addi	fp,sp,8
 400dbcc:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 400dbd0:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 400dbd4:	e13fff17 	ldw	r4,-4(fp)
 400dbd8:	400dc480 	call	400dc48 <alt_epcs_flash_query>
 400dbdc:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 400dbe0:	e0bffe17 	ldw	r2,-8(fp)
 400dbe4:	1004c03a 	cmpne	r2,r2,zero
 400dbe8:	1000031e 	bne	r2,zero,400dbf8 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 400dbec:	e13fff17 	ldw	r4,-4(fp)
 400dbf0:	400dc100 	call	400dc10 <alt_flash_device_register>
 400dbf4:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 400dbf8:	e0bffe17 	ldw	r2,-8(fp)
}
 400dbfc:	e037883a 	mov	sp,fp
 400dc00:	dfc00117 	ldw	ra,4(sp)
 400dc04:	df000017 	ldw	fp,0(sp)
 400dc08:	dec00204 	addi	sp,sp,8
 400dc0c:	f800283a 	ret

0400dc10 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 400dc10:	defffd04 	addi	sp,sp,-12
 400dc14:	dfc00215 	stw	ra,8(sp)
 400dc18:	df000115 	stw	fp,4(sp)
 400dc1c:	df000104 	addi	fp,sp,4
 400dc20:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 400dc24:	e13fff17 	ldw	r4,-4(fp)
 400dc28:	01410074 	movhi	r5,1025
 400dc2c:	294c0004 	addi	r5,r5,12288
 400dc30:	400fbf80 	call	400fbf8 <alt_dev_llist_insert>
}
 400dc34:	e037883a 	mov	sp,fp
 400dc38:	dfc00117 	ldw	ra,4(sp)
 400dc3c:	df000017 	ldw	fp,0(sp)
 400dc40:	dec00204 	addi	sp,sp,8
 400dc44:	f800283a 	ret

0400dc48 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 400dc48:	defffc04 	addi	sp,sp,-16
 400dc4c:	dfc00315 	stw	ra,12(sp)
 400dc50:	df000215 	stw	fp,8(sp)
 400dc54:	df000204 	addi	fp,sp,8
 400dc58:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 400dc5c:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 400dc60:	e0bfff17 	ldw	r2,-4(fp)
 400dc64:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
 400dc68:	e0bfff17 	ldw	r2,-4(fp)
 400dc6c:	11002d17 	ldw	r4,180(r2)
 400dc70:	400f7bc0 	call	400f7bc <epcs_read_electronic_signature>
 400dc74:	10c03fcc 	andi	r3,r2,255
 400dc78:	e0bfff17 	ldw	r2,-4(fp)
 400dc7c:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 400dc80:	e0bfff17 	ldw	r2,-4(fp)
 400dc84:	10802f17 	ldw	r2,188(r2)
 400dc88:	10800598 	cmpnei	r2,r2,22
 400dc8c:	10000a1e 	bne	r2,zero,400dcb8 <alt_epcs_flash_query+0x70>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 400dc90:	e0ffff17 	ldw	r3,-4(fp)
 400dc94:	00802034 	movhi	r2,128
 400dc98:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
 400dc9c:	e0ffff17 	ldw	r3,-4(fp)
 400dca0:	00802004 	movi	r2,128
 400dca4:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 400dca8:	e0ffff17 	ldw	r3,-4(fp)
 400dcac:	00800074 	movhi	r2,1
 400dcb0:	18801015 	stw	r2,64(r3)
 400dcb4:	00007306 	br	400de84 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 400dcb8:	e0bfff17 	ldw	r2,-4(fp)
 400dcbc:	10802f17 	ldw	r2,188(r2)
 400dcc0:	10800518 	cmpnei	r2,r2,20
 400dcc4:	10000a1e 	bne	r2,zero,400dcf0 <alt_epcs_flash_query+0xa8>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 400dcc8:	e0ffff17 	ldw	r3,-4(fp)
 400dccc:	00800834 	movhi	r2,32
 400dcd0:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
 400dcd4:	e0ffff17 	ldw	r3,-4(fp)
 400dcd8:	00800804 	movi	r2,32
 400dcdc:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 400dce0:	e0ffff17 	ldw	r3,-4(fp)
 400dce4:	00800074 	movhi	r2,1
 400dce8:	18801015 	stw	r2,64(r3)
 400dcec:	00006506 	br	400de84 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 400dcf0:	e0bfff17 	ldw	r2,-4(fp)
 400dcf4:	10802f17 	ldw	r2,188(r2)
 400dcf8:	108004d8 	cmpnei	r2,r2,19
 400dcfc:	10000a1e 	bne	r2,zero,400dd28 <alt_epcs_flash_query+0xe0>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 400dd00:	e0ffff17 	ldw	r3,-4(fp)
 400dd04:	00800434 	movhi	r2,16
 400dd08:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
 400dd0c:	e0ffff17 	ldw	r3,-4(fp)
 400dd10:	00800404 	movi	r2,16
 400dd14:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 400dd18:	e0ffff17 	ldw	r3,-4(fp)
 400dd1c:	00800074 	movhi	r2,1
 400dd20:	18801015 	stw	r2,64(r3)
 400dd24:	00005706 	br	400de84 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 400dd28:	e0bfff17 	ldw	r2,-4(fp)
 400dd2c:	10802f17 	ldw	r2,188(r2)
 400dd30:	10800498 	cmpnei	r2,r2,18
 400dd34:	10000a1e 	bne	r2,zero,400dd60 <alt_epcs_flash_query+0x118>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 400dd38:	e0ffff17 	ldw	r3,-4(fp)
 400dd3c:	00800234 	movhi	r2,8
 400dd40:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
 400dd44:	e0ffff17 	ldw	r3,-4(fp)
 400dd48:	00800204 	movi	r2,8
 400dd4c:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 400dd50:	e0ffff17 	ldw	r3,-4(fp)
 400dd54:	00800074 	movhi	r2,1
 400dd58:	18801015 	stw	r2,64(r3)
 400dd5c:	00004906 	br	400de84 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 400dd60:	e0bfff17 	ldw	r2,-4(fp)
 400dd64:	10802f17 	ldw	r2,188(r2)
 400dd68:	10800418 	cmpnei	r2,r2,16
 400dd6c:	10000a1e 	bne	r2,zero,400dd98 <alt_epcs_flash_query+0x150>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 400dd70:	e0ffff17 	ldw	r3,-4(fp)
 400dd74:	008000b4 	movhi	r2,2
 400dd78:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
 400dd7c:	e0ffff17 	ldw	r3,-4(fp)
 400dd80:	00800104 	movi	r2,4
 400dd84:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
 400dd88:	e0ffff17 	ldw	r3,-4(fp)
 400dd8c:	00a00014 	movui	r2,32768
 400dd90:	18801015 	stw	r2,64(r3)
 400dd94:	00003b06 	br	400de84 <alt_epcs_flash_query+0x23c>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 400dd98:	e0bfff17 	ldw	r2,-4(fp)
 400dd9c:	11002d17 	ldw	r4,180(r2)
 400dda0:	400f8280 	call	400f828 <epcs_read_device_id>
 400dda4:	1007883a 	mov	r3,r2
 400dda8:	e0bfff17 	ldw	r2,-4(fp)
 400ddac:	10c02f15 	stw	r3,188(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 400ddb0:	e0bfff17 	ldw	r2,-4(fp)
 400ddb4:	10c02f17 	ldw	r3,188(r2)
 400ddb8:	00804034 	movhi	r2,256
 400ddbc:	10bfffc4 	addi	r2,r2,-1
 400ddc0:	1886703a 	and	r3,r3,r2
 400ddc4:	00800874 	movhi	r2,33
 400ddc8:	10ae8604 	addi	r2,r2,-17896
 400ddcc:	18800a1e 	bne	r3,r2,400ddf8 <alt_epcs_flash_query+0x1b0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 400ddd0:	e0ffff17 	ldw	r3,-4(fp)
 400ddd4:	00804034 	movhi	r2,256
 400ddd8:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 400dddc:	e0ffff17 	ldw	r3,-4(fp)
 400dde0:	00804004 	movi	r2,256
 400dde4:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 400dde8:	e0ffff17 	ldw	r3,-4(fp)
 400ddec:	00800074 	movhi	r2,1
 400ddf0:	18801015 	stw	r2,64(r3)
 400ddf4:	00002306 	br	400de84 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 400ddf8:	e0bfff17 	ldw	r2,-4(fp)
 400ddfc:	10802f17 	ldw	r2,188(r2)
 400de00:	10803fcc 	andi	r2,r2,255
 400de04:	10800618 	cmpnei	r2,r2,24
 400de08:	10000a1e 	bne	r2,zero,400de34 <alt_epcs_flash_query+0x1ec>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 400de0c:	e0ffff17 	ldw	r3,-4(fp)
 400de10:	00804034 	movhi	r2,256
 400de14:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
 400de18:	e0ffff17 	ldw	r3,-4(fp)
 400de1c:	00801004 	movi	r2,64
 400de20:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;
 400de24:	e0ffff17 	ldw	r3,-4(fp)
 400de28:	00800134 	movhi	r2,4
 400de2c:	18801015 	stw	r2,64(r3)
 400de30:	00001406 	br	400de84 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 400de34:	e0bfff17 	ldw	r2,-4(fp)
 400de38:	10802f17 	ldw	r2,188(r2)
 400de3c:	10803fcc 	andi	r2,r2,255
 400de40:	10800658 	cmpnei	r2,r2,25
 400de44:	10000d1e 	bne	r2,zero,400de7c <alt_epcs_flash_query+0x234>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 400de48:	e0ffff17 	ldw	r3,-4(fp)
 400de4c:	00808034 	movhi	r2,512
 400de50:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 400de54:	e0ffff17 	ldw	r3,-4(fp)
 400de58:	00808004 	movi	r2,512
 400de5c:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 400de60:	e0ffff17 	ldw	r3,-4(fp)
 400de64:	00800074 	movhi	r2,1
 400de68:	18801015 	stw	r2,64(r3)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 400de6c:	e0ffff17 	ldw	r3,-4(fp)
 400de70:	00800044 	movi	r2,1
 400de74:	18803115 	stw	r2,196(r3)
 400de78:	00000206 	br	400de84 <alt_epcs_flash_query+0x23c>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 400de7c:	00bffb44 	movi	r2,-19
 400de80:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 400de84:	e0bfff17 	ldw	r2,-4(fp)
 400de88:	10800e17 	ldw	r2,56(r2)
 400de8c:	1007883a 	mov	r3,r2
 400de90:	e0bfff17 	ldw	r2,-4(fp)
 400de94:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 400de98:	e0ffff17 	ldw	r3,-4(fp)
 400de9c:	00800044 	movi	r2,1
 400dea0:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
 400dea4:	e0bfff17 	ldw	r2,-4(fp)
 400dea8:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 400deac:	e0ffff17 	ldw	r3,-4(fp)
 400deb0:	00804004 	movi	r2,256
 400deb4:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
 400deb8:	e0bffe17 	ldw	r2,-8(fp)
}
 400debc:	e037883a 	mov	sp,fp
 400dec0:	dfc00117 	ldw	ra,4(sp)
 400dec4:	df000017 	ldw	fp,0(sp)
 400dec8:	dec00204 	addi	sp,sp,8
 400decc:	f800283a 	ret

0400ded0 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 400ded0:	deffeb04 	addi	sp,sp,-84
 400ded4:	dfc01415 	stw	ra,80(sp)
 400ded8:	df001315 	stw	fp,76(sp)
 400dedc:	df001304 	addi	fp,sp,76
 400dee0:	e13ff915 	stw	r4,-28(fp)
 400dee4:	e17ffa15 	stw	r5,-24(fp)
 400dee8:	e1bffb15 	stw	r6,-20(fp)
 400deec:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 400def0:	00800804 	movi	r2,32
 400def4:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
 400def8:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
 400defc:	00002c06 	br	400dfb0 <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 400df00:	e0bff017 	ldw	r2,-64(fp)
 400df04:	e0bfff15 	stw	r2,-4(fp)
 400df08:	e0fffc17 	ldw	r3,-16(fp)
 400df0c:	e0fffe15 	stw	r3,-8(fp)
 400df10:	e0bfff17 	ldw	r2,-4(fp)
 400df14:	e0fffe17 	ldw	r3,-8(fp)
 400df18:	10c0022e 	bgeu	r2,r3,400df24 <alt_epcs_flash_memcmp+0x54>
 400df1c:	e0bfff17 	ldw	r2,-4(fp)
 400df20:	e0bffe15 	stw	r2,-8(fp)
 400df24:	e0fffe17 	ldw	r3,-8(fp)
 400df28:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 400df2c:	e0fffb17 	ldw	r3,-20(fp)
 400df30:	e0bfef17 	ldw	r2,-68(fp)
 400df34:	188b883a 	add	r5,r3,r2
 400df38:	e1bff104 	addi	r6,fp,-60
 400df3c:	e13ff917 	ldw	r4,-28(fp)
 400df40:	e1ffee17 	ldw	r7,-72(fp)
 400df44:	400e5080 	call	400e508 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 400df48:	1004403a 	cmpge	r2,r2,zero
 400df4c:	1000031e 	bne	r2,zero,400df5c <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 400df50:	00bfffc4 	movi	r2,-1
 400df54:	e0bffd15 	stw	r2,-12(fp)
 400df58:	00001906 	br	400dfc0 <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 400df5c:	e0fffa17 	ldw	r3,-24(fp)
 400df60:	e0bfef17 	ldw	r2,-68(fp)
 400df64:	1889883a 	add	r4,r3,r2
 400df68:	e1bfee17 	ldw	r6,-72(fp)
 400df6c:	e17ff104 	addi	r5,fp,-60
 400df70:	40107280 	call	4010728 <memcmp>
 400df74:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
 400df78:	e0bfed17 	ldw	r2,-76(fp)
 400df7c:	1005003a 	cmpeq	r2,r2,zero
 400df80:	1000031e 	bne	r2,zero,400df90 <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
 400df84:	e0ffed17 	ldw	r3,-76(fp)
 400df88:	e0fffd15 	stw	r3,-12(fp)
 400df8c:	00000c06 	br	400dfc0 <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
 400df90:	e0ffee17 	ldw	r3,-72(fp)
 400df94:	e0bffc17 	ldw	r2,-16(fp)
 400df98:	10c5c83a 	sub	r2,r2,r3
 400df9c:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
 400dfa0:	e0ffef17 	ldw	r3,-68(fp)
 400dfa4:	e0bfee17 	ldw	r2,-72(fp)
 400dfa8:	1885883a 	add	r2,r3,r2
 400dfac:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 400dfb0:	e0bffc17 	ldw	r2,-16(fp)
 400dfb4:	1004c03a 	cmpne	r2,r2,zero
 400dfb8:	103fd11e 	bne	r2,zero,400df00 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 400dfbc:	e03ffd15 	stw	zero,-12(fp)
 400dfc0:	e0bffd17 	ldw	r2,-12(fp)
}
 400dfc4:	e037883a 	mov	sp,fp
 400dfc8:	dfc00117 	ldw	ra,4(sp)
 400dfcc:	df000017 	ldw	fp,0(sp)
 400dfd0:	dec00204 	addi	sp,sp,8
 400dfd4:	f800283a 	ret

0400dfd8 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 400dfd8:	defff204 	addi	sp,sp,-56
 400dfdc:	dfc00d15 	stw	ra,52(sp)
 400dfe0:	df000c15 	stw	fp,48(sp)
 400dfe4:	df000c04 	addi	fp,sp,48
 400dfe8:	e13ffa15 	stw	r4,-24(fp)
 400dfec:	e17ffb15 	stw	r5,-20(fp)
 400dff0:	e1bffc15 	stw	r6,-16(fp)
 400dff4:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
 400dff8:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 400dffc:	e03ff815 	stw	zero,-32(fp)
 400e000:	00008b06 	br	400e230 <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 400e004:	e0bff817 	ldw	r2,-32(fp)
 400e008:	e0fffa17 	ldw	r3,-24(fp)
 400e00c:	1004913a 	slli	r2,r2,4
 400e010:	10c5883a 	add	r2,r2,r3
 400e014:	10800d04 	addi	r2,r2,52
 400e018:	10c00017 	ldw	r3,0(r2)
 400e01c:	e0bffb17 	ldw	r2,-20(fp)
 400e020:	10c08016 	blt	r2,r3,400e224 <alt_epcs_flash_write+0x24c>
 400e024:	e0bff817 	ldw	r2,-32(fp)
 400e028:	e0fffa17 	ldw	r3,-24(fp)
 400e02c:	1004913a 	slli	r2,r2,4
 400e030:	10c5883a 	add	r2,r2,r3
 400e034:	10800d04 	addi	r2,r2,52
 400e038:	11000017 	ldw	r4,0(r2)
 400e03c:	e0bff817 	ldw	r2,-32(fp)
 400e040:	e0fffa17 	ldw	r3,-24(fp)
 400e044:	1004913a 	slli	r2,r2,4
 400e048:	10c5883a 	add	r2,r2,r3
 400e04c:	10800e04 	addi	r2,r2,56
 400e050:	10800017 	ldw	r2,0(r2)
 400e054:	2087883a 	add	r3,r4,r2
 400e058:	e0bffb17 	ldw	r2,-20(fp)
 400e05c:	10c0710e 	bge	r2,r3,400e224 <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 400e060:	e0bff817 	ldw	r2,-32(fp)
 400e064:	e0fffa17 	ldw	r3,-24(fp)
 400e068:	1004913a 	slli	r2,r2,4
 400e06c:	10c5883a 	add	r2,r2,r3
 400e070:	10800d04 	addi	r2,r2,52
 400e074:	10800017 	ldw	r2,0(r2)
 400e078:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 400e07c:	e03ff715 	stw	zero,-36(fp)
 400e080:	00006006 	br	400e204 <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
 400e084:	e0fffb17 	ldw	r3,-20(fp)
 400e088:	e0bff517 	ldw	r2,-44(fp)
 400e08c:	18805116 	blt	r3,r2,400e1d4 <alt_epcs_flash_write+0x1fc>
 400e090:	e0bff817 	ldw	r2,-32(fp)
 400e094:	e0fffa17 	ldw	r3,-24(fp)
 400e098:	1004913a 	slli	r2,r2,4
 400e09c:	10c5883a 	add	r2,r2,r3
 400e0a0:	10801004 	addi	r2,r2,64
 400e0a4:	10c00017 	ldw	r3,0(r2)
 400e0a8:	e0bff517 	ldw	r2,-44(fp)
 400e0ac:	1887883a 	add	r3,r3,r2
 400e0b0:	e0bffb17 	ldw	r2,-20(fp)
 400e0b4:	10c0470e 	bge	r2,r3,400e1d4 <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 400e0b8:	e0bff817 	ldw	r2,-32(fp)
 400e0bc:	e0fffa17 	ldw	r3,-24(fp)
 400e0c0:	1004913a 	slli	r2,r2,4
 400e0c4:	10c5883a 	add	r2,r2,r3
 400e0c8:	10801004 	addi	r2,r2,64
 400e0cc:	10c00017 	ldw	r3,0(r2)
 400e0d0:	e0bff517 	ldw	r2,-44(fp)
 400e0d4:	1887883a 	add	r3,r3,r2
 400e0d8:	e0bffb17 	ldw	r2,-20(fp)
 400e0dc:	1885c83a 	sub	r2,r3,r2
 400e0e0:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 400e0e4:	e0bff617 	ldw	r2,-40(fp)
 400e0e8:	e0bfff15 	stw	r2,-4(fp)
 400e0ec:	e0fffd17 	ldw	r3,-12(fp)
 400e0f0:	e0fffe15 	stw	r3,-8(fp)
 400e0f4:	e0bfff17 	ldw	r2,-4(fp)
 400e0f8:	e0fffe17 	ldw	r3,-8(fp)
 400e0fc:	10c0020e 	bge	r2,r3,400e108 <alt_epcs_flash_write+0x130>
 400e100:	e0bfff17 	ldw	r2,-4(fp)
 400e104:	e0bffe15 	stw	r2,-8(fp)
 400e108:	e0fffe17 	ldw	r3,-8(fp)
 400e10c:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 400e110:	e1fff617 	ldw	r7,-40(fp)
 400e114:	e13ffa17 	ldw	r4,-24(fp)
 400e118:	e17ffc17 	ldw	r5,-16(fp)
 400e11c:	e1bffb17 	ldw	r6,-20(fp)
 400e120:	400ded00 	call	400ded0 <alt_epcs_flash_memcmp>
 400e124:	1005003a 	cmpeq	r2,r2,zero
 400e128:	1000131e 	bne	r2,zero,400e178 <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 400e12c:	e0bffa17 	ldw	r2,-24(fp)
 400e130:	10800817 	ldw	r2,32(r2)
 400e134:	e13ffa17 	ldw	r4,-24(fp)
 400e138:	e17ff517 	ldw	r5,-44(fp)
 400e13c:	103ee83a 	callr	r2
 400e140:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
 400e144:	e0bff917 	ldw	r2,-28(fp)
 400e148:	1004c03a 	cmpne	r2,r2,zero
 400e14c:	10000a1e 	bne	r2,zero,400e178 <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
 400e150:	e0bffa17 	ldw	r2,-24(fp)
 400e154:	10c00917 	ldw	r3,36(r2)
 400e158:	e0bff617 	ldw	r2,-40(fp)
 400e15c:	d8800015 	stw	r2,0(sp)
 400e160:	e13ffa17 	ldw	r4,-24(fp)
 400e164:	e17ff517 	ldw	r5,-44(fp)
 400e168:	e1bffb17 	ldw	r6,-20(fp)
 400e16c:	e1fffc17 	ldw	r7,-16(fp)
 400e170:	183ee83a 	callr	r3
 400e174:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 400e178:	e0fffd17 	ldw	r3,-12(fp)
 400e17c:	e0bff617 	ldw	r2,-40(fp)
 400e180:	18802f26 	beq	r3,r2,400e240 <alt_epcs_flash_write+0x268>
 400e184:	e0bff917 	ldw	r2,-28(fp)
 400e188:	1004c03a 	cmpne	r2,r2,zero
 400e18c:	10002c1e 	bne	r2,zero,400e240 <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
 400e190:	e0fffd17 	ldw	r3,-12(fp)
 400e194:	e0bff617 	ldw	r2,-40(fp)
 400e198:	1885c83a 	sub	r2,r3,r2
 400e19c:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 400e1a0:	e0bff817 	ldw	r2,-32(fp)
 400e1a4:	e0fffa17 	ldw	r3,-24(fp)
 400e1a8:	1004913a 	slli	r2,r2,4
 400e1ac:	10c5883a 	add	r2,r2,r3
 400e1b0:	10801004 	addi	r2,r2,64
 400e1b4:	10c00017 	ldw	r3,0(r2)
 400e1b8:	e0bff517 	ldw	r2,-44(fp)
 400e1bc:	1885883a 	add	r2,r3,r2
 400e1c0:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 400e1c4:	e0fffc17 	ldw	r3,-16(fp)
 400e1c8:	e0bff617 	ldw	r2,-40(fp)
 400e1cc:	1885883a 	add	r2,r3,r2
 400e1d0:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 400e1d4:	e0bff817 	ldw	r2,-32(fp)
 400e1d8:	e0fffa17 	ldw	r3,-24(fp)
 400e1dc:	1004913a 	slli	r2,r2,4
 400e1e0:	10c5883a 	add	r2,r2,r3
 400e1e4:	10801004 	addi	r2,r2,64
 400e1e8:	10c00017 	ldw	r3,0(r2)
 400e1ec:	e0bff517 	ldw	r2,-44(fp)
 400e1f0:	10c5883a 	add	r2,r2,r3
 400e1f4:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 400e1f8:	e0bff717 	ldw	r2,-36(fp)
 400e1fc:	10800044 	addi	r2,r2,1
 400e200:	e0bff715 	stw	r2,-36(fp)
 400e204:	e0bff817 	ldw	r2,-32(fp)
 400e208:	e0fffa17 	ldw	r3,-24(fp)
 400e20c:	1004913a 	slli	r2,r2,4
 400e210:	10c5883a 	add	r2,r2,r3
 400e214:	10800f04 	addi	r2,r2,60
 400e218:	10c00017 	ldw	r3,0(r2)
 400e21c:	e0bff717 	ldw	r2,-36(fp)
 400e220:	10ff9816 	blt	r2,r3,400e084 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 400e224:	e0bff817 	ldw	r2,-32(fp)
 400e228:	10800044 	addi	r2,r2,1
 400e22c:	e0bff815 	stw	r2,-32(fp)
 400e230:	e0bffa17 	ldw	r2,-24(fp)
 400e234:	10c00c17 	ldw	r3,48(r2)
 400e238:	e0bff817 	ldw	r2,-32(fp)
 400e23c:	10ff7116 	blt	r2,r3,400e004 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 400e240:	e0bff917 	ldw	r2,-28(fp)
}
 400e244:	e037883a 	mov	sp,fp
 400e248:	dfc00117 	ldw	ra,4(sp)
 400e24c:	df000017 	ldw	fp,0(sp)
 400e250:	dec00204 	addi	sp,sp,8
 400e254:	f800283a 	ret

0400e258 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 400e258:	defffa04 	addi	sp,sp,-24
 400e25c:	df000515 	stw	fp,20(sp)
 400e260:	df000504 	addi	fp,sp,20
 400e264:	e13ffd15 	stw	r4,-12(fp)
 400e268:	e17ffe15 	stw	r5,-8(fp)
 400e26c:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 400e270:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 400e274:	e0bffd17 	ldw	r2,-12(fp)
 400e278:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
 400e27c:	e0bffb17 	ldw	r2,-20(fp)
 400e280:	10c00c17 	ldw	r3,48(r2)
 400e284:	e0bfff17 	ldw	r2,-4(fp)
 400e288:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 400e28c:	e0bffb17 	ldw	r2,-20(fp)
 400e290:	10800c17 	ldw	r2,48(r2)
 400e294:	1004c03a 	cmpne	r2,r2,zero
 400e298:	1000031e 	bne	r2,zero,400e2a8 <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
 400e29c:	00bffec4 	movi	r2,-5
 400e2a0:	e0bffc15 	stw	r2,-16(fp)
 400e2a4:	00000b06 	br	400e2d4 <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 400e2a8:	e0bffb17 	ldw	r2,-20(fp)
 400e2ac:	10800c17 	ldw	r2,48(r2)
 400e2b0:	10800250 	cmplti	r2,r2,9
 400e2b4:	1000031e 	bne	r2,zero,400e2c4 <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
 400e2b8:	00bffd04 	movi	r2,-12
 400e2bc:	e0bffc15 	stw	r2,-16(fp)
 400e2c0:	00000406 	br	400e2d4 <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
 400e2c4:	e0bffb17 	ldw	r2,-20(fp)
 400e2c8:	10c00d04 	addi	r3,r2,52
 400e2cc:	e0bffe17 	ldw	r2,-8(fp)
 400e2d0:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 400e2d4:	e0bffc17 	ldw	r2,-16(fp)
}
 400e2d8:	e037883a 	mov	sp,fp
 400e2dc:	df000017 	ldw	fp,0(sp)
 400e2e0:	dec00104 	addi	sp,sp,4
 400e2e4:	f800283a 	ret

0400e2e8 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 400e2e8:	defffa04 	addi	sp,sp,-24
 400e2ec:	dfc00515 	stw	ra,20(sp)
 400e2f0:	df000415 	stw	fp,16(sp)
 400e2f4:	df000404 	addi	fp,sp,16
 400e2f8:	e13ffe15 	stw	r4,-8(fp)
 400e2fc:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 400e300:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 400e304:	e0bffe17 	ldw	r2,-8(fp)
 400e308:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 400e30c:	e13ffe17 	ldw	r4,-8(fp)
 400e310:	e17fff17 	ldw	r5,-4(fp)
 400e314:	400e3580 	call	400e358 <alt_epcs_test_address>
 400e318:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
 400e31c:	e0bffd17 	ldw	r2,-12(fp)
 400e320:	1004803a 	cmplt	r2,r2,zero
 400e324:	1000061e 	bne	r2,zero,400e340 <alt_epcs_flash_erase_block+0x58>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 400e328:	e0bffc17 	ldw	r2,-16(fp)
 400e32c:	11002d17 	ldw	r4,180(r2)
 400e330:	e17fff17 	ldw	r5,-4(fp)
 400e334:	e0bffc17 	ldw	r2,-16(fp)
 400e338:	11803117 	ldw	r6,196(r2)
 400e33c:	400f2e40 	call	400f2e4 <epcs_sector_erase>
  }
  return ret_code;
 400e340:	e0bffd17 	ldw	r2,-12(fp)
}
 400e344:	e037883a 	mov	sp,fp
 400e348:	dfc00117 	ldw	ra,4(sp)
 400e34c:	df000017 	ldw	fp,0(sp)
 400e350:	dec00204 	addi	sp,sp,8
 400e354:	f800283a 	ret

0400e358 <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 400e358:	defff904 	addi	sp,sp,-28
 400e35c:	df000615 	stw	fp,24(sp)
 400e360:	df000604 	addi	fp,sp,24
 400e364:	e13ffe15 	stw	r4,-8(fp)
 400e368:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 400e36c:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 400e370:	e0bffe17 	ldw	r2,-8(fp)
 400e374:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 400e378:	e0bffc17 	ldw	r2,-16(fp)
 400e37c:	10800c17 	ldw	r2,48(r2)
 400e380:	10bfffc4 	addi	r2,r2,-1
 400e384:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 400e388:	e0bffb17 	ldw	r2,-20(fp)
 400e38c:	e0fffc17 	ldw	r3,-16(fp)
 400e390:	1004913a 	slli	r2,r2,4
 400e394:	10c5883a 	add	r2,r2,r3
 400e398:	10800d04 	addi	r2,r2,52
 400e39c:	11000017 	ldw	r4,0(r2)
 400e3a0:	e0bffb17 	ldw	r2,-20(fp)
 400e3a4:	e0fffc17 	ldw	r3,-16(fp)
 400e3a8:	1004913a 	slli	r2,r2,4
 400e3ac:	10c5883a 	add	r2,r2,r3
 400e3b0:	10800e04 	addi	r2,r2,56
 400e3b4:	10800017 	ldw	r2,0(r2)
 400e3b8:	2085883a 	add	r2,r4,r2
 400e3bc:	10bfffc4 	addi	r2,r2,-1
 400e3c0:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
 400e3c4:	e0ffff17 	ldw	r3,-4(fp)
 400e3c8:	e0bffa17 	ldw	r2,-24(fp)
 400e3cc:	10c0022e 	bgeu	r2,r3,400e3d8 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 400e3d0:	00bffec4 	movi	r2,-5
 400e3d4:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
 400e3d8:	e0bffd17 	ldw	r2,-12(fp)
}
 400e3dc:	e037883a 	mov	sp,fp
 400e3e0:	df000017 	ldw	fp,0(sp)
 400e3e4:	dec00104 	addi	sp,sp,4
 400e3e8:	f800283a 	ret

0400e3ec <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 400e3ec:	defff204 	addi	sp,sp,-56
 400e3f0:	dfc00d15 	stw	ra,52(sp)
 400e3f4:	df000c15 	stw	fp,48(sp)
 400e3f8:	df000c04 	addi	fp,sp,48
 400e3fc:	e13ffa15 	stw	r4,-24(fp)
 400e400:	e17ffb15 	stw	r5,-20(fp)
 400e404:	e1bffc15 	stw	r6,-16(fp)
 400e408:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 400e40c:	e0bffa17 	ldw	r2,-24(fp)
 400e410:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 400e414:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 400e418:	e13ffa17 	ldw	r4,-24(fp)
 400e41c:	e17ffc17 	ldw	r5,-16(fp)
 400e420:	400e3580 	call	400e358 <alt_epcs_test_address>
 400e424:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 400e428:	e0bff917 	ldw	r2,-28(fp)
 400e42c:	1004803a 	cmplt	r2,r2,zero
 400e430:	10002f1e 	bne	r2,zero,400e4f0 <alt_epcs_flash_write_block+0x104>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 400e434:	00002b06 	br	400e4e4 <alt_epcs_flash_write_block+0xf8>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 400e438:	e0bff817 	ldw	r2,-32(fp)
 400e43c:	10c03017 	ldw	r3,192(r2)
 400e440:	e0bffc17 	ldw	r2,-16(fp)
 400e444:	1887883a 	add	r3,r3,r2
 400e448:	e0bff817 	ldw	r2,-32(fp)
 400e44c:	10803017 	ldw	r2,192(r2)
 400e450:	0085c83a 	sub	r2,zero,r2
 400e454:	1884703a 	and	r2,r3,r2
 400e458:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 400e45c:	e0fff517 	ldw	r3,-44(fp)
 400e460:	e0bffc17 	ldw	r2,-16(fp)
 400e464:	1885c83a 	sub	r2,r3,r2
 400e468:	e0c00217 	ldw	r3,8(fp)
 400e46c:	e0ffff15 	stw	r3,-4(fp)
 400e470:	e0bffe15 	stw	r2,-8(fp)
 400e474:	e0bfff17 	ldw	r2,-4(fp)
 400e478:	e0fffe17 	ldw	r3,-8(fp)
 400e47c:	10c0020e 	bge	r2,r3,400e488 <alt_epcs_flash_write_block+0x9c>
 400e480:	e0bfff17 	ldw	r2,-4(fp)
 400e484:	e0bffe15 	stw	r2,-8(fp)
 400e488:	e0fffe17 	ldw	r3,-8(fp)
 400e48c:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 400e490:	e0bff817 	ldw	r2,-32(fp)
 400e494:	11002d17 	ldw	r4,180(r2)
 400e498:	e0fffd17 	ldw	r3,-12(fp)
 400e49c:	e0bff717 	ldw	r2,-36(fp)
 400e4a0:	188d883a 	add	r6,r3,r2
 400e4a4:	e0bff817 	ldw	r2,-32(fp)
 400e4a8:	10803117 	ldw	r2,196(r2)
 400e4ac:	d8800015 	stw	r2,0(sp)
 400e4b0:	e17ffc17 	ldw	r5,-16(fp)
 400e4b4:	e1fff617 	ldw	r7,-40(fp)
 400e4b8:	400f64c0 	call	400f64c <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 400e4bc:	e0c00217 	ldw	r3,8(fp)
 400e4c0:	e0bff617 	ldw	r2,-40(fp)
 400e4c4:	1885c83a 	sub	r2,r3,r2
 400e4c8:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 400e4cc:	e0fff717 	ldw	r3,-36(fp)
 400e4d0:	e0bff617 	ldw	r2,-40(fp)
 400e4d4:	1885883a 	add	r2,r3,r2
 400e4d8:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 400e4dc:	e0bff517 	ldw	r2,-44(fp)
 400e4e0:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 400e4e4:	e0800217 	ldw	r2,8(fp)
 400e4e8:	1004c03a 	cmpne	r2,r2,zero
 400e4ec:	103fd21e 	bne	r2,zero,400e438 <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 400e4f0:	e0bff917 	ldw	r2,-28(fp)
}
 400e4f4:	e037883a 	mov	sp,fp
 400e4f8:	dfc00117 	ldw	ra,4(sp)
 400e4fc:	df000017 	ldw	fp,0(sp)
 400e500:	dec00204 	addi	sp,sp,8
 400e504:	f800283a 	ret

0400e508 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 400e508:	defff704 	addi	sp,sp,-36
 400e50c:	dfc00815 	stw	ra,32(sp)
 400e510:	df000715 	stw	fp,28(sp)
 400e514:	df000704 	addi	fp,sp,28
 400e518:	e13ffc15 	stw	r4,-16(fp)
 400e51c:	e17ffd15 	stw	r5,-12(fp)
 400e520:	e1bffe15 	stw	r6,-8(fp)
 400e524:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 400e528:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 400e52c:	e0bffc17 	ldw	r2,-16(fp)
 400e530:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 400e534:	e13ffc17 	ldw	r4,-16(fp)
 400e538:	e17ffd17 	ldw	r5,-12(fp)
 400e53c:	400e3580 	call	400e358 <alt_epcs_test_address>
 400e540:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
 400e544:	e0bffb17 	ldw	r2,-20(fp)
 400e548:	1004803a 	cmplt	r2,r2,zero
 400e54c:	10000e1e 	bne	r2,zero,400e588 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 400e550:	e0bffa17 	ldw	r2,-24(fp)
 400e554:	11002d17 	ldw	r4,180(r2)
 400e558:	e1bffe17 	ldw	r6,-8(fp)
 400e55c:	e0bffa17 	ldw	r2,-24(fp)
 400e560:	10803117 	ldw	r2,196(r2)
 400e564:	d8800015 	stw	r2,0(sp)
 400e568:	e17ffd17 	ldw	r5,-12(fp)
 400e56c:	e1ffff17 	ldw	r7,-4(fp)
 400e570:	400f44c0 	call	400f44c <epcs_read_buffer>
 400e574:	e0bffb15 	stw	r2,-20(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 400e578:	e0fffb17 	ldw	r3,-20(fp)
 400e57c:	e0bfff17 	ldw	r2,-4(fp)
 400e580:	1880011e 	bne	r3,r2,400e588 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 400e584:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
 400e588:	e0bffb17 	ldw	r2,-20(fp)
}
 400e58c:	e037883a 	mov	sp,fp
 400e590:	dfc00117 	ldw	ra,4(sp)
 400e594:	df000017 	ldw	fp,0(sp)
 400e598:	dec00204 	addi	sp,sp,8
 400e59c:	f800283a 	ret

0400e5a0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400e5a0:	defffa04 	addi	sp,sp,-24
 400e5a4:	dfc00515 	stw	ra,20(sp)
 400e5a8:	df000415 	stw	fp,16(sp)
 400e5ac:	df000404 	addi	fp,sp,16
 400e5b0:	e13ffd15 	stw	r4,-12(fp)
 400e5b4:	e17ffe15 	stw	r5,-8(fp)
 400e5b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400e5bc:	e0bffd17 	ldw	r2,-12(fp)
 400e5c0:	10800017 	ldw	r2,0(r2)
 400e5c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400e5c8:	e0bffc17 	ldw	r2,-16(fp)
 400e5cc:	11000a04 	addi	r4,r2,40
 400e5d0:	e0bffd17 	ldw	r2,-12(fp)
 400e5d4:	11c00217 	ldw	r7,8(r2)
 400e5d8:	e17ffe17 	ldw	r5,-8(fp)
 400e5dc:	e1bfff17 	ldw	r6,-4(fp)
 400e5e0:	400ebe80 	call	400ebe8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400e5e4:	e037883a 	mov	sp,fp
 400e5e8:	dfc00117 	ldw	ra,4(sp)
 400e5ec:	df000017 	ldw	fp,0(sp)
 400e5f0:	dec00204 	addi	sp,sp,8
 400e5f4:	f800283a 	ret

0400e5f8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400e5f8:	defffa04 	addi	sp,sp,-24
 400e5fc:	dfc00515 	stw	ra,20(sp)
 400e600:	df000415 	stw	fp,16(sp)
 400e604:	df000404 	addi	fp,sp,16
 400e608:	e13ffd15 	stw	r4,-12(fp)
 400e60c:	e17ffe15 	stw	r5,-8(fp)
 400e610:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400e614:	e0bffd17 	ldw	r2,-12(fp)
 400e618:	10800017 	ldw	r2,0(r2)
 400e61c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400e620:	e0bffc17 	ldw	r2,-16(fp)
 400e624:	11000a04 	addi	r4,r2,40
 400e628:	e0bffd17 	ldw	r2,-12(fp)
 400e62c:	11c00217 	ldw	r7,8(r2)
 400e630:	e17ffe17 	ldw	r5,-8(fp)
 400e634:	e1bfff17 	ldw	r6,-4(fp)
 400e638:	400ee0c0 	call	400ee0c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400e63c:	e037883a 	mov	sp,fp
 400e640:	dfc00117 	ldw	ra,4(sp)
 400e644:	df000017 	ldw	fp,0(sp)
 400e648:	dec00204 	addi	sp,sp,8
 400e64c:	f800283a 	ret

0400e650 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 400e650:	defffc04 	addi	sp,sp,-16
 400e654:	dfc00315 	stw	ra,12(sp)
 400e658:	df000215 	stw	fp,8(sp)
 400e65c:	df000204 	addi	fp,sp,8
 400e660:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400e664:	e0bfff17 	ldw	r2,-4(fp)
 400e668:	10800017 	ldw	r2,0(r2)
 400e66c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 400e670:	e0bffe17 	ldw	r2,-8(fp)
 400e674:	11000a04 	addi	r4,r2,40
 400e678:	e0bfff17 	ldw	r2,-4(fp)
 400e67c:	11400217 	ldw	r5,8(r2)
 400e680:	400ea800 	call	400ea80 <altera_avalon_jtag_uart_close>
}
 400e684:	e037883a 	mov	sp,fp
 400e688:	dfc00117 	ldw	ra,4(sp)
 400e68c:	df000017 	ldw	fp,0(sp)
 400e690:	dec00204 	addi	sp,sp,8
 400e694:	f800283a 	ret

0400e698 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400e698:	defffa04 	addi	sp,sp,-24
 400e69c:	dfc00515 	stw	ra,20(sp)
 400e6a0:	df000415 	stw	fp,16(sp)
 400e6a4:	df000404 	addi	fp,sp,16
 400e6a8:	e13ffd15 	stw	r4,-12(fp)
 400e6ac:	e17ffe15 	stw	r5,-8(fp)
 400e6b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400e6b4:	e0bffd17 	ldw	r2,-12(fp)
 400e6b8:	10800017 	ldw	r2,0(r2)
 400e6bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400e6c0:	e0bffc17 	ldw	r2,-16(fp)
 400e6c4:	11000a04 	addi	r4,r2,40
 400e6c8:	e17ffe17 	ldw	r5,-8(fp)
 400e6cc:	e1bfff17 	ldw	r6,-4(fp)
 400e6d0:	400eaf40 	call	400eaf4 <altera_avalon_jtag_uart_ioctl>
}
 400e6d4:	e037883a 	mov	sp,fp
 400e6d8:	dfc00117 	ldw	ra,4(sp)
 400e6dc:	df000017 	ldw	fp,0(sp)
 400e6e0:	dec00204 	addi	sp,sp,8
 400e6e4:	f800283a 	ret

0400e6e8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400e6e8:	defffa04 	addi	sp,sp,-24
 400e6ec:	dfc00515 	stw	ra,20(sp)
 400e6f0:	df000415 	stw	fp,16(sp)
 400e6f4:	df000404 	addi	fp,sp,16
 400e6f8:	e13ffd15 	stw	r4,-12(fp)
 400e6fc:	e17ffe15 	stw	r5,-8(fp)
 400e700:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400e704:	e0fffd17 	ldw	r3,-12(fp)
 400e708:	00800044 	movi	r2,1
 400e70c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400e710:	e0bffd17 	ldw	r2,-12(fp)
 400e714:	10800017 	ldw	r2,0(r2)
 400e718:	11000104 	addi	r4,r2,4
 400e71c:	e0bffd17 	ldw	r2,-12(fp)
 400e720:	10800817 	ldw	r2,32(r2)
 400e724:	1007883a 	mov	r3,r2
 400e728:	2005883a 	mov	r2,r4
 400e72c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 400e730:	e13ffe17 	ldw	r4,-8(fp)
 400e734:	e17fff17 	ldw	r5,-4(fp)
 400e738:	d8000015 	stw	zero,0(sp)
 400e73c:	01810074 	movhi	r6,1025
 400e740:	31b9ea04 	addi	r6,r6,-6232
 400e744:	e1fffd17 	ldw	r7,-12(fp)
 400e748:	40101100 	call	4010110 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400e74c:	e0bffd17 	ldw	r2,-12(fp)
 400e750:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 400e754:	e0bffd17 	ldw	r2,-12(fp)
 400e758:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400e75c:	00810074 	movhi	r2,1025
 400e760:	108c1304 	addi	r2,r2,12364
 400e764:	10800017 	ldw	r2,0(r2)
 400e768:	100b883a 	mov	r5,r2
 400e76c:	01810074 	movhi	r6,1025
 400e770:	31ba7404 	addi	r6,r6,-5680
 400e774:	e1fffd17 	ldw	r7,-12(fp)
 400e778:	400f9580 	call	400f958 <alt_alarm_start>
 400e77c:	1004403a 	cmpge	r2,r2,zero
 400e780:	1000041e 	bne	r2,zero,400e794 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 400e784:	e0fffd17 	ldw	r3,-12(fp)
 400e788:	00a00034 	movhi	r2,32768
 400e78c:	10bfffc4 	addi	r2,r2,-1
 400e790:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 400e794:	e037883a 	mov	sp,fp
 400e798:	dfc00117 	ldw	ra,4(sp)
 400e79c:	df000017 	ldw	fp,0(sp)
 400e7a0:	dec00204 	addi	sp,sp,8
 400e7a4:	f800283a 	ret

0400e7a8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 400e7a8:	defff804 	addi	sp,sp,-32
 400e7ac:	df000715 	stw	fp,28(sp)
 400e7b0:	df000704 	addi	fp,sp,28
 400e7b4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 400e7b8:	e0bfff17 	ldw	r2,-4(fp)
 400e7bc:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 400e7c0:	e0bffe17 	ldw	r2,-8(fp)
 400e7c4:	10800017 	ldw	r2,0(r2)
 400e7c8:	e0bffd15 	stw	r2,-12(fp)
 400e7cc:	00000006 	br	400e7d0 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400e7d0:	e0bffd17 	ldw	r2,-12(fp)
 400e7d4:	10800104 	addi	r2,r2,4
 400e7d8:	10800037 	ldwio	r2,0(r2)
 400e7dc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400e7e0:	e0bffc17 	ldw	r2,-16(fp)
 400e7e4:	1080c00c 	andi	r2,r2,768
 400e7e8:	1005003a 	cmpeq	r2,r2,zero
 400e7ec:	1000741e 	bne	r2,zero,400e9c0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 400e7f0:	e0bffc17 	ldw	r2,-16(fp)
 400e7f4:	1080400c 	andi	r2,r2,256
 400e7f8:	1005003a 	cmpeq	r2,r2,zero
 400e7fc:	1000351e 	bne	r2,zero,400e8d4 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 400e800:	00800074 	movhi	r2,1
 400e804:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400e808:	e0bffe17 	ldw	r2,-8(fp)
 400e80c:	10800a17 	ldw	r2,40(r2)
 400e810:	10800044 	addi	r2,r2,1
 400e814:	1081ffcc 	andi	r2,r2,2047
 400e818:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 400e81c:	e0bffe17 	ldw	r2,-8(fp)
 400e820:	10c00b17 	ldw	r3,44(r2)
 400e824:	e0bffa17 	ldw	r2,-24(fp)
 400e828:	18801626 	beq	r3,r2,400e884 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400e82c:	e0bffd17 	ldw	r2,-12(fp)
 400e830:	10800037 	ldwio	r2,0(r2)
 400e834:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400e838:	e0bffb17 	ldw	r2,-20(fp)
 400e83c:	10a0000c 	andi	r2,r2,32768
 400e840:	1005003a 	cmpeq	r2,r2,zero
 400e844:	10000f1e 	bne	r2,zero,400e884 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400e848:	e0bffe17 	ldw	r2,-8(fp)
 400e84c:	10c00a17 	ldw	r3,40(r2)
 400e850:	e0bffb17 	ldw	r2,-20(fp)
 400e854:	1009883a 	mov	r4,r2
 400e858:	e0bffe17 	ldw	r2,-8(fp)
 400e85c:	1885883a 	add	r2,r3,r2
 400e860:	10800e04 	addi	r2,r2,56
 400e864:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400e868:	e0bffe17 	ldw	r2,-8(fp)
 400e86c:	10800a17 	ldw	r2,40(r2)
 400e870:	10800044 	addi	r2,r2,1
 400e874:	10c1ffcc 	andi	r3,r2,2047
 400e878:	e0bffe17 	ldw	r2,-8(fp)
 400e87c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 400e880:	003fe106 	br	400e808 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 400e884:	e0bffb17 	ldw	r2,-20(fp)
 400e888:	10bfffec 	andhi	r2,r2,65535
 400e88c:	1005003a 	cmpeq	r2,r2,zero
 400e890:	1000101e 	bne	r2,zero,400e8d4 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400e894:	e0bffe17 	ldw	r2,-8(fp)
 400e898:	10c00817 	ldw	r3,32(r2)
 400e89c:	00bfff84 	movi	r2,-2
 400e8a0:	1886703a 	and	r3,r3,r2
 400e8a4:	e0bffe17 	ldw	r2,-8(fp)
 400e8a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 400e8ac:	e0bffd17 	ldw	r2,-12(fp)
 400e8b0:	11000104 	addi	r4,r2,4
 400e8b4:	e0bffe17 	ldw	r2,-8(fp)
 400e8b8:	10800817 	ldw	r2,32(r2)
 400e8bc:	1007883a 	mov	r3,r2
 400e8c0:	2005883a 	mov	r2,r4
 400e8c4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400e8c8:	e0bffd17 	ldw	r2,-12(fp)
 400e8cc:	10800104 	addi	r2,r2,4
 400e8d0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 400e8d4:	e0bffc17 	ldw	r2,-16(fp)
 400e8d8:	1080800c 	andi	r2,r2,512
 400e8dc:	1005003a 	cmpeq	r2,r2,zero
 400e8e0:	103fbb1e 	bne	r2,zero,400e7d0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 400e8e4:	e0bffc17 	ldw	r2,-16(fp)
 400e8e8:	10bfffec 	andhi	r2,r2,65535
 400e8ec:	1004d43a 	srli	r2,r2,16
 400e8f0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 400e8f4:	00001506 	br	400e94c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 400e8f8:	e13ffd17 	ldw	r4,-12(fp)
 400e8fc:	e0bffe17 	ldw	r2,-8(fp)
 400e900:	10c00d17 	ldw	r3,52(r2)
 400e904:	e0bffe17 	ldw	r2,-8(fp)
 400e908:	1885883a 	add	r2,r3,r2
 400e90c:	10820e04 	addi	r2,r2,2104
 400e910:	10800003 	ldbu	r2,0(r2)
 400e914:	10c03fcc 	andi	r3,r2,255
 400e918:	18c0201c 	xori	r3,r3,128
 400e91c:	18ffe004 	addi	r3,r3,-128
 400e920:	2005883a 	mov	r2,r4
 400e924:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400e928:	e0bffe17 	ldw	r2,-8(fp)
 400e92c:	10800d17 	ldw	r2,52(r2)
 400e930:	10800044 	addi	r2,r2,1
 400e934:	10c1ffcc 	andi	r3,r2,2047
 400e938:	e0bffe17 	ldw	r2,-8(fp)
 400e93c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 400e940:	e0bff917 	ldw	r2,-28(fp)
 400e944:	10bfffc4 	addi	r2,r2,-1
 400e948:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 400e94c:	e0bff917 	ldw	r2,-28(fp)
 400e950:	1005003a 	cmpeq	r2,r2,zero
 400e954:	1000051e 	bne	r2,zero,400e96c <altera_avalon_jtag_uart_irq+0x1c4>
 400e958:	e0bffe17 	ldw	r2,-8(fp)
 400e95c:	10c00d17 	ldw	r3,52(r2)
 400e960:	e0bffe17 	ldw	r2,-8(fp)
 400e964:	10800c17 	ldw	r2,48(r2)
 400e968:	18bfe31e 	bne	r3,r2,400e8f8 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 400e96c:	e0bff917 	ldw	r2,-28(fp)
 400e970:	1005003a 	cmpeq	r2,r2,zero
 400e974:	103f961e 	bne	r2,zero,400e7d0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400e978:	e0bffe17 	ldw	r2,-8(fp)
 400e97c:	10c00817 	ldw	r3,32(r2)
 400e980:	00bfff44 	movi	r2,-3
 400e984:	1886703a 	and	r3,r3,r2
 400e988:	e0bffe17 	ldw	r2,-8(fp)
 400e98c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400e990:	e0bffe17 	ldw	r2,-8(fp)
 400e994:	10800017 	ldw	r2,0(r2)
 400e998:	11000104 	addi	r4,r2,4
 400e99c:	e0bffe17 	ldw	r2,-8(fp)
 400e9a0:	10800817 	ldw	r2,32(r2)
 400e9a4:	1007883a 	mov	r3,r2
 400e9a8:	2005883a 	mov	r2,r4
 400e9ac:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400e9b0:	e0bffd17 	ldw	r2,-12(fp)
 400e9b4:	10800104 	addi	r2,r2,4
 400e9b8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 400e9bc:	003f8406 	br	400e7d0 <altera_avalon_jtag_uart_irq+0x28>
}
 400e9c0:	e037883a 	mov	sp,fp
 400e9c4:	df000017 	ldw	fp,0(sp)
 400e9c8:	dec00104 	addi	sp,sp,4
 400e9cc:	f800283a 	ret

0400e9d0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 400e9d0:	defffc04 	addi	sp,sp,-16
 400e9d4:	df000315 	stw	fp,12(sp)
 400e9d8:	df000304 	addi	fp,sp,12
 400e9dc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 400e9e0:	e0bfff17 	ldw	r2,-4(fp)
 400e9e4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 400e9e8:	e0bffe17 	ldw	r2,-8(fp)
 400e9ec:	10800017 	ldw	r2,0(r2)
 400e9f0:	10800104 	addi	r2,r2,4
 400e9f4:	10800037 	ldwio	r2,0(r2)
 400e9f8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 400e9fc:	e0bffd17 	ldw	r2,-12(fp)
 400ea00:	1081000c 	andi	r2,r2,1024
 400ea04:	1005003a 	cmpeq	r2,r2,zero
 400ea08:	10000c1e 	bne	r2,zero,400ea3c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400ea0c:	e0bffe17 	ldw	r2,-8(fp)
 400ea10:	10800017 	ldw	r2,0(r2)
 400ea14:	11000104 	addi	r4,r2,4
 400ea18:	e0bffe17 	ldw	r2,-8(fp)
 400ea1c:	10800817 	ldw	r2,32(r2)
 400ea20:	10810014 	ori	r2,r2,1024
 400ea24:	1007883a 	mov	r3,r2
 400ea28:	2005883a 	mov	r2,r4
 400ea2c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 400ea30:	e0bffe17 	ldw	r2,-8(fp)
 400ea34:	10000915 	stw	zero,36(r2)
 400ea38:	00000a06 	br	400ea64 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 400ea3c:	e0bffe17 	ldw	r2,-8(fp)
 400ea40:	10c00917 	ldw	r3,36(r2)
 400ea44:	00a00034 	movhi	r2,32768
 400ea48:	10bfff04 	addi	r2,r2,-4
 400ea4c:	10c00536 	bltu	r2,r3,400ea64 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 400ea50:	e0bffe17 	ldw	r2,-8(fp)
 400ea54:	10800917 	ldw	r2,36(r2)
 400ea58:	10c00044 	addi	r3,r2,1
 400ea5c:	e0bffe17 	ldw	r2,-8(fp)
 400ea60:	10c00915 	stw	r3,36(r2)
 400ea64:	00810074 	movhi	r2,1025
 400ea68:	108c1304 	addi	r2,r2,12364
 400ea6c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 400ea70:	e037883a 	mov	sp,fp
 400ea74:	df000017 	ldw	fp,0(sp)
 400ea78:	dec00104 	addi	sp,sp,4
 400ea7c:	f800283a 	ret

0400ea80 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 400ea80:	defffc04 	addi	sp,sp,-16
 400ea84:	df000315 	stw	fp,12(sp)
 400ea88:	df000304 	addi	fp,sp,12
 400ea8c:	e13ffd15 	stw	r4,-12(fp)
 400ea90:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400ea94:	00000706 	br	400eab4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 400ea98:	e0bffe17 	ldw	r2,-8(fp)
 400ea9c:	1090000c 	andi	r2,r2,16384
 400eaa0:	1005003a 	cmpeq	r2,r2,zero
 400eaa4:	1000031e 	bne	r2,zero,400eab4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 400eaa8:	00bffd44 	movi	r2,-11
 400eaac:	e0bfff15 	stw	r2,-4(fp)
 400eab0:	00000b06 	br	400eae0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400eab4:	e0bffd17 	ldw	r2,-12(fp)
 400eab8:	10c00d17 	ldw	r3,52(r2)
 400eabc:	e0bffd17 	ldw	r2,-12(fp)
 400eac0:	10800c17 	ldw	r2,48(r2)
 400eac4:	18800526 	beq	r3,r2,400eadc <altera_avalon_jtag_uart_close+0x5c>
 400eac8:	e0bffd17 	ldw	r2,-12(fp)
 400eacc:	10c00917 	ldw	r3,36(r2)
 400ead0:	e0bffd17 	ldw	r2,-12(fp)
 400ead4:	10800117 	ldw	r2,4(r2)
 400ead8:	18bfef36 	bltu	r3,r2,400ea98 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 400eadc:	e03fff15 	stw	zero,-4(fp)
 400eae0:	e0bfff17 	ldw	r2,-4(fp)
}
 400eae4:	e037883a 	mov	sp,fp
 400eae8:	df000017 	ldw	fp,0(sp)
 400eaec:	dec00104 	addi	sp,sp,4
 400eaf0:	f800283a 	ret

0400eaf4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 400eaf4:	defff804 	addi	sp,sp,-32
 400eaf8:	df000715 	stw	fp,28(sp)
 400eafc:	df000704 	addi	fp,sp,28
 400eb00:	e13ffb15 	stw	r4,-20(fp)
 400eb04:	e17ffc15 	stw	r5,-16(fp)
 400eb08:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 400eb0c:	00bff9c4 	movi	r2,-25
 400eb10:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 400eb14:	e0bffc17 	ldw	r2,-16(fp)
 400eb18:	e0bfff15 	stw	r2,-4(fp)
 400eb1c:	e0ffff17 	ldw	r3,-4(fp)
 400eb20:	189a8060 	cmpeqi	r2,r3,27137
 400eb24:	1000041e 	bne	r2,zero,400eb38 <altera_avalon_jtag_uart_ioctl+0x44>
 400eb28:	e0ffff17 	ldw	r3,-4(fp)
 400eb2c:	189a80a0 	cmpeqi	r2,r3,27138
 400eb30:	10001b1e 	bne	r2,zero,400eba0 <altera_avalon_jtag_uart_ioctl+0xac>
 400eb34:	00002706 	br	400ebd4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 400eb38:	e0bffb17 	ldw	r2,-20(fp)
 400eb3c:	10c00117 	ldw	r3,4(r2)
 400eb40:	00a00034 	movhi	r2,32768
 400eb44:	10bfffc4 	addi	r2,r2,-1
 400eb48:	18802226 	beq	r3,r2,400ebd4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 400eb4c:	e0bffd17 	ldw	r2,-12(fp)
 400eb50:	10800017 	ldw	r2,0(r2)
 400eb54:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 400eb58:	e0bff917 	ldw	r2,-28(fp)
 400eb5c:	10800090 	cmplti	r2,r2,2
 400eb60:	1000071e 	bne	r2,zero,400eb80 <altera_avalon_jtag_uart_ioctl+0x8c>
 400eb64:	e0fff917 	ldw	r3,-28(fp)
 400eb68:	00a00034 	movhi	r2,32768
 400eb6c:	10bfffc4 	addi	r2,r2,-1
 400eb70:	18800326 	beq	r3,r2,400eb80 <altera_avalon_jtag_uart_ioctl+0x8c>
 400eb74:	e0bff917 	ldw	r2,-28(fp)
 400eb78:	e0bffe15 	stw	r2,-8(fp)
 400eb7c:	00000306 	br	400eb8c <altera_avalon_jtag_uart_ioctl+0x98>
 400eb80:	00e00034 	movhi	r3,32768
 400eb84:	18ffff84 	addi	r3,r3,-2
 400eb88:	e0fffe15 	stw	r3,-8(fp)
 400eb8c:	e0bffb17 	ldw	r2,-20(fp)
 400eb90:	e0fffe17 	ldw	r3,-8(fp)
 400eb94:	10c00115 	stw	r3,4(r2)
      rc = 0;
 400eb98:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 400eb9c:	00000d06 	br	400ebd4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 400eba0:	e0bffb17 	ldw	r2,-20(fp)
 400eba4:	10c00117 	ldw	r3,4(r2)
 400eba8:	00a00034 	movhi	r2,32768
 400ebac:	10bfffc4 	addi	r2,r2,-1
 400ebb0:	18800826 	beq	r3,r2,400ebd4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 400ebb4:	e13ffd17 	ldw	r4,-12(fp)
 400ebb8:	e0bffb17 	ldw	r2,-20(fp)
 400ebbc:	10c00917 	ldw	r3,36(r2)
 400ebc0:	e0bffb17 	ldw	r2,-20(fp)
 400ebc4:	10800117 	ldw	r2,4(r2)
 400ebc8:	1885803a 	cmpltu	r2,r3,r2
 400ebcc:	20800015 	stw	r2,0(r4)
      rc = 0;
 400ebd0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 400ebd4:	e0bffa17 	ldw	r2,-24(fp)
}
 400ebd8:	e037883a 	mov	sp,fp
 400ebdc:	df000017 	ldw	fp,0(sp)
 400ebe0:	dec00104 	addi	sp,sp,4
 400ebe4:	f800283a 	ret

0400ebe8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 400ebe8:	defff204 	addi	sp,sp,-56
 400ebec:	dfc00d15 	stw	ra,52(sp)
 400ebf0:	df000c15 	stw	fp,48(sp)
 400ebf4:	df000c04 	addi	fp,sp,48
 400ebf8:	e13ffb15 	stw	r4,-20(fp)
 400ebfc:	e17ffc15 	stw	r5,-16(fp)
 400ec00:	e1bffd15 	stw	r6,-12(fp)
 400ec04:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 400ec08:	e0bffc17 	ldw	r2,-16(fp)
 400ec0c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400ec10:	00004806 	br	400ed34 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 400ec14:	e0bffb17 	ldw	r2,-20(fp)
 400ec18:	10800a17 	ldw	r2,40(r2)
 400ec1c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 400ec20:	e0bffb17 	ldw	r2,-20(fp)
 400ec24:	10800b17 	ldw	r2,44(r2)
 400ec28:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 400ec2c:	e0fff717 	ldw	r3,-36(fp)
 400ec30:	e0bff617 	ldw	r2,-40(fp)
 400ec34:	18800536 	bltu	r3,r2,400ec4c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 400ec38:	e0bff717 	ldw	r2,-36(fp)
 400ec3c:	e0fff617 	ldw	r3,-40(fp)
 400ec40:	10c5c83a 	sub	r2,r2,r3
 400ec44:	e0bff815 	stw	r2,-32(fp)
 400ec48:	00000406 	br	400ec5c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 400ec4c:	00820004 	movi	r2,2048
 400ec50:	e0fff617 	ldw	r3,-40(fp)
 400ec54:	10c5c83a 	sub	r2,r2,r3
 400ec58:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 400ec5c:	e0bff817 	ldw	r2,-32(fp)
 400ec60:	1005003a 	cmpeq	r2,r2,zero
 400ec64:	10001f1e 	bne	r2,zero,400ece4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 400ec68:	e0fffd17 	ldw	r3,-12(fp)
 400ec6c:	e0bff817 	ldw	r2,-32(fp)
 400ec70:	1880022e 	bgeu	r3,r2,400ec7c <altera_avalon_jtag_uart_read+0x94>
        n = space;
 400ec74:	e0bffd17 	ldw	r2,-12(fp)
 400ec78:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 400ec7c:	e0bffb17 	ldw	r2,-20(fp)
 400ec80:	10c00e04 	addi	r3,r2,56
 400ec84:	e0bff617 	ldw	r2,-40(fp)
 400ec88:	1887883a 	add	r3,r3,r2
 400ec8c:	e0bffa17 	ldw	r2,-24(fp)
 400ec90:	1009883a 	mov	r4,r2
 400ec94:	180b883a 	mov	r5,r3
 400ec98:	e1bff817 	ldw	r6,-32(fp)
 400ec9c:	4005cd80 	call	4005cd8 <memcpy>
      ptr   += n;
 400eca0:	e0fff817 	ldw	r3,-32(fp)
 400eca4:	e0bffa17 	ldw	r2,-24(fp)
 400eca8:	10c5883a 	add	r2,r2,r3
 400ecac:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 400ecb0:	e0fffd17 	ldw	r3,-12(fp)
 400ecb4:	e0bff817 	ldw	r2,-32(fp)
 400ecb8:	1885c83a 	sub	r2,r3,r2
 400ecbc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400ecc0:	e0fff617 	ldw	r3,-40(fp)
 400ecc4:	e0bff817 	ldw	r2,-32(fp)
 400ecc8:	1885883a 	add	r2,r3,r2
 400eccc:	10c1ffcc 	andi	r3,r2,2047
 400ecd0:	e0bffb17 	ldw	r2,-20(fp)
 400ecd4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 400ecd8:	e0bffd17 	ldw	r2,-12(fp)
 400ecdc:	10800048 	cmpgei	r2,r2,1
 400ece0:	103fcc1e 	bne	r2,zero,400ec14 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 400ece4:	e0fffa17 	ldw	r3,-24(fp)
 400ece8:	e0bffc17 	ldw	r2,-16(fp)
 400ecec:	1880141e 	bne	r3,r2,400ed40 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 400ecf0:	e0bffe17 	ldw	r2,-8(fp)
 400ecf4:	1090000c 	andi	r2,r2,16384
 400ecf8:	1004c03a 	cmpne	r2,r2,zero
 400ecfc:	1000101e 	bne	r2,zero,400ed40 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 400ed00:	e0bffb17 	ldw	r2,-20(fp)
 400ed04:	10c00a17 	ldw	r3,40(r2)
 400ed08:	e0bff717 	ldw	r2,-36(fp)
 400ed0c:	1880051e 	bne	r3,r2,400ed24 <altera_avalon_jtag_uart_read+0x13c>
 400ed10:	e0bffb17 	ldw	r2,-20(fp)
 400ed14:	10c00917 	ldw	r3,36(r2)
 400ed18:	e0bffb17 	ldw	r2,-20(fp)
 400ed1c:	10800117 	ldw	r2,4(r2)
 400ed20:	18bff736 	bltu	r3,r2,400ed00 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 400ed24:	e0bffb17 	ldw	r2,-20(fp)
 400ed28:	10c00a17 	ldw	r3,40(r2)
 400ed2c:	e0bff717 	ldw	r2,-36(fp)
 400ed30:	18800326 	beq	r3,r2,400ed40 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400ed34:	e0bffd17 	ldw	r2,-12(fp)
 400ed38:	10800048 	cmpgei	r2,r2,1
 400ed3c:	103fb51e 	bne	r2,zero,400ec14 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 400ed40:	e0fffa17 	ldw	r3,-24(fp)
 400ed44:	e0bffc17 	ldw	r2,-16(fp)
 400ed48:	18801926 	beq	r3,r2,400edb0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ed4c:	0005303a 	rdctl	r2,status
 400ed50:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ed54:	e0fff517 	ldw	r3,-44(fp)
 400ed58:	00bfff84 	movi	r2,-2
 400ed5c:	1884703a 	and	r2,r3,r2
 400ed60:	1001703a 	wrctl	status,r2
  
  return context;
 400ed64:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 400ed68:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400ed6c:	e0bffb17 	ldw	r2,-20(fp)
 400ed70:	10800817 	ldw	r2,32(r2)
 400ed74:	10c00054 	ori	r3,r2,1
 400ed78:	e0bffb17 	ldw	r2,-20(fp)
 400ed7c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400ed80:	e0bffb17 	ldw	r2,-20(fp)
 400ed84:	10800017 	ldw	r2,0(r2)
 400ed88:	11000104 	addi	r4,r2,4
 400ed8c:	e0bffb17 	ldw	r2,-20(fp)
 400ed90:	10800817 	ldw	r2,32(r2)
 400ed94:	1007883a 	mov	r3,r2
 400ed98:	2005883a 	mov	r2,r4
 400ed9c:	10c00035 	stwio	r3,0(r2)
 400eda0:	e0bff917 	ldw	r2,-28(fp)
 400eda4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400eda8:	e0bff417 	ldw	r2,-48(fp)
 400edac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 400edb0:	e0fffa17 	ldw	r3,-24(fp)
 400edb4:	e0bffc17 	ldw	r2,-16(fp)
 400edb8:	18800526 	beq	r3,r2,400edd0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 400edbc:	e0fffa17 	ldw	r3,-24(fp)
 400edc0:	e0bffc17 	ldw	r2,-16(fp)
 400edc4:	1887c83a 	sub	r3,r3,r2
 400edc8:	e0ffff15 	stw	r3,-4(fp)
 400edcc:	00000906 	br	400edf4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 400edd0:	e0bffe17 	ldw	r2,-8(fp)
 400edd4:	1090000c 	andi	r2,r2,16384
 400edd8:	1005003a 	cmpeq	r2,r2,zero
 400eddc:	1000031e 	bne	r2,zero,400edec <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 400ede0:	00bffd44 	movi	r2,-11
 400ede4:	e0bfff15 	stw	r2,-4(fp)
 400ede8:	00000206 	br	400edf4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 400edec:	00bffec4 	movi	r2,-5
 400edf0:	e0bfff15 	stw	r2,-4(fp)
 400edf4:	e0bfff17 	ldw	r2,-4(fp)
}
 400edf8:	e037883a 	mov	sp,fp
 400edfc:	dfc00117 	ldw	ra,4(sp)
 400ee00:	df000017 	ldw	fp,0(sp)
 400ee04:	dec00204 	addi	sp,sp,8
 400ee08:	f800283a 	ret

0400ee0c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400ee0c:	defff204 	addi	sp,sp,-56
 400ee10:	dfc00d15 	stw	ra,52(sp)
 400ee14:	df000c15 	stw	fp,48(sp)
 400ee18:	df000c04 	addi	fp,sp,48
 400ee1c:	e13ffb15 	stw	r4,-20(fp)
 400ee20:	e17ffc15 	stw	r5,-16(fp)
 400ee24:	e1bffd15 	stw	r6,-12(fp)
 400ee28:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 400ee2c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 400ee30:	e0bffc17 	ldw	r2,-16(fp)
 400ee34:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400ee38:	00003a06 	br	400ef24 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 400ee3c:	e0bffb17 	ldw	r2,-20(fp)
 400ee40:	10800c17 	ldw	r2,48(r2)
 400ee44:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 400ee48:	e0bffb17 	ldw	r2,-20(fp)
 400ee4c:	10800d17 	ldw	r2,52(r2)
 400ee50:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 400ee54:	e0fffa17 	ldw	r3,-24(fp)
 400ee58:	e0bff917 	ldw	r2,-28(fp)
 400ee5c:	1880062e 	bgeu	r3,r2,400ee78 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 400ee60:	e0fff917 	ldw	r3,-28(fp)
 400ee64:	e0bffa17 	ldw	r2,-24(fp)
 400ee68:	1885c83a 	sub	r2,r3,r2
 400ee6c:	10bfffc4 	addi	r2,r2,-1
 400ee70:	e0bff815 	stw	r2,-32(fp)
 400ee74:	00000c06 	br	400eea8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 400ee78:	e0bff917 	ldw	r2,-28(fp)
 400ee7c:	1005003a 	cmpeq	r2,r2,zero
 400ee80:	1000051e 	bne	r2,zero,400ee98 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 400ee84:	00820004 	movi	r2,2048
 400ee88:	e0fffa17 	ldw	r3,-24(fp)
 400ee8c:	10c5c83a 	sub	r2,r2,r3
 400ee90:	e0bff815 	stw	r2,-32(fp)
 400ee94:	00000406 	br	400eea8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 400ee98:	0081ffc4 	movi	r2,2047
 400ee9c:	e0fffa17 	ldw	r3,-24(fp)
 400eea0:	10c5c83a 	sub	r2,r2,r3
 400eea4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 400eea8:	e0bff817 	ldw	r2,-32(fp)
 400eeac:	1005003a 	cmpeq	r2,r2,zero
 400eeb0:	10001f1e 	bne	r2,zero,400ef30 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 400eeb4:	e0fffd17 	ldw	r3,-12(fp)
 400eeb8:	e0bff817 	ldw	r2,-32(fp)
 400eebc:	1880022e 	bgeu	r3,r2,400eec8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 400eec0:	e0bffd17 	ldw	r2,-12(fp)
 400eec4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 400eec8:	e0bffb17 	ldw	r2,-20(fp)
 400eecc:	10c20e04 	addi	r3,r2,2104
 400eed0:	e0bffa17 	ldw	r2,-24(fp)
 400eed4:	1885883a 	add	r2,r3,r2
 400eed8:	e0fffc17 	ldw	r3,-16(fp)
 400eedc:	1009883a 	mov	r4,r2
 400eee0:	180b883a 	mov	r5,r3
 400eee4:	e1bff817 	ldw	r6,-32(fp)
 400eee8:	4005cd80 	call	4005cd8 <memcpy>
      ptr   += n;
 400eeec:	e0fff817 	ldw	r3,-32(fp)
 400eef0:	e0bffc17 	ldw	r2,-16(fp)
 400eef4:	10c5883a 	add	r2,r2,r3
 400eef8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 400eefc:	e0fffd17 	ldw	r3,-12(fp)
 400ef00:	e0bff817 	ldw	r2,-32(fp)
 400ef04:	1885c83a 	sub	r2,r3,r2
 400ef08:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400ef0c:	e0fffa17 	ldw	r3,-24(fp)
 400ef10:	e0bff817 	ldw	r2,-32(fp)
 400ef14:	1885883a 	add	r2,r3,r2
 400ef18:	10c1ffcc 	andi	r3,r2,2047
 400ef1c:	e0bffb17 	ldw	r2,-20(fp)
 400ef20:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400ef24:	e0bffd17 	ldw	r2,-12(fp)
 400ef28:	10800048 	cmpgei	r2,r2,1
 400ef2c:	103fc31e 	bne	r2,zero,400ee3c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ef30:	0005303a 	rdctl	r2,status
 400ef34:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ef38:	e0fff517 	ldw	r3,-44(fp)
 400ef3c:	00bfff84 	movi	r2,-2
 400ef40:	1884703a 	and	r2,r3,r2
 400ef44:	1001703a 	wrctl	status,r2
  
  return context;
 400ef48:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 400ef4c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400ef50:	e0bffb17 	ldw	r2,-20(fp)
 400ef54:	10800817 	ldw	r2,32(r2)
 400ef58:	10c00094 	ori	r3,r2,2
 400ef5c:	e0bffb17 	ldw	r2,-20(fp)
 400ef60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400ef64:	e0bffb17 	ldw	r2,-20(fp)
 400ef68:	10800017 	ldw	r2,0(r2)
 400ef6c:	11000104 	addi	r4,r2,4
 400ef70:	e0bffb17 	ldw	r2,-20(fp)
 400ef74:	10800817 	ldw	r2,32(r2)
 400ef78:	1007883a 	mov	r3,r2
 400ef7c:	2005883a 	mov	r2,r4
 400ef80:	10c00035 	stwio	r3,0(r2)
 400ef84:	e0bff717 	ldw	r2,-36(fp)
 400ef88:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ef8c:	e0bff417 	ldw	r2,-48(fp)
 400ef90:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 400ef94:	e0bffd17 	ldw	r2,-12(fp)
 400ef98:	10800050 	cmplti	r2,r2,1
 400ef9c:	1000111e 	bne	r2,zero,400efe4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 400efa0:	e0bffe17 	ldw	r2,-8(fp)
 400efa4:	1090000c 	andi	r2,r2,16384
 400efa8:	1004c03a 	cmpne	r2,r2,zero
 400efac:	1000101e 	bne	r2,zero,400eff0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 400efb0:	e0bffb17 	ldw	r2,-20(fp)
 400efb4:	10c00d17 	ldw	r3,52(r2)
 400efb8:	e0bff917 	ldw	r2,-28(fp)
 400efbc:	1880051e 	bne	r3,r2,400efd4 <altera_avalon_jtag_uart_write+0x1c8>
 400efc0:	e0bffb17 	ldw	r2,-20(fp)
 400efc4:	10c00917 	ldw	r3,36(r2)
 400efc8:	e0bffb17 	ldw	r2,-20(fp)
 400efcc:	10800117 	ldw	r2,4(r2)
 400efd0:	18bff736 	bltu	r3,r2,400efb0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 400efd4:	e0bffb17 	ldw	r2,-20(fp)
 400efd8:	10c00d17 	ldw	r3,52(r2)
 400efdc:	e0bff917 	ldw	r2,-28(fp)
 400efe0:	18800326 	beq	r3,r2,400eff0 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 400efe4:	e0bffd17 	ldw	r2,-12(fp)
 400efe8:	10800048 	cmpgei	r2,r2,1
 400efec:	103fcd1e 	bne	r2,zero,400ef24 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 400eff0:	e0fffc17 	ldw	r3,-16(fp)
 400eff4:	e0bff617 	ldw	r2,-40(fp)
 400eff8:	18800526 	beq	r3,r2,400f010 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 400effc:	e0fffc17 	ldw	r3,-16(fp)
 400f000:	e0bff617 	ldw	r2,-40(fp)
 400f004:	1887c83a 	sub	r3,r3,r2
 400f008:	e0ffff15 	stw	r3,-4(fp)
 400f00c:	00000906 	br	400f034 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 400f010:	e0bffe17 	ldw	r2,-8(fp)
 400f014:	1090000c 	andi	r2,r2,16384
 400f018:	1005003a 	cmpeq	r2,r2,zero
 400f01c:	1000031e 	bne	r2,zero,400f02c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 400f020:	00bffd44 	movi	r2,-11
 400f024:	e0bfff15 	stw	r2,-4(fp)
 400f028:	00000206 	br	400f034 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 400f02c:	00bffec4 	movi	r2,-5
 400f030:	e0bfff15 	stw	r2,-4(fp)
 400f034:	e0bfff17 	ldw	r2,-4(fp)
}
 400f038:	e037883a 	mov	sp,fp
 400f03c:	dfc00117 	ldw	ra,4(sp)
 400f040:	df000017 	ldw	fp,0(sp)
 400f044:	dec00204 	addi	sp,sp,8
 400f048:	f800283a 	ret

0400f04c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 400f04c:	defff404 	addi	sp,sp,-48
 400f050:	df000b15 	stw	fp,44(sp)
 400f054:	df000b04 	addi	fp,sp,44
 400f058:	e13ffc15 	stw	r4,-16(fp)
 400f05c:	e17ffd15 	stw	r5,-12(fp)
 400f060:	e1bffe15 	stw	r6,-8(fp)
 400f064:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 400f068:	e0fffe17 	ldw	r3,-8(fp)
 400f06c:	e0bfff17 	ldw	r2,-4(fp)
 400f070:	10c5883a 	add	r2,r2,r3
 400f074:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
 400f078:	e0c00117 	ldw	r3,4(fp)
 400f07c:	e0800217 	ldw	r2,8(fp)
 400f080:	10c5883a 	add	r2,r2,r3
 400f084:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
 400f088:	e0800117 	ldw	r2,4(fp)
 400f08c:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
 400f090:	e0bffe17 	ldw	r2,-8(fp)
 400f094:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 400f098:	00800044 	movi	r2,1
 400f09c:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 400f0a0:	e0bffc17 	ldw	r2,-16(fp)
 400f0a4:	11000504 	addi	r4,r2,20
 400f0a8:	e0fffd17 	ldw	r3,-12(fp)
 400f0ac:	00800044 	movi	r2,1
 400f0b0:	10c6983a 	sll	r3,r2,r3
 400f0b4:	2005883a 	mov	r2,r4
 400f0b8:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 400f0bc:	e0800317 	ldw	r2,12(fp)
 400f0c0:	1080008c 	andi	r2,r2,2
 400f0c4:	1004c03a 	cmpne	r2,r2,zero
 400f0c8:	1000051e 	bne	r2,zero,400f0e0 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 400f0cc:	e0bffc17 	ldw	r2,-16(fp)
 400f0d0:	10800304 	addi	r2,r2,12
 400f0d4:	1007883a 	mov	r3,r2
 400f0d8:	00810004 	movi	r2,1024
 400f0dc:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 400f0e0:	e0bffc17 	ldw	r2,-16(fp)
 400f0e4:	10800037 	ldwio	r2,0(r2)
 400f0e8:	00000006 	br	400f0ec <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 400f0ec:	e0bffc17 	ldw	r2,-16(fp)
 400f0f0:	10800204 	addi	r2,r2,8
 400f0f4:	10800037 	ldwio	r2,0(r2)
 400f0f8:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 400f0fc:	e0bff717 	ldw	r2,-36(fp)
 400f100:	1080100c 	andi	r2,r2,64
 400f104:	1005003a 	cmpeq	r2,r2,zero
 400f108:	1000031e 	bne	r2,zero,400f118 <alt_avalon_spi_command+0xcc>
 400f10c:	e0bff617 	ldw	r2,-40(fp)
 400f110:	1004c03a 	cmpne	r2,r2,zero
 400f114:	1000041e 	bne	r2,zero,400f128 <alt_avalon_spi_command+0xdc>
 400f118:	e0bff717 	ldw	r2,-36(fp)
 400f11c:	1080200c 	andi	r2,r2,128
 400f120:	1005003a 	cmpeq	r2,r2,zero
 400f124:	103ff11e 	bne	r2,zero,400f0ec <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 400f128:	e0bff717 	ldw	r2,-36(fp)
 400f12c:	1080100c 	andi	r2,r2,64
 400f130:	1005003a 	cmpeq	r2,r2,zero
 400f134:	1000201e 	bne	r2,zero,400f1b8 <alt_avalon_spi_command+0x16c>
 400f138:	e0bff617 	ldw	r2,-40(fp)
 400f13c:	10800050 	cmplti	r2,r2,1
 400f140:	10001d1e 	bne	r2,zero,400f1b8 <alt_avalon_spi_command+0x16c>
    {
      credits--;
 400f144:	e0bff617 	ldw	r2,-40(fp)
 400f148:	10bfffc4 	addi	r2,r2,-1
 400f14c:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
 400f150:	e0ffff17 	ldw	r3,-4(fp)
 400f154:	e0bffb17 	ldw	r2,-20(fp)
 400f158:	18800b2e 	bgeu	r3,r2,400f188 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 400f15c:	e0bffc17 	ldw	r2,-16(fp)
 400f160:	11000104 	addi	r4,r2,4
 400f164:	e0bfff17 	ldw	r2,-4(fp)
 400f168:	10800003 	ldbu	r2,0(r2)
 400f16c:	10c03fcc 	andi	r3,r2,255
 400f170:	e0bfff17 	ldw	r2,-4(fp)
 400f174:	10800044 	addi	r2,r2,1
 400f178:	e0bfff15 	stw	r2,-4(fp)
 400f17c:	2005883a 	mov	r2,r4
 400f180:	10c00035 	stwio	r3,0(r2)
 400f184:	00000c06 	br	400f1b8 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
 400f188:	e0bff917 	ldw	r2,-28(fp)
 400f18c:	1005003a 	cmpeq	r2,r2,zero
 400f190:	1000071e 	bne	r2,zero,400f1b0 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
 400f194:	e0bff917 	ldw	r2,-28(fp)
 400f198:	10bfffc4 	addi	r2,r2,-1
 400f19c:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 400f1a0:	e0bffc17 	ldw	r2,-16(fp)
 400f1a4:	10800104 	addi	r2,r2,4
 400f1a8:	10000035 	stwio	zero,0(r2)
 400f1ac:	00000206 	br	400f1b8 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
 400f1b0:	00bf0004 	movi	r2,-1024
 400f1b4:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 400f1b8:	e0bff717 	ldw	r2,-36(fp)
 400f1bc:	1080200c 	andi	r2,r2,128
 400f1c0:	1005003a 	cmpeq	r2,r2,zero
 400f1c4:	103fc91e 	bne	r2,zero,400f0ec <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 400f1c8:	e0bffc17 	ldw	r2,-16(fp)
 400f1cc:	10800037 	ldwio	r2,0(r2)
 400f1d0:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
 400f1d4:	e0bff817 	ldw	r2,-32(fp)
 400f1d8:	1005003a 	cmpeq	r2,r2,zero
 400f1dc:	1000041e 	bne	r2,zero,400f1f0 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
 400f1e0:	e0bff817 	ldw	r2,-32(fp)
 400f1e4:	10bfffc4 	addi	r2,r2,-1
 400f1e8:	e0bff815 	stw	r2,-32(fp)
 400f1ec:	00000706 	br	400f20c <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
 400f1f0:	e0bff517 	ldw	r2,-44(fp)
 400f1f4:	1007883a 	mov	r3,r2
 400f1f8:	e0800217 	ldw	r2,8(fp)
 400f1fc:	10c00005 	stb	r3,0(r2)
 400f200:	e0800217 	ldw	r2,8(fp)
 400f204:	10800044 	addi	r2,r2,1
 400f208:	e0800215 	stw	r2,8(fp)
      credits++;
 400f20c:	e0bff617 	ldw	r2,-40(fp)
 400f210:	10800044 	addi	r2,r2,1
 400f214:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
 400f218:	e0bff817 	ldw	r2,-32(fp)
 400f21c:	1004c03a 	cmpne	r2,r2,zero
 400f220:	103fb21e 	bne	r2,zero,400f0ec <alt_avalon_spi_command+0xa0>
 400f224:	e0c00217 	ldw	r3,8(fp)
 400f228:	e0bffa17 	ldw	r2,-24(fp)
 400f22c:	18800126 	beq	r3,r2,400f234 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
 400f230:	003fae06 	br	400f0ec <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 400f234:	e0bffc17 	ldw	r2,-16(fp)
 400f238:	10800204 	addi	r2,r2,8
 400f23c:	10800037 	ldwio	r2,0(r2)
 400f240:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 400f244:	e0bff717 	ldw	r2,-36(fp)
 400f248:	1080080c 	andi	r2,r2,32
 400f24c:	1005003a 	cmpeq	r2,r2,zero
 400f250:	103ff81e 	bne	r2,zero,400f234 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 400f254:	e0800317 	ldw	r2,12(fp)
 400f258:	1080004c 	andi	r2,r2,1
 400f25c:	1004c03a 	cmpne	r2,r2,zero
 400f260:	1000031e 	bne	r2,zero,400f270 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 400f264:	e0bffc17 	ldw	r2,-16(fp)
 400f268:	10800304 	addi	r2,r2,12
 400f26c:	10000035 	stwio	zero,0(r2)

  return read_length;
 400f270:	e0800117 	ldw	r2,4(fp)
}
 400f274:	e037883a 	mov	sp,fp
 400f278:	df000017 	ldw	fp,0(sp)
 400f27c:	dec00104 	addi	sp,sp,4
 400f280:	f800283a 	ret

0400f284 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 400f284:	defff904 	addi	sp,sp,-28
 400f288:	dfc00615 	stw	ra,24(sp)
 400f28c:	df000515 	stw	fp,20(sp)
 400f290:	df000504 	addi	fp,sp,20
 400f294:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 400f298:	00800144 	movi	r2,5
 400f29c:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 400f2a0:	00800044 	movi	r2,1
 400f2a4:	d8800015 	stw	r2,0(sp)
 400f2a8:	e0bffe44 	addi	r2,fp,-7
 400f2ac:	d8800115 	stw	r2,4(sp)
 400f2b0:	d8000215 	stw	zero,8(sp)
 400f2b4:	e13fff17 	ldw	r4,-4(fp)
 400f2b8:	000b883a 	mov	r5,zero
 400f2bc:	01800044 	movi	r6,1
 400f2c0:	e1fffe04 	addi	r7,fp,-8
 400f2c4:	400f04c0 	call	400f04c <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 400f2c8:	e0bffe43 	ldbu	r2,-7(fp)
 400f2cc:	10803fcc 	andi	r2,r2,255
}
 400f2d0:	e037883a 	mov	sp,fp
 400f2d4:	dfc00117 	ldw	ra,4(sp)
 400f2d8:	df000017 	ldw	fp,0(sp)
 400f2dc:	dec00204 	addi	sp,sp,8
 400f2e0:	f800283a 	ret

0400f2e4 <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 400f2e4:	defff604 	addi	sp,sp,-40
 400f2e8:	dfc00915 	stw	ra,36(sp)
 400f2ec:	df000815 	stw	fp,32(sp)
 400f2f0:	df000804 	addi	fp,sp,32
 400f2f4:	e13ffd15 	stw	r4,-12(fp)
 400f2f8:	e17ffe15 	stw	r5,-8(fp)
 400f2fc:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 400f300:	e0bfff17 	ldw	r2,-4(fp)
 400f304:	1005003a 	cmpeq	r2,r2,zero
 400f308:	1000121e 	bne	r2,zero,400f354 <epcs_sector_erase+0x70>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 400f30c:	00bff604 	movi	r2,-40
 400f310:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 400f314:	e0bffe17 	ldw	r2,-8(fp)
 400f318:	1004d63a 	srli	r2,r2,24
 400f31c:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 400f320:	e0bffe17 	ldw	r2,-8(fp)
 400f324:	1004d43a 	srli	r2,r2,16
 400f328:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 400f32c:	e0bffe17 	ldw	r2,-8(fp)
 400f330:	1004d23a 	srli	r2,r2,8
 400f334:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 400f338:	e0bffe17 	ldw	r2,-8(fp)
 400f33c:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 400f340:	00800144 	movi	r2,5
 400f344:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 400f348:	e13ffd17 	ldw	r4,-12(fp)
 400f34c:	400f8a80 	call	400f8a8 <epcs_enter_4_bytes_mode>
 400f350:	00000c06 	br	400f384 <epcs_sector_erase+0xa0>
  }
  else
  {
      se[0] = epcs_se;
 400f354:	00bff604 	movi	r2,-40
 400f358:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 400f35c:	e0bffe17 	ldw	r2,-8(fp)
 400f360:	1004d43a 	srli	r2,r2,16
 400f364:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 400f368:	e0bffe17 	ldw	r2,-8(fp)
 400f36c:	1004d23a 	srli	r2,r2,8
 400f370:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 400f374:	e0bffe17 	ldw	r2,-8(fp)
 400f378:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 400f37c:	00800104 	movi	r2,4
 400f380:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 400f384:	e13ffd17 	ldw	r4,-12(fp)
 400f388:	400f5980 	call	400f598 <epcs_write_enable>

  alt_avalon_spi_command(
 400f38c:	e1bffb03 	ldbu	r6,-20(fp)
 400f390:	e1fffb44 	addi	r7,fp,-19
 400f394:	d8000015 	stw	zero,0(sp)
 400f398:	d8000115 	stw	zero,4(sp)
 400f39c:	d8000215 	stw	zero,8(sp)
 400f3a0:	e13ffd17 	ldw	r4,-12(fp)
 400f3a4:	000b883a 	mov	r5,zero
 400f3a8:	400f04c0 	call	400f04c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 400f3ac:	e13ffd17 	ldw	r4,-12(fp)
 400f3b0:	400f3dc0 	call	400f3dc <epcs_await_wip_released>

  if(four_bytes_mode)
 400f3b4:	e0bfff17 	ldw	r2,-4(fp)
 400f3b8:	1005003a 	cmpeq	r2,r2,zero
 400f3bc:	1000021e 	bne	r2,zero,400f3c8 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 400f3c0:	e13ffd17 	ldw	r4,-12(fp)
 400f3c4:	400f9000 	call	400f900 <epcs_exit_4_bytes_mode>
  }
}
 400f3c8:	e037883a 	mov	sp,fp
 400f3cc:	dfc00117 	ldw	ra,4(sp)
 400f3d0:	df000017 	ldw	fp,0(sp)
 400f3d4:	dec00204 	addi	sp,sp,8
 400f3d8:	f800283a 	ret

0400f3dc <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 400f3dc:	defffd04 	addi	sp,sp,-12
 400f3e0:	dfc00215 	stw	ra,8(sp)
 400f3e4:	df000115 	stw	fp,4(sp)
 400f3e8:	df000104 	addi	fp,sp,4
 400f3ec:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 400f3f0:	e13fff17 	ldw	r4,-4(fp)
 400f3f4:	400f4140 	call	400f414 <epcs_test_wip>
 400f3f8:	1004c03a 	cmpne	r2,r2,zero
 400f3fc:	103ffc1e 	bne	r2,zero,400f3f0 <epcs_await_wip_released+0x14>
  {
  }
}
 400f400:	e037883a 	mov	sp,fp
 400f404:	dfc00117 	ldw	ra,4(sp)
 400f408:	df000017 	ldw	fp,0(sp)
 400f40c:	dec00204 	addi	sp,sp,8
 400f410:	f800283a 	ret

0400f414 <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 400f414:	defffd04 	addi	sp,sp,-12
 400f418:	dfc00215 	stw	ra,8(sp)
 400f41c:	df000115 	stw	fp,4(sp)
 400f420:	df000104 	addi	fp,sp,4
 400f424:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 400f428:	e13fff17 	ldw	r4,-4(fp)
 400f42c:	400f2840 	call	400f284 <epcs_read_status_register>
 400f430:	10803fcc 	andi	r2,r2,255
 400f434:	1080004c 	andi	r2,r2,1
}
 400f438:	e037883a 	mov	sp,fp
 400f43c:	dfc00117 	ldw	ra,4(sp)
 400f440:	df000017 	ldw	fp,0(sp)
 400f444:	dec00204 	addi	sp,sp,8
 400f448:	f800283a 	ret

0400f44c <epcs_read_buffer>:
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 400f44c:	defff404 	addi	sp,sp,-48
 400f450:	dfc00b15 	stw	ra,44(sp)
 400f454:	df000a15 	stw	fp,40(sp)
 400f458:	df000a04 	addi	fp,sp,40
 400f45c:	e13ffc15 	stw	r4,-16(fp)
 400f460:	e17ffd15 	stw	r5,-12(fp)
 400f464:	e1bffe15 	stw	r6,-8(fp)
 400f468:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 400f46c:	008000c4 	movi	r2,3
 400f470:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 400f474:	e0800217 	ldw	r2,8(fp)
 400f478:	1005003a 	cmpeq	r2,r2,zero
 400f47c:	10001c1e 	bne	r2,zero,400f4f0 <epcs_read_buffer+0xa4>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 400f480:	e0bffd17 	ldw	r2,-12(fp)
 400f484:	1005d63a 	srai	r2,r2,24
 400f488:	1007883a 	mov	r3,r2
 400f48c:	00bfffc4 	movi	r2,-1
 400f490:	1884703a 	and	r2,r3,r2
 400f494:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 400f498:	e0bffd17 	ldw	r2,-12(fp)
 400f49c:	1005d43a 	srai	r2,r2,16
 400f4a0:	1007883a 	mov	r3,r2
 400f4a4:	00bfffc4 	movi	r2,-1
 400f4a8:	1884703a 	and	r2,r3,r2
 400f4ac:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 400f4b0:	e0bffd17 	ldw	r2,-12(fp)
 400f4b4:	1005d23a 	srai	r2,r2,8
 400f4b8:	1007883a 	mov	r3,r2
 400f4bc:	00bfffc4 	movi	r2,-1
 400f4c0:	1884703a 	and	r2,r3,r2
 400f4c4:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 400f4c8:	e0bffd17 	ldw	r2,-12(fp)
 400f4cc:	1007883a 	mov	r3,r2
 400f4d0:	00bfffc4 	movi	r2,-1
 400f4d4:	1884703a 	and	r2,r3,r2
 400f4d8:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 400f4dc:	00800144 	movi	r2,5
 400f4e0:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 400f4e4:	e13ffc17 	ldw	r4,-16(fp)
 400f4e8:	400f8a80 	call	400f8a8 <epcs_enter_4_bytes_mode>
 400f4ec:	00001306 	br	400f53c <epcs_read_buffer+0xf0>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 400f4f0:	e0bffd17 	ldw	r2,-12(fp)
 400f4f4:	1005d43a 	srai	r2,r2,16
 400f4f8:	1007883a 	mov	r3,r2
 400f4fc:	00bfffc4 	movi	r2,-1
 400f500:	1884703a 	and	r2,r3,r2
 400f504:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 400f508:	e0bffd17 	ldw	r2,-12(fp)
 400f50c:	1005d23a 	srai	r2,r2,8
 400f510:	1007883a 	mov	r3,r2
 400f514:	00bfffc4 	movi	r2,-1
 400f518:	1884703a 	and	r2,r3,r2
 400f51c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 400f520:	e0bffd17 	ldw	r2,-12(fp)
 400f524:	1007883a 	mov	r3,r2
 400f528:	00bfffc4 	movi	r2,-1
 400f52c:	1884703a 	and	r2,r3,r2
 400f530:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 400f534:	00800104 	movi	r2,4
 400f538:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 400f53c:	e13ffc17 	ldw	r4,-16(fp)
 400f540:	400f3dc0 	call	400f3dc <epcs_await_wip_released>

  alt_avalon_spi_command(
 400f544:	e0bfff17 	ldw	r2,-4(fp)
 400f548:	e1fffa04 	addi	r7,fp,-24
 400f54c:	d8800015 	stw	r2,0(sp)
 400f550:	e0bffe17 	ldw	r2,-8(fp)
 400f554:	d8800115 	stw	r2,4(sp)
 400f558:	d8000215 	stw	zero,8(sp)
 400f55c:	e13ffc17 	ldw	r4,-16(fp)
 400f560:	000b883a 	mov	r5,zero
 400f564:	e1bff917 	ldw	r6,-28(fp)
 400f568:	400f04c0 	call	400f04c <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 400f56c:	e0800217 	ldw	r2,8(fp)
 400f570:	1005003a 	cmpeq	r2,r2,zero
 400f574:	1000021e 	bne	r2,zero,400f580 <epcs_read_buffer+0x134>
  {
    epcs_exit_4_bytes_mode(base);
 400f578:	e13ffc17 	ldw	r4,-16(fp)
 400f57c:	400f9000 	call	400f900 <epcs_exit_4_bytes_mode>
  }

  return length;
 400f580:	e0bfff17 	ldw	r2,-4(fp)
}
 400f584:	e037883a 	mov	sp,fp
 400f588:	dfc00117 	ldw	ra,4(sp)
 400f58c:	df000017 	ldw	fp,0(sp)
 400f590:	dec00204 	addi	sp,sp,8
 400f594:	f800283a 	ret

0400f598 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 400f598:	defff904 	addi	sp,sp,-28
 400f59c:	dfc00615 	stw	ra,24(sp)
 400f5a0:	df000515 	stw	fp,20(sp)
 400f5a4:	df000504 	addi	fp,sp,20
 400f5a8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 400f5ac:	00800184 	movi	r2,6
 400f5b0:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 400f5b4:	d8000015 	stw	zero,0(sp)
 400f5b8:	d8000115 	stw	zero,4(sp)
 400f5bc:	d8000215 	stw	zero,8(sp)
 400f5c0:	e13fff17 	ldw	r4,-4(fp)
 400f5c4:	000b883a 	mov	r5,zero
 400f5c8:	01800044 	movi	r6,1
 400f5cc:	e1fffe04 	addi	r7,fp,-8
 400f5d0:	400f04c0 	call	400f04c <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 400f5d4:	e037883a 	mov	sp,fp
 400f5d8:	dfc00117 	ldw	ra,4(sp)
 400f5dc:	df000017 	ldw	fp,0(sp)
 400f5e0:	dec00204 	addi	sp,sp,8
 400f5e4:	f800283a 	ret

0400f5e8 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 400f5e8:	defff804 	addi	sp,sp,-32
 400f5ec:	dfc00715 	stw	ra,28(sp)
 400f5f0:	df000615 	stw	fp,24(sp)
 400f5f4:	df000604 	addi	fp,sp,24
 400f5f8:	e13ffe15 	stw	r4,-8(fp)
 400f5fc:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 400f600:	00800044 	movi	r2,1
 400f604:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 400f608:	e0bfff03 	ldbu	r2,-4(fp)
 400f60c:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 400f610:	d8000015 	stw	zero,0(sp)
 400f614:	d8000115 	stw	zero,4(sp)
 400f618:	d8000215 	stw	zero,8(sp)
 400f61c:	e13ffe17 	ldw	r4,-8(fp)
 400f620:	000b883a 	mov	r5,zero
 400f624:	01800084 	movi	r6,2
 400f628:	e1fffd04 	addi	r7,fp,-12
 400f62c:	400f04c0 	call	400f04c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 400f630:	e13ffe17 	ldw	r4,-8(fp)
 400f634:	400f3dc0 	call	400f3dc <epcs_await_wip_released>
}
 400f638:	e037883a 	mov	sp,fp
 400f63c:	dfc00117 	ldw	ra,4(sp)
 400f640:	df000017 	ldw	fp,0(sp)
 400f644:	dec00204 	addi	sp,sp,8
 400f648:	f800283a 	ret

0400f64c <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 400f64c:	defff404 	addi	sp,sp,-48
 400f650:	dfc00b15 	stw	ra,44(sp)
 400f654:	df000a15 	stw	fp,40(sp)
 400f658:	df000a04 	addi	fp,sp,40
 400f65c:	e13ffc15 	stw	r4,-16(fp)
 400f660:	e17ffd15 	stw	r5,-12(fp)
 400f664:	e1bffe15 	stw	r6,-8(fp)
 400f668:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 400f66c:	00800084 	movi	r2,2
 400f670:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 400f674:	e0800217 	ldw	r2,8(fp)
 400f678:	1005003a 	cmpeq	r2,r2,zero
 400f67c:	10001c1e 	bne	r2,zero,400f6f0 <epcs_write_buffer+0xa4>
  {
      pp[1] = (offset >> 24) & 0xFF;
 400f680:	e0bffd17 	ldw	r2,-12(fp)
 400f684:	1005d63a 	srai	r2,r2,24
 400f688:	1007883a 	mov	r3,r2
 400f68c:	00bfffc4 	movi	r2,-1
 400f690:	1884703a 	and	r2,r3,r2
 400f694:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 400f698:	e0bffd17 	ldw	r2,-12(fp)
 400f69c:	1005d43a 	srai	r2,r2,16
 400f6a0:	1007883a 	mov	r3,r2
 400f6a4:	00bfffc4 	movi	r2,-1
 400f6a8:	1884703a 	and	r2,r3,r2
 400f6ac:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 400f6b0:	e0bffd17 	ldw	r2,-12(fp)
 400f6b4:	1005d23a 	srai	r2,r2,8
 400f6b8:	1007883a 	mov	r3,r2
 400f6bc:	00bfffc4 	movi	r2,-1
 400f6c0:	1884703a 	and	r2,r3,r2
 400f6c4:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 400f6c8:	e0bffd17 	ldw	r2,-12(fp)
 400f6cc:	1007883a 	mov	r3,r2
 400f6d0:	00bfffc4 	movi	r2,-1
 400f6d4:	1884703a 	and	r2,r3,r2
 400f6d8:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 400f6dc:	00800144 	movi	r2,5
 400f6e0:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 400f6e4:	e13ffc17 	ldw	r4,-16(fp)
 400f6e8:	400f8a80 	call	400f8a8 <epcs_enter_4_bytes_mode>
 400f6ec:	00001306 	br	400f73c <epcs_write_buffer+0xf0>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 400f6f0:	e0bffd17 	ldw	r2,-12(fp)
 400f6f4:	1005d43a 	srai	r2,r2,16
 400f6f8:	1007883a 	mov	r3,r2
 400f6fc:	00bfffc4 	movi	r2,-1
 400f700:	1884703a 	and	r2,r3,r2
 400f704:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 400f708:	e0bffd17 	ldw	r2,-12(fp)
 400f70c:	1005d23a 	srai	r2,r2,8
 400f710:	1007883a 	mov	r3,r2
 400f714:	00bfffc4 	movi	r2,-1
 400f718:	1884703a 	and	r2,r3,r2
 400f71c:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 400f720:	e0bffd17 	ldw	r2,-12(fp)
 400f724:	1007883a 	mov	r3,r2
 400f728:	00bfffc4 	movi	r2,-1
 400f72c:	1884703a 	and	r2,r3,r2
 400f730:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 400f734:	00800104 	movi	r2,4
 400f738:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 400f73c:	e13ffc17 	ldw	r4,-16(fp)
 400f740:	400f5980 	call	400f598 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 400f744:	e1fffa04 	addi	r7,fp,-24
 400f748:	d8000015 	stw	zero,0(sp)
 400f74c:	d8000115 	stw	zero,4(sp)
 400f750:	00800044 	movi	r2,1
 400f754:	d8800215 	stw	r2,8(sp)
 400f758:	e13ffc17 	ldw	r4,-16(fp)
 400f75c:	000b883a 	mov	r5,zero
 400f760:	e1bff917 	ldw	r6,-28(fp)
 400f764:	400f04c0 	call	400f04c <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 400f768:	e1bfff17 	ldw	r6,-4(fp)
 400f76c:	d8000015 	stw	zero,0(sp)
 400f770:	d8000115 	stw	zero,4(sp)
 400f774:	d8000215 	stw	zero,8(sp)
 400f778:	e13ffc17 	ldw	r4,-16(fp)
 400f77c:	000b883a 	mov	r5,zero
 400f780:	e1fffe17 	ldw	r7,-8(fp)
 400f784:	400f04c0 	call	400f04c <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 400f788:	e13ffc17 	ldw	r4,-16(fp)
 400f78c:	400f3dc0 	call	400f3dc <epcs_await_wip_released>

  if(four_bytes_mode)
 400f790:	e0800217 	ldw	r2,8(fp)
 400f794:	1005003a 	cmpeq	r2,r2,zero
 400f798:	1000021e 	bne	r2,zero,400f7a4 <epcs_write_buffer+0x158>
  {
    epcs_exit_4_bytes_mode(base);
 400f79c:	e13ffc17 	ldw	r4,-16(fp)
 400f7a0:	400f9000 	call	400f900 <epcs_exit_4_bytes_mode>
  }

  return length;
 400f7a4:	e0bfff17 	ldw	r2,-4(fp)
}
 400f7a8:	e037883a 	mov	sp,fp
 400f7ac:	dfc00117 	ldw	ra,4(sp)
 400f7b0:	df000017 	ldw	fp,0(sp)
 400f7b4:	dec00204 	addi	sp,sp,8
 400f7b8:	f800283a 	ret

0400f7bc <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 400f7bc:	defff804 	addi	sp,sp,-32
 400f7c0:	dfc00715 	stw	ra,28(sp)
 400f7c4:	df000615 	stw	fp,24(sp)
 400f7c8:	df000604 	addi	fp,sp,24
 400f7cc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 400f7d0:	00bfeac4 	movi	r2,-85
 400f7d4:	e0bffd05 	stb	r2,-12(fp)
 400f7d8:	e03ffd45 	stb	zero,-11(fp)
 400f7dc:	e03ffd85 	stb	zero,-10(fp)
 400f7e0:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 400f7e4:	00800044 	movi	r2,1
 400f7e8:	d8800015 	stw	r2,0(sp)
 400f7ec:	e0bffe04 	addi	r2,fp,-8
 400f7f0:	d8800115 	stw	r2,4(sp)
 400f7f4:	d8000215 	stw	zero,8(sp)
 400f7f8:	e13fff17 	ldw	r4,-4(fp)
 400f7fc:	000b883a 	mov	r5,zero
 400f800:	01800104 	movi	r6,4
 400f804:	e1fffd04 	addi	r7,fp,-12
 400f808:	400f04c0 	call	400f04c <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 400f80c:	e0bffe03 	ldbu	r2,-8(fp)
 400f810:	10803fcc 	andi	r2,r2,255
}
 400f814:	e037883a 	mov	sp,fp
 400f818:	dfc00117 	ldw	ra,4(sp)
 400f81c:	df000017 	ldw	fp,0(sp)
 400f820:	dec00204 	addi	sp,sp,8
 400f824:	f800283a 	ret

0400f828 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 400f828:	defff904 	addi	sp,sp,-28
 400f82c:	dfc00615 	stw	ra,24(sp)
 400f830:	df000515 	stw	fp,20(sp)
 400f834:	df000504 	addi	fp,sp,20
 400f838:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 400f83c:	00bfe7c4 	movi	r2,-97
 400f840:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 400f844:	008000c4 	movi	r2,3
 400f848:	d8800015 	stw	r2,0(sp)
 400f84c:	e0bffe44 	addi	r2,fp,-7
 400f850:	d8800115 	stw	r2,4(sp)
 400f854:	d8000215 	stw	zero,8(sp)
 400f858:	e13fff17 	ldw	r4,-4(fp)
 400f85c:	000b883a 	mov	r5,zero
 400f860:	01800044 	movi	r6,1
 400f864:	e1fffe04 	addi	r7,fp,-8
 400f868:	400f04c0 	call	400f04c <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 400f86c:	e0bffe43 	ldbu	r2,-7(fp)
 400f870:	10803fcc 	andi	r2,r2,255
 400f874:	1006943a 	slli	r3,r2,16
 400f878:	e0bffe83 	ldbu	r2,-6(fp)
 400f87c:	10803fcc 	andi	r2,r2,255
 400f880:	1004923a 	slli	r2,r2,8
 400f884:	1886b03a 	or	r3,r3,r2
 400f888:	e0bffec3 	ldbu	r2,-5(fp)
 400f88c:	10803fcc 	andi	r2,r2,255
 400f890:	1884b03a 	or	r2,r3,r2
}
 400f894:	e037883a 	mov	sp,fp
 400f898:	dfc00117 	ldw	ra,4(sp)
 400f89c:	df000017 	ldw	fp,0(sp)
 400f8a0:	dec00204 	addi	sp,sp,8
 400f8a4:	f800283a 	ret

0400f8a8 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 400f8a8:	defff904 	addi	sp,sp,-28
 400f8ac:	dfc00615 	stw	ra,24(sp)
 400f8b0:	df000515 	stw	fp,20(sp)
 400f8b4:	df000504 	addi	fp,sp,20
 400f8b8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 400f8bc:	00bfedc4 	movi	r2,-73
 400f8c0:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 400f8c4:	e13fff17 	ldw	r4,-4(fp)
 400f8c8:	400f5980 	call	400f598 <epcs_write_enable>

  alt_avalon_spi_command(
 400f8cc:	d8000015 	stw	zero,0(sp)
 400f8d0:	d8000115 	stw	zero,4(sp)
 400f8d4:	d8000215 	stw	zero,8(sp)
 400f8d8:	e13fff17 	ldw	r4,-4(fp)
 400f8dc:	000b883a 	mov	r5,zero
 400f8e0:	01800044 	movi	r6,1
 400f8e4:	e1fffe04 	addi	r7,fp,-8
 400f8e8:	400f04c0 	call	400f04c <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 400f8ec:	e037883a 	mov	sp,fp
 400f8f0:	dfc00117 	ldw	ra,4(sp)
 400f8f4:	df000017 	ldw	fp,0(sp)
 400f8f8:	dec00204 	addi	sp,sp,8
 400f8fc:	f800283a 	ret

0400f900 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 400f900:	defff904 	addi	sp,sp,-28
 400f904:	dfc00615 	stw	ra,24(sp)
 400f908:	df000515 	stw	fp,20(sp)
 400f90c:	df000504 	addi	fp,sp,20
 400f910:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 400f914:	00bffa44 	movi	r2,-23
 400f918:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 400f91c:	e13fff17 	ldw	r4,-4(fp)
 400f920:	400f5980 	call	400f598 <epcs_write_enable>

  alt_avalon_spi_command(
 400f924:	d8000015 	stw	zero,0(sp)
 400f928:	d8000115 	stw	zero,4(sp)
 400f92c:	d8000215 	stw	zero,8(sp)
 400f930:	e13fff17 	ldw	r4,-4(fp)
 400f934:	000b883a 	mov	r5,zero
 400f938:	01800044 	movi	r6,1
 400f93c:	e1fffe04 	addi	r7,fp,-8
 400f940:	400f04c0 	call	400f04c <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 400f944:	e037883a 	mov	sp,fp
 400f948:	dfc00117 	ldw	ra,4(sp)
 400f94c:	df000017 	ldw	fp,0(sp)
 400f950:	dec00204 	addi	sp,sp,8
 400f954:	f800283a 	ret

0400f958 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 400f958:	defff404 	addi	sp,sp,-48
 400f95c:	df000b15 	stw	fp,44(sp)
 400f960:	df000b04 	addi	fp,sp,44
 400f964:	e13ffb15 	stw	r4,-20(fp)
 400f968:	e17ffc15 	stw	r5,-16(fp)
 400f96c:	e1bffd15 	stw	r6,-12(fp)
 400f970:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400f974:	e03ff915 	stw	zero,-28(fp)
 400f978:	00810074 	movhi	r2,1025
 400f97c:	108c1304 	addi	r2,r2,12364
 400f980:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 400f984:	1005003a 	cmpeq	r2,r2,zero
 400f988:	1000411e 	bne	r2,zero,400fa90 <alt_alarm_start+0x138>
  {
    if (alarm)
 400f98c:	e0bffb17 	ldw	r2,-20(fp)
 400f990:	1005003a 	cmpeq	r2,r2,zero
 400f994:	10003b1e 	bne	r2,zero,400fa84 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 400f998:	e0fffb17 	ldw	r3,-20(fp)
 400f99c:	e0bffd17 	ldw	r2,-12(fp)
 400f9a0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 400f9a4:	e0fffb17 	ldw	r3,-20(fp)
 400f9a8:	e0bffe17 	ldw	r2,-8(fp)
 400f9ac:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f9b0:	0005303a 	rdctl	r2,status
 400f9b4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f9b8:	e0fff817 	ldw	r3,-32(fp)
 400f9bc:	00bfff84 	movi	r2,-2
 400f9c0:	1884703a 	and	r2,r3,r2
 400f9c4:	1001703a 	wrctl	status,r2
  
  return context;
 400f9c8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 400f9cc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400f9d0:	00810074 	movhi	r2,1025
 400f9d4:	108c1404 	addi	r2,r2,12368
 400f9d8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 400f9dc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 400f9e0:	e0fffc17 	ldw	r3,-16(fp)
 400f9e4:	e0bff917 	ldw	r2,-28(fp)
 400f9e8:	1885883a 	add	r2,r3,r2
 400f9ec:	10c00044 	addi	r3,r2,1
 400f9f0:	e0bffb17 	ldw	r2,-20(fp)
 400f9f4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 400f9f8:	e0bffb17 	ldw	r2,-20(fp)
 400f9fc:	10c00217 	ldw	r3,8(r2)
 400fa00:	e0bff917 	ldw	r2,-28(fp)
 400fa04:	1880042e 	bgeu	r3,r2,400fa18 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 400fa08:	e0fffb17 	ldw	r3,-20(fp)
 400fa0c:	00800044 	movi	r2,1
 400fa10:	18800405 	stb	r2,16(r3)
 400fa14:	00000206 	br	400fa20 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 400fa18:	e0bffb17 	ldw	r2,-20(fp)
 400fa1c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 400fa20:	e0fffb17 	ldw	r3,-20(fp)
 400fa24:	00810074 	movhi	r2,1025
 400fa28:	108c0304 	addi	r2,r2,12300
 400fa2c:	e0bff615 	stw	r2,-40(fp)
 400fa30:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400fa34:	e0fff717 	ldw	r3,-36(fp)
 400fa38:	e0bff617 	ldw	r2,-40(fp)
 400fa3c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 400fa40:	e0bff617 	ldw	r2,-40(fp)
 400fa44:	10c00017 	ldw	r3,0(r2)
 400fa48:	e0bff717 	ldw	r2,-36(fp)
 400fa4c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400fa50:	e0bff617 	ldw	r2,-40(fp)
 400fa54:	10c00017 	ldw	r3,0(r2)
 400fa58:	e0bff717 	ldw	r2,-36(fp)
 400fa5c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 400fa60:	e0fff617 	ldw	r3,-40(fp)
 400fa64:	e0bff717 	ldw	r2,-36(fp)
 400fa68:	18800015 	stw	r2,0(r3)
 400fa6c:	e0bffa17 	ldw	r2,-24(fp)
 400fa70:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fa74:	e0bff517 	ldw	r2,-44(fp)
 400fa78:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 400fa7c:	e03fff15 	stw	zero,-4(fp)
 400fa80:	00000506 	br	400fa98 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 400fa84:	00bffa84 	movi	r2,-22
 400fa88:	e0bfff15 	stw	r2,-4(fp)
 400fa8c:	00000206 	br	400fa98 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 400fa90:	00bfde84 	movi	r2,-134
 400fa94:	e0bfff15 	stw	r2,-4(fp)
 400fa98:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 400fa9c:	e037883a 	mov	sp,fp
 400faa0:	df000017 	ldw	fp,0(sp)
 400faa4:	dec00104 	addi	sp,sp,4
 400faa8:	f800283a 	ret

0400faac <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 400faac:	defffa04 	addi	sp,sp,-24
 400fab0:	dfc00515 	stw	ra,20(sp)
 400fab4:	df000415 	stw	fp,16(sp)
 400fab8:	df000404 	addi	fp,sp,16
 400fabc:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 400fac0:	008000c4 	movi	r2,3
 400fac4:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 400fac8:	e0fffc17 	ldw	r3,-16(fp)
 400facc:	008003f4 	movhi	r2,15
 400fad0:	10909004 	addi	r2,r2,16960
 400fad4:	188b383a 	mul	r5,r3,r2
 400fad8:	0100bef4 	movhi	r4,763
 400fadc:	213c2004 	addi	r4,r4,-3968
 400fae0:	400ce080 	call	400ce08 <__udivsi3>
 400fae4:	100b883a 	mov	r5,r2
 400fae8:	01200034 	movhi	r4,32768
 400faec:	213fffc4 	addi	r4,r4,-1
 400faf0:	400ce080 	call	400ce08 <__udivsi3>
 400faf4:	100b883a 	mov	r5,r2
 400faf8:	e13fff17 	ldw	r4,-4(fp)
 400fafc:	400ce080 	call	400ce08 <__udivsi3>
 400fb00:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 400fb04:	e0bffd17 	ldw	r2,-12(fp)
 400fb08:	1005003a 	cmpeq	r2,r2,zero
 400fb0c:	1000281e 	bne	r2,zero,400fbb0 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
 400fb10:	e03ffe15 	stw	zero,-8(fp)
 400fb14:	00001606 	br	400fb70 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 400fb18:	00a00034 	movhi	r2,32768
 400fb1c:	10bfffc4 	addi	r2,r2,-1
 400fb20:	10bfffc4 	addi	r2,r2,-1
 400fb24:	103ffe1e 	bne	r2,zero,400fb20 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 400fb28:	e0fffc17 	ldw	r3,-16(fp)
 400fb2c:	008003f4 	movhi	r2,15
 400fb30:	10909004 	addi	r2,r2,16960
 400fb34:	188b383a 	mul	r5,r3,r2
 400fb38:	0100bef4 	movhi	r4,763
 400fb3c:	213c2004 	addi	r4,r4,-3968
 400fb40:	400ce080 	call	400ce08 <__udivsi3>
 400fb44:	100b883a 	mov	r5,r2
 400fb48:	01200034 	movhi	r4,32768
 400fb4c:	213fffc4 	addi	r4,r4,-1
 400fb50:	400ce080 	call	400ce08 <__udivsi3>
 400fb54:	1007883a 	mov	r3,r2
 400fb58:	e0bfff17 	ldw	r2,-4(fp)
 400fb5c:	10c5c83a 	sub	r2,r2,r3
 400fb60:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 400fb64:	e0bffe17 	ldw	r2,-8(fp)
 400fb68:	10800044 	addi	r2,r2,1
 400fb6c:	e0bffe15 	stw	r2,-8(fp)
 400fb70:	e0fffe17 	ldw	r3,-8(fp)
 400fb74:	e0bffd17 	ldw	r2,-12(fp)
 400fb78:	18bfe716 	blt	r3,r2,400fb18 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 400fb7c:	e0fffc17 	ldw	r3,-16(fp)
 400fb80:	008003f4 	movhi	r2,15
 400fb84:	10909004 	addi	r2,r2,16960
 400fb88:	188b383a 	mul	r5,r3,r2
 400fb8c:	0100bef4 	movhi	r4,763
 400fb90:	213c2004 	addi	r4,r4,-3968
 400fb94:	400ce080 	call	400ce08 <__udivsi3>
 400fb98:	1007883a 	mov	r3,r2
 400fb9c:	e0bfff17 	ldw	r2,-4(fp)
 400fba0:	1885383a 	mul	r2,r3,r2
 400fba4:	10bfffc4 	addi	r2,r2,-1
 400fba8:	103ffe1e 	bne	r2,zero,400fba4 <alt_busy_sleep+0xf8>
 400fbac:	00000c06 	br	400fbe0 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 400fbb0:	e0fffc17 	ldw	r3,-16(fp)
 400fbb4:	008003f4 	movhi	r2,15
 400fbb8:	10909004 	addi	r2,r2,16960
 400fbbc:	188b383a 	mul	r5,r3,r2
 400fbc0:	0100bef4 	movhi	r4,763
 400fbc4:	213c2004 	addi	r4,r4,-3968
 400fbc8:	400ce080 	call	400ce08 <__udivsi3>
 400fbcc:	1007883a 	mov	r3,r2
 400fbd0:	e0bfff17 	ldw	r2,-4(fp)
 400fbd4:	1885383a 	mul	r2,r3,r2
 400fbd8:	10bfffc4 	addi	r2,r2,-1
 400fbdc:	00bffe16 	blt	zero,r2,400fbd8 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 400fbe0:	0005883a 	mov	r2,zero
}
 400fbe4:	e037883a 	mov	sp,fp
 400fbe8:	dfc00117 	ldw	ra,4(sp)
 400fbec:	df000017 	ldw	fp,0(sp)
 400fbf0:	dec00204 	addi	sp,sp,8
 400fbf4:	f800283a 	ret

0400fbf8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 400fbf8:	defff904 	addi	sp,sp,-28
 400fbfc:	dfc00615 	stw	ra,24(sp)
 400fc00:	df000515 	stw	fp,20(sp)
 400fc04:	df000504 	addi	fp,sp,20
 400fc08:	e13ffd15 	stw	r4,-12(fp)
 400fc0c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 400fc10:	e0bffd17 	ldw	r2,-12(fp)
 400fc14:	1005003a 	cmpeq	r2,r2,zero
 400fc18:	1000041e 	bne	r2,zero,400fc2c <alt_dev_llist_insert+0x34>
 400fc1c:	e0bffd17 	ldw	r2,-12(fp)
 400fc20:	10800217 	ldw	r2,8(r2)
 400fc24:	1004c03a 	cmpne	r2,r2,zero
 400fc28:	1000071e 	bne	r2,zero,400fc48 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 400fc2c:	400fcac0 	call	400fcac <alt_get_errno>
 400fc30:	1007883a 	mov	r3,r2
 400fc34:	00800584 	movi	r2,22
 400fc38:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 400fc3c:	00bffa84 	movi	r2,-22
 400fc40:	e0bfff15 	stw	r2,-4(fp)
 400fc44:	00001306 	br	400fc94 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 400fc48:	e0fffd17 	ldw	r3,-12(fp)
 400fc4c:	e0bffe17 	ldw	r2,-8(fp)
 400fc50:	e0bffb15 	stw	r2,-20(fp)
 400fc54:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400fc58:	e0fffc17 	ldw	r3,-16(fp)
 400fc5c:	e0bffb17 	ldw	r2,-20(fp)
 400fc60:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 400fc64:	e0bffb17 	ldw	r2,-20(fp)
 400fc68:	10c00017 	ldw	r3,0(r2)
 400fc6c:	e0bffc17 	ldw	r2,-16(fp)
 400fc70:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400fc74:	e0bffb17 	ldw	r2,-20(fp)
 400fc78:	10c00017 	ldw	r3,0(r2)
 400fc7c:	e0bffc17 	ldw	r2,-16(fp)
 400fc80:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 400fc84:	e0fffb17 	ldw	r3,-20(fp)
 400fc88:	e0bffc17 	ldw	r2,-16(fp)
 400fc8c:	18800015 	stw	r2,0(r3)

  return 0;  
 400fc90:	e03fff15 	stw	zero,-4(fp)
 400fc94:	e0bfff17 	ldw	r2,-4(fp)
}
 400fc98:	e037883a 	mov	sp,fp
 400fc9c:	dfc00117 	ldw	ra,4(sp)
 400fca0:	df000017 	ldw	fp,0(sp)
 400fca4:	dec00204 	addi	sp,sp,8
 400fca8:	f800283a 	ret

0400fcac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400fcac:	defffd04 	addi	sp,sp,-12
 400fcb0:	dfc00215 	stw	ra,8(sp)
 400fcb4:	df000115 	stw	fp,4(sp)
 400fcb8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400fcbc:	00810074 	movhi	r2,1025
 400fcc0:	108bfe04 	addi	r2,r2,12280
 400fcc4:	10800017 	ldw	r2,0(r2)
 400fcc8:	1005003a 	cmpeq	r2,r2,zero
 400fccc:	1000061e 	bne	r2,zero,400fce8 <alt_get_errno+0x3c>
 400fcd0:	00810074 	movhi	r2,1025
 400fcd4:	108bfe04 	addi	r2,r2,12280
 400fcd8:	10800017 	ldw	r2,0(r2)
 400fcdc:	103ee83a 	callr	r2
 400fce0:	e0bfff15 	stw	r2,-4(fp)
 400fce4:	00000306 	br	400fcf4 <alt_get_errno+0x48>
 400fce8:	00810074 	movhi	r2,1025
 400fcec:	108c0804 	addi	r2,r2,12320
 400fcf0:	e0bfff15 	stw	r2,-4(fp)
 400fcf4:	e0bfff17 	ldw	r2,-4(fp)
}
 400fcf8:	e037883a 	mov	sp,fp
 400fcfc:	dfc00117 	ldw	ra,4(sp)
 400fd00:	df000017 	ldw	fp,0(sp)
 400fd04:	dec00204 	addi	sp,sp,8
 400fd08:	f800283a 	ret

0400fd0c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 400fd0c:	defffd04 	addi	sp,sp,-12
 400fd10:	dfc00215 	stw	ra,8(sp)
 400fd14:	df000115 	stw	fp,4(sp)
 400fd18:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400fd1c:	00bfff04 	movi	r2,-4
 400fd20:	00c10074 	movhi	r3,1025
 400fd24:	18c2ba04 	addi	r3,r3,2792
 400fd28:	1885883a 	add	r2,r3,r2
 400fd2c:	e0bfff15 	stw	r2,-4(fp)
 400fd30:	00000606 	br	400fd4c <_do_ctors+0x40>
        (*ctor) (); 
 400fd34:	e0bfff17 	ldw	r2,-4(fp)
 400fd38:	10800017 	ldw	r2,0(r2)
 400fd3c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400fd40:	e0bfff17 	ldw	r2,-4(fp)
 400fd44:	10bfff04 	addi	r2,r2,-4
 400fd48:	e0bfff15 	stw	r2,-4(fp)
 400fd4c:	e0ffff17 	ldw	r3,-4(fp)
 400fd50:	00810074 	movhi	r2,1025
 400fd54:	1082b904 	addi	r2,r2,2788
 400fd58:	18bff62e 	bgeu	r3,r2,400fd34 <_do_ctors+0x28>
        (*ctor) (); 
}
 400fd5c:	e037883a 	mov	sp,fp
 400fd60:	dfc00117 	ldw	ra,4(sp)
 400fd64:	df000017 	ldw	fp,0(sp)
 400fd68:	dec00204 	addi	sp,sp,8
 400fd6c:	f800283a 	ret

0400fd70 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 400fd70:	defffd04 	addi	sp,sp,-12
 400fd74:	dfc00215 	stw	ra,8(sp)
 400fd78:	df000115 	stw	fp,4(sp)
 400fd7c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400fd80:	00bfff04 	movi	r2,-4
 400fd84:	00c10074 	movhi	r3,1025
 400fd88:	18c2ba04 	addi	r3,r3,2792
 400fd8c:	1885883a 	add	r2,r3,r2
 400fd90:	e0bfff15 	stw	r2,-4(fp)
 400fd94:	00000606 	br	400fdb0 <_do_dtors+0x40>
        (*dtor) (); 
 400fd98:	e0bfff17 	ldw	r2,-4(fp)
 400fd9c:	10800017 	ldw	r2,0(r2)
 400fda0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400fda4:	e0bfff17 	ldw	r2,-4(fp)
 400fda8:	10bfff04 	addi	r2,r2,-4
 400fdac:	e0bfff15 	stw	r2,-4(fp)
 400fdb0:	e0ffff17 	ldw	r3,-4(fp)
 400fdb4:	00810074 	movhi	r2,1025
 400fdb8:	1082ba04 	addi	r2,r2,2792
 400fdbc:	18bff62e 	bgeu	r3,r2,400fd98 <_do_dtors+0x28>
        (*dtor) (); 
}
 400fdc0:	e037883a 	mov	sp,fp
 400fdc4:	dfc00117 	ldw	ra,4(sp)
 400fdc8:	df000017 	ldw	fp,0(sp)
 400fdcc:	dec00204 	addi	sp,sp,8
 400fdd0:	f800283a 	ret

0400fdd4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400fdd4:	defff904 	addi	sp,sp,-28
 400fdd8:	dfc00615 	stw	ra,24(sp)
 400fddc:	df000515 	stw	fp,20(sp)
 400fde0:	df000504 	addi	fp,sp,20
 400fde4:	e13ffd15 	stw	r4,-12(fp)
 400fde8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 400fdec:	e0bffe17 	ldw	r2,-8(fp)
 400fdf0:	10800017 	ldw	r2,0(r2)
 400fdf4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 400fdf8:	e13ffd17 	ldw	r4,-12(fp)
 400fdfc:	40064240 	call	4006424 <strlen>
 400fe00:	10800044 	addi	r2,r2,1
 400fe04:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400fe08:	00000d06 	br	400fe40 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 400fe0c:	e0bffc17 	ldw	r2,-16(fp)
 400fe10:	11000217 	ldw	r4,8(r2)
 400fe14:	e1bffb17 	ldw	r6,-20(fp)
 400fe18:	e17ffd17 	ldw	r5,-12(fp)
 400fe1c:	40107280 	call	4010728 <memcmp>
 400fe20:	1004c03a 	cmpne	r2,r2,zero
 400fe24:	1000031e 	bne	r2,zero,400fe34 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 400fe28:	e0bffc17 	ldw	r2,-16(fp)
 400fe2c:	e0bfff15 	stw	r2,-4(fp)
 400fe30:	00000706 	br	400fe50 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400fe34:	e0bffc17 	ldw	r2,-16(fp)
 400fe38:	10800017 	ldw	r2,0(r2)
 400fe3c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400fe40:	e0fffe17 	ldw	r3,-8(fp)
 400fe44:	e0bffc17 	ldw	r2,-16(fp)
 400fe48:	10fff01e 	bne	r2,r3,400fe0c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 400fe4c:	e03fff15 	stw	zero,-4(fp)
 400fe50:	e0bfff17 	ldw	r2,-4(fp)
}
 400fe54:	e037883a 	mov	sp,fp
 400fe58:	dfc00117 	ldw	ra,4(sp)
 400fe5c:	df000017 	ldw	fp,0(sp)
 400fe60:	dec00204 	addi	sp,sp,8
 400fe64:	f800283a 	ret

0400fe68 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 400fe68:	defffa04 	addi	sp,sp,-24
 400fe6c:	dfc00515 	stw	ra,20(sp)
 400fe70:	df000415 	stw	fp,16(sp)
 400fe74:	df000404 	addi	fp,sp,16
 400fe78:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 400fe7c:	00810074 	movhi	r2,1025
 400fe80:	108bf904 	addi	r2,r2,12260
 400fe84:	10800017 	ldw	r2,0(r2)
 400fe88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400fe8c:	00003306 	br	400ff5c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 400fe90:	e0bffd17 	ldw	r2,-12(fp)
 400fe94:	11000217 	ldw	r4,8(r2)
 400fe98:	40064240 	call	4006424 <strlen>
 400fe9c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 400fea0:	e0bffd17 	ldw	r2,-12(fp)
 400fea4:	10c00217 	ldw	r3,8(r2)
 400fea8:	e0bffc17 	ldw	r2,-16(fp)
 400feac:	1885883a 	add	r2,r3,r2
 400feb0:	10bfffc4 	addi	r2,r2,-1
 400feb4:	10800003 	ldbu	r2,0(r2)
 400feb8:	10803fcc 	andi	r2,r2,255
 400febc:	1080201c 	xori	r2,r2,128
 400fec0:	10bfe004 	addi	r2,r2,-128
 400fec4:	10800bd8 	cmpnei	r2,r2,47
 400fec8:	1000031e 	bne	r2,zero,400fed8 <alt_find_file+0x70>
    {
      len -= 1;
 400fecc:	e0bffc17 	ldw	r2,-16(fp)
 400fed0:	10bfffc4 	addi	r2,r2,-1
 400fed4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400fed8:	e0bffc17 	ldw	r2,-16(fp)
 400fedc:	1007883a 	mov	r3,r2
 400fee0:	e0bffe17 	ldw	r2,-8(fp)
 400fee4:	1885883a 	add	r2,r3,r2
 400fee8:	10800003 	ldbu	r2,0(r2)
 400feec:	10803fcc 	andi	r2,r2,255
 400fef0:	1080201c 	xori	r2,r2,128
 400fef4:	10bfe004 	addi	r2,r2,-128
 400fef8:	10800be0 	cmpeqi	r2,r2,47
 400fefc:	10000a1e 	bne	r2,zero,400ff28 <alt_find_file+0xc0>
 400ff00:	e0bffc17 	ldw	r2,-16(fp)
 400ff04:	1007883a 	mov	r3,r2
 400ff08:	e0bffe17 	ldw	r2,-8(fp)
 400ff0c:	1885883a 	add	r2,r3,r2
 400ff10:	10800003 	ldbu	r2,0(r2)
 400ff14:	10803fcc 	andi	r2,r2,255
 400ff18:	1080201c 	xori	r2,r2,128
 400ff1c:	10bfe004 	addi	r2,r2,-128
 400ff20:	1004c03a 	cmpne	r2,r2,zero
 400ff24:	10000a1e 	bne	r2,zero,400ff50 <alt_find_file+0xe8>
 400ff28:	e0bffd17 	ldw	r2,-12(fp)
 400ff2c:	11000217 	ldw	r4,8(r2)
 400ff30:	e1bffc17 	ldw	r6,-16(fp)
 400ff34:	e17ffe17 	ldw	r5,-8(fp)
 400ff38:	40107280 	call	4010728 <memcmp>
 400ff3c:	1004c03a 	cmpne	r2,r2,zero
 400ff40:	1000031e 	bne	r2,zero,400ff50 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 400ff44:	e0bffd17 	ldw	r2,-12(fp)
 400ff48:	e0bfff15 	stw	r2,-4(fp)
 400ff4c:	00000806 	br	400ff70 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 400ff50:	e0bffd17 	ldw	r2,-12(fp)
 400ff54:	10800017 	ldw	r2,0(r2)
 400ff58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400ff5c:	00c10074 	movhi	r3,1025
 400ff60:	18cbf904 	addi	r3,r3,12260
 400ff64:	e0bffd17 	ldw	r2,-12(fp)
 400ff68:	10ffc91e 	bne	r2,r3,400fe90 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 400ff6c:	e03fff15 	stw	zero,-4(fp)
 400ff70:	e0bfff17 	ldw	r2,-4(fp)
}
 400ff74:	e037883a 	mov	sp,fp
 400ff78:	dfc00117 	ldw	ra,4(sp)
 400ff7c:	df000017 	ldw	fp,0(sp)
 400ff80:	dec00204 	addi	sp,sp,8
 400ff84:	f800283a 	ret

0400ff88 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 400ff88:	defffb04 	addi	sp,sp,-20
 400ff8c:	dfc00415 	stw	ra,16(sp)
 400ff90:	df000315 	stw	fp,12(sp)
 400ff94:	df000304 	addi	fp,sp,12
 400ff98:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 400ff9c:	e13ffe17 	ldw	r4,-8(fp)
 400ffa0:	d1600d04 	addi	r5,gp,-32716
 400ffa4:	400fdd40 	call	400fdd4 <alt_find_dev>
 400ffa8:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
 400ffac:	e0bffd17 	ldw	r2,-12(fp)
 400ffb0:	1005003a 	cmpeq	r2,r2,zero
 400ffb4:	10000b1e 	bne	r2,zero,400ffe4 <alt_flash_open_dev+0x5c>
 400ffb8:	e0bffd17 	ldw	r2,-12(fp)
 400ffbc:	10800317 	ldw	r2,12(r2)
 400ffc0:	1005003a 	cmpeq	r2,r2,zero
 400ffc4:	1000071e 	bne	r2,zero,400ffe4 <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
 400ffc8:	e0bffd17 	ldw	r2,-12(fp)
 400ffcc:	10800317 	ldw	r2,12(r2)
 400ffd0:	e13ffd17 	ldw	r4,-12(fp)
 400ffd4:	e17ffe17 	ldw	r5,-8(fp)
 400ffd8:	103ee83a 	callr	r2
 400ffdc:	e0bfff15 	stw	r2,-4(fp)
 400ffe0:	00000206 	br	400ffec <alt_flash_open_dev+0x64>
  }

  return dev;
 400ffe4:	e0bffd17 	ldw	r2,-12(fp)
 400ffe8:	e0bfff15 	stw	r2,-4(fp)
 400ffec:	e0bfff17 	ldw	r2,-4(fp)
}
 400fff0:	e037883a 	mov	sp,fp
 400fff4:	dfc00117 	ldw	ra,4(sp)
 400fff8:	df000017 	ldw	fp,0(sp)
 400fffc:	dec00204 	addi	sp,sp,8
 4010000:	f800283a 	ret

04010004 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 4010004:	defffd04 	addi	sp,sp,-12
 4010008:	dfc00215 	stw	ra,8(sp)
 401000c:	df000115 	stw	fp,4(sp)
 4010010:	df000104 	addi	fp,sp,4
 4010014:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 4010018:	e0bfff17 	ldw	r2,-4(fp)
 401001c:	1005003a 	cmpeq	r2,r2,zero
 4010020:	1000081e 	bne	r2,zero,4010044 <alt_flash_close_dev+0x40>
 4010024:	e0bfff17 	ldw	r2,-4(fp)
 4010028:	10800417 	ldw	r2,16(r2)
 401002c:	1005003a 	cmpeq	r2,r2,zero
 4010030:	1000041e 	bne	r2,zero,4010044 <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
 4010034:	e0bfff17 	ldw	r2,-4(fp)
 4010038:	10800417 	ldw	r2,16(r2)
 401003c:	e13fff17 	ldw	r4,-4(fp)
 4010040:	103ee83a 	callr	r2
  }
  return;
}
 4010044:	e037883a 	mov	sp,fp
 4010048:	dfc00117 	ldw	ra,4(sp)
 401004c:	df000017 	ldw	fp,0(sp)
 4010050:	dec00204 	addi	sp,sp,8
 4010054:	f800283a 	ret

04010058 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4010058:	defffc04 	addi	sp,sp,-16
 401005c:	df000315 	stw	fp,12(sp)
 4010060:	df000304 	addi	fp,sp,12
 4010064:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4010068:	00bffa04 	movi	r2,-24
 401006c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4010070:	e03ffe15 	stw	zero,-8(fp)
 4010074:	00001e06 	br	40100f0 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 4010078:	e0bffe17 	ldw	r2,-8(fp)
 401007c:	00c10074 	movhi	r3,1025
 4010080:	18c74904 	addi	r3,r3,7460
 4010084:	10800324 	muli	r2,r2,12
 4010088:	10c5883a 	add	r2,r2,r3
 401008c:	10800017 	ldw	r2,0(r2)
 4010090:	1004c03a 	cmpne	r2,r2,zero
 4010094:	1000131e 	bne	r2,zero,40100e4 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 4010098:	e0bffe17 	ldw	r2,-8(fp)
 401009c:	00c10074 	movhi	r3,1025
 40100a0:	18c74904 	addi	r3,r3,7460
 40100a4:	10800324 	muli	r2,r2,12
 40100a8:	10c7883a 	add	r3,r2,r3
 40100ac:	e0bfff17 	ldw	r2,-4(fp)
 40100b0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 40100b4:	00810074 	movhi	r2,1025
 40100b8:	108bfd04 	addi	r2,r2,12276
 40100bc:	10c00017 	ldw	r3,0(r2)
 40100c0:	e0bffe17 	ldw	r2,-8(fp)
 40100c4:	1880040e 	bge	r3,r2,40100d8 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 40100c8:	00c10074 	movhi	r3,1025
 40100cc:	18cbfd04 	addi	r3,r3,12276
 40100d0:	e0bffe17 	ldw	r2,-8(fp)
 40100d4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 40100d8:	e0bffe17 	ldw	r2,-8(fp)
 40100dc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 40100e0:	00000606 	br	40100fc <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40100e4:	e0bffe17 	ldw	r2,-8(fp)
 40100e8:	10800044 	addi	r2,r2,1
 40100ec:	e0bffe15 	stw	r2,-8(fp)
 40100f0:	e0bffe17 	ldw	r2,-8(fp)
 40100f4:	10800810 	cmplti	r2,r2,32
 40100f8:	103fdf1e 	bne	r2,zero,4010078 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 40100fc:	e0bffd17 	ldw	r2,-12(fp)
}
 4010100:	e037883a 	mov	sp,fp
 4010104:	df000017 	ldw	fp,0(sp)
 4010108:	dec00104 	addi	sp,sp,4
 401010c:	f800283a 	ret

04010110 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4010110:	defff904 	addi	sp,sp,-28
 4010114:	dfc00615 	stw	ra,24(sp)
 4010118:	df000515 	stw	fp,20(sp)
 401011c:	df000504 	addi	fp,sp,20
 4010120:	e13ffc15 	stw	r4,-16(fp)
 4010124:	e17ffd15 	stw	r5,-12(fp)
 4010128:	e1bffe15 	stw	r6,-8(fp)
 401012c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4010130:	e0800217 	ldw	r2,8(fp)
 4010134:	d8800015 	stw	r2,0(sp)
 4010138:	e13ffc17 	ldw	r4,-16(fp)
 401013c:	e17ffd17 	ldw	r5,-12(fp)
 4010140:	e1bffe17 	ldw	r6,-8(fp)
 4010144:	e1ffff17 	ldw	r7,-4(fp)
 4010148:	40102e40 	call	40102e4 <alt_iic_isr_register>
}  
 401014c:	e037883a 	mov	sp,fp
 4010150:	dfc00117 	ldw	ra,4(sp)
 4010154:	df000017 	ldw	fp,0(sp)
 4010158:	dec00204 	addi	sp,sp,8
 401015c:	f800283a 	ret

04010160 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4010160:	defff904 	addi	sp,sp,-28
 4010164:	df000615 	stw	fp,24(sp)
 4010168:	df000604 	addi	fp,sp,24
 401016c:	e13ffe15 	stw	r4,-8(fp)
 4010170:	e17fff15 	stw	r5,-4(fp)
 4010174:	e0bfff17 	ldw	r2,-4(fp)
 4010178:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401017c:	0005303a 	rdctl	r2,status
 4010180:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010184:	e0fffb17 	ldw	r3,-20(fp)
 4010188:	00bfff84 	movi	r2,-2
 401018c:	1884703a 	and	r2,r3,r2
 4010190:	1001703a 	wrctl	status,r2
  
  return context;
 4010194:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4010198:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 401019c:	e0fffc17 	ldw	r3,-16(fp)
 40101a0:	00800044 	movi	r2,1
 40101a4:	10c4983a 	sll	r2,r2,r3
 40101a8:	1007883a 	mov	r3,r2
 40101ac:	00810074 	movhi	r2,1025
 40101b0:	108c1204 	addi	r2,r2,12360
 40101b4:	10800017 	ldw	r2,0(r2)
 40101b8:	1886b03a 	or	r3,r3,r2
 40101bc:	00810074 	movhi	r2,1025
 40101c0:	108c1204 	addi	r2,r2,12360
 40101c4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40101c8:	00810074 	movhi	r2,1025
 40101cc:	108c1204 	addi	r2,r2,12360
 40101d0:	10800017 	ldw	r2,0(r2)
 40101d4:	100170fa 	wrctl	ienable,r2
 40101d8:	e0bffd17 	ldw	r2,-12(fp)
 40101dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40101e0:	e0bffa17 	ldw	r2,-24(fp)
 40101e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40101e8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 40101ec:	e037883a 	mov	sp,fp
 40101f0:	df000017 	ldw	fp,0(sp)
 40101f4:	dec00104 	addi	sp,sp,4
 40101f8:	f800283a 	ret

040101fc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 40101fc:	defff904 	addi	sp,sp,-28
 4010200:	df000615 	stw	fp,24(sp)
 4010204:	df000604 	addi	fp,sp,24
 4010208:	e13ffe15 	stw	r4,-8(fp)
 401020c:	e17fff15 	stw	r5,-4(fp)
 4010210:	e0bfff17 	ldw	r2,-4(fp)
 4010214:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010218:	0005303a 	rdctl	r2,status
 401021c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010220:	e0fffb17 	ldw	r3,-20(fp)
 4010224:	00bfff84 	movi	r2,-2
 4010228:	1884703a 	and	r2,r3,r2
 401022c:	1001703a 	wrctl	status,r2
  
  return context;
 4010230:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4010234:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 4010238:	e0fffc17 	ldw	r3,-16(fp)
 401023c:	00800044 	movi	r2,1
 4010240:	10c4983a 	sll	r2,r2,r3
 4010244:	0084303a 	nor	r2,zero,r2
 4010248:	1007883a 	mov	r3,r2
 401024c:	00810074 	movhi	r2,1025
 4010250:	108c1204 	addi	r2,r2,12360
 4010254:	10800017 	ldw	r2,0(r2)
 4010258:	1886703a 	and	r3,r3,r2
 401025c:	00810074 	movhi	r2,1025
 4010260:	108c1204 	addi	r2,r2,12360
 4010264:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4010268:	00810074 	movhi	r2,1025
 401026c:	108c1204 	addi	r2,r2,12360
 4010270:	10800017 	ldw	r2,0(r2)
 4010274:	100170fa 	wrctl	ienable,r2
 4010278:	e0bffd17 	ldw	r2,-12(fp)
 401027c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010280:	e0bffa17 	ldw	r2,-24(fp)
 4010284:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4010288:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 401028c:	e037883a 	mov	sp,fp
 4010290:	df000017 	ldw	fp,0(sp)
 4010294:	dec00104 	addi	sp,sp,4
 4010298:	f800283a 	ret

0401029c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401029c:	defffc04 	addi	sp,sp,-16
 40102a0:	df000315 	stw	fp,12(sp)
 40102a4:	df000304 	addi	fp,sp,12
 40102a8:	e13ffe15 	stw	r4,-8(fp)
 40102ac:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 40102b0:	000530fa 	rdctl	r2,ienable
 40102b4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 40102b8:	e0ffff17 	ldw	r3,-4(fp)
 40102bc:	00800044 	movi	r2,1
 40102c0:	10c4983a 	sll	r2,r2,r3
 40102c4:	1007883a 	mov	r3,r2
 40102c8:	e0bffd17 	ldw	r2,-12(fp)
 40102cc:	1884703a 	and	r2,r3,r2
 40102d0:	1004c03a 	cmpne	r2,r2,zero
}
 40102d4:	e037883a 	mov	sp,fp
 40102d8:	df000017 	ldw	fp,0(sp)
 40102dc:	dec00104 	addi	sp,sp,4
 40102e0:	f800283a 	ret

040102e4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40102e4:	defff404 	addi	sp,sp,-48
 40102e8:	dfc00b15 	stw	ra,44(sp)
 40102ec:	df000a15 	stw	fp,40(sp)
 40102f0:	df000a04 	addi	fp,sp,40
 40102f4:	e13ffb15 	stw	r4,-20(fp)
 40102f8:	e17ffc15 	stw	r5,-16(fp)
 40102fc:	e1bffd15 	stw	r6,-12(fp)
 4010300:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 4010304:	00bffa84 	movi	r2,-22
 4010308:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 401030c:	e0bffc17 	ldw	r2,-16(fp)
 4010310:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4010314:	e0bff917 	ldw	r2,-28(fp)
 4010318:	10800808 	cmpgei	r2,r2,32
 401031c:	1000291e 	bne	r2,zero,40103c4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010320:	0005303a 	rdctl	r2,status
 4010324:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010328:	e0fff717 	ldw	r3,-36(fp)
 401032c:	00bfff84 	movi	r2,-2
 4010330:	1884703a 	and	r2,r3,r2
 4010334:	1001703a 	wrctl	status,r2
  
  return context;
 4010338:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 401033c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 4010340:	e0bff917 	ldw	r2,-28(fp)
 4010344:	00c10074 	movhi	r3,1025
 4010348:	18cc3004 	addi	r3,r3,12480
 401034c:	100490fa 	slli	r2,r2,3
 4010350:	10c7883a 	add	r3,r2,r3
 4010354:	e0bffd17 	ldw	r2,-12(fp)
 4010358:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 401035c:	e0bff917 	ldw	r2,-28(fp)
 4010360:	00c10074 	movhi	r3,1025
 4010364:	18cc3004 	addi	r3,r3,12480
 4010368:	100490fa 	slli	r2,r2,3
 401036c:	10c5883a 	add	r2,r2,r3
 4010370:	10c00104 	addi	r3,r2,4
 4010374:	e0bffe17 	ldw	r2,-8(fp)
 4010378:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 401037c:	e0bffd17 	ldw	r2,-12(fp)
 4010380:	1005003a 	cmpeq	r2,r2,zero
 4010384:	1000051e 	bne	r2,zero,401039c <alt_iic_isr_register+0xb8>
 4010388:	e17ff917 	ldw	r5,-28(fp)
 401038c:	e13ffb17 	ldw	r4,-20(fp)
 4010390:	40101600 	call	4010160 <alt_ic_irq_enable>
 4010394:	e0bfff15 	stw	r2,-4(fp)
 4010398:	00000406 	br	40103ac <alt_iic_isr_register+0xc8>
 401039c:	e17ff917 	ldw	r5,-28(fp)
 40103a0:	e13ffb17 	ldw	r4,-20(fp)
 40103a4:	40101fc0 	call	40101fc <alt_ic_irq_disable>
 40103a8:	e0bfff15 	stw	r2,-4(fp)
 40103ac:	e0bfff17 	ldw	r2,-4(fp)
 40103b0:	e0bffa15 	stw	r2,-24(fp)
 40103b4:	e0bff817 	ldw	r2,-32(fp)
 40103b8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40103bc:	e0bff617 	ldw	r2,-40(fp)
 40103c0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 40103c4:	e0bffa17 	ldw	r2,-24(fp)
}
 40103c8:	e037883a 	mov	sp,fp
 40103cc:	dfc00117 	ldw	ra,4(sp)
 40103d0:	df000017 	ldw	fp,0(sp)
 40103d4:	dec00204 	addi	sp,sp,8
 40103d8:	f800283a 	ret

040103dc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40103dc:	defff904 	addi	sp,sp,-28
 40103e0:	dfc00615 	stw	ra,24(sp)
 40103e4:	df000515 	stw	fp,20(sp)
 40103e8:	df000504 	addi	fp,sp,20
 40103ec:	e13ffc15 	stw	r4,-16(fp)
 40103f0:	e17ffd15 	stw	r5,-12(fp)
 40103f4:	e1bffe15 	stw	r6,-8(fp)
 40103f8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 40103fc:	e13ffd17 	ldw	r4,-12(fp)
 4010400:	e17ffe17 	ldw	r5,-8(fp)
 4010404:	e1bfff17 	ldw	r6,-4(fp)
 4010408:	400d4cc0 	call	400d4cc <open>
 401040c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4010410:	e0bffb17 	ldw	r2,-20(fp)
 4010414:	1004803a 	cmplt	r2,r2,zero
 4010418:	10001c1e 	bne	r2,zero,401048c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 401041c:	e0bffb17 	ldw	r2,-20(fp)
 4010420:	00c10074 	movhi	r3,1025
 4010424:	18c74904 	addi	r3,r3,7460
 4010428:	10800324 	muli	r2,r2,12
 401042c:	10c5883a 	add	r2,r2,r3
 4010430:	10c00017 	ldw	r3,0(r2)
 4010434:	e0bffc17 	ldw	r2,-16(fp)
 4010438:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 401043c:	e0bffb17 	ldw	r2,-20(fp)
 4010440:	00c10074 	movhi	r3,1025
 4010444:	18c74904 	addi	r3,r3,7460
 4010448:	10800324 	muli	r2,r2,12
 401044c:	10c5883a 	add	r2,r2,r3
 4010450:	10800104 	addi	r2,r2,4
 4010454:	10c00017 	ldw	r3,0(r2)
 4010458:	e0bffc17 	ldw	r2,-16(fp)
 401045c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4010460:	e0bffb17 	ldw	r2,-20(fp)
 4010464:	00c10074 	movhi	r3,1025
 4010468:	18c74904 	addi	r3,r3,7460
 401046c:	10800324 	muli	r2,r2,12
 4010470:	10c5883a 	add	r2,r2,r3
 4010474:	10800204 	addi	r2,r2,8
 4010478:	10c00017 	ldw	r3,0(r2)
 401047c:	e0bffc17 	ldw	r2,-16(fp)
 4010480:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4010484:	e13ffb17 	ldw	r4,-20(fp)
 4010488:	400d8340 	call	400d834 <alt_release_fd>
  }
} 
 401048c:	e037883a 	mov	sp,fp
 4010490:	dfc00117 	ldw	ra,4(sp)
 4010494:	df000017 	ldw	fp,0(sp)
 4010498:	dec00204 	addi	sp,sp,8
 401049c:	f800283a 	ret

040104a0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 40104a0:	defffb04 	addi	sp,sp,-20
 40104a4:	dfc00415 	stw	ra,16(sp)
 40104a8:	df000315 	stw	fp,12(sp)
 40104ac:	df000304 	addi	fp,sp,12
 40104b0:	e13ffd15 	stw	r4,-12(fp)
 40104b4:	e17ffe15 	stw	r5,-8(fp)
 40104b8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 40104bc:	01010074 	movhi	r4,1025
 40104c0:	21074c04 	addi	r4,r4,7472
 40104c4:	e17ffd17 	ldw	r5,-12(fp)
 40104c8:	01800044 	movi	r6,1
 40104cc:	01c07fc4 	movi	r7,511
 40104d0:	40103dc0 	call	40103dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40104d4:	01010074 	movhi	r4,1025
 40104d8:	21074904 	addi	r4,r4,7460
 40104dc:	e17ffe17 	ldw	r5,-8(fp)
 40104e0:	000d883a 	mov	r6,zero
 40104e4:	01c07fc4 	movi	r7,511
 40104e8:	40103dc0 	call	40103dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40104ec:	01010074 	movhi	r4,1025
 40104f0:	21074f04 	addi	r4,r4,7484
 40104f4:	e17fff17 	ldw	r5,-4(fp)
 40104f8:	01800044 	movi	r6,1
 40104fc:	01c07fc4 	movi	r7,511
 4010500:	40103dc0 	call	40103dc <alt_open_fd>
}  
 4010504:	e037883a 	mov	sp,fp
 4010508:	dfc00117 	ldw	ra,4(sp)
 401050c:	df000017 	ldw	fp,0(sp)
 4010510:	dec00204 	addi	sp,sp,8
 4010514:	f800283a 	ret

04010518 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4010518:	defffa04 	addi	sp,sp,-24
 401051c:	df000515 	stw	fp,20(sp)
 4010520:	df000504 	addi	fp,sp,20
 4010524:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010528:	0005303a 	rdctl	r2,status
 401052c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010530:	e0fffd17 	ldw	r3,-12(fp)
 4010534:	00bfff84 	movi	r2,-2
 4010538:	1884703a 	and	r2,r3,r2
 401053c:	1001703a 	wrctl	status,r2
  
  return context;
 4010540:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4010544:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 4010548:	e0bfff17 	ldw	r2,-4(fp)
 401054c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4010550:	e0bffc17 	ldw	r2,-16(fp)
 4010554:	10c00017 	ldw	r3,0(r2)
 4010558:	e0bffc17 	ldw	r2,-16(fp)
 401055c:	10800117 	ldw	r2,4(r2)
 4010560:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 4010564:	e0bffc17 	ldw	r2,-16(fp)
 4010568:	10c00117 	ldw	r3,4(r2)
 401056c:	e0bffc17 	ldw	r2,-16(fp)
 4010570:	10800017 	ldw	r2,0(r2)
 4010574:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4010578:	e0fffc17 	ldw	r3,-16(fp)
 401057c:	e0bffc17 	ldw	r2,-16(fp)
 4010580:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 4010584:	e0fffc17 	ldw	r3,-16(fp)
 4010588:	e0bffc17 	ldw	r2,-16(fp)
 401058c:	18800015 	stw	r2,0(r3)
 4010590:	e0bffe17 	ldw	r2,-8(fp)
 4010594:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010598:	e0bffb17 	ldw	r2,-20(fp)
 401059c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 40105a0:	e037883a 	mov	sp,fp
 40105a4:	df000017 	ldw	fp,0(sp)
 40105a8:	dec00104 	addi	sp,sp,4
 40105ac:	f800283a 	ret

040105b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 40105b0:	defffb04 	addi	sp,sp,-20
 40105b4:	dfc00415 	stw	ra,16(sp)
 40105b8:	df000315 	stw	fp,12(sp)
 40105bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 40105c0:	d0a01017 	ldw	r2,-32704(gp)
 40105c4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40105c8:	d0a02117 	ldw	r2,-32636(gp)
 40105cc:	10800044 	addi	r2,r2,1
 40105d0:	d0a02115 	stw	r2,-32636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40105d4:	00003106 	br	401069c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 40105d8:	e0bffe17 	ldw	r2,-8(fp)
 40105dc:	10800017 	ldw	r2,0(r2)
 40105e0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 40105e4:	e0bffe17 	ldw	r2,-8(fp)
 40105e8:	10800403 	ldbu	r2,16(r2)
 40105ec:	10803fcc 	andi	r2,r2,255
 40105f0:	1005003a 	cmpeq	r2,r2,zero
 40105f4:	1000051e 	bne	r2,zero,401060c <alt_tick+0x5c>
 40105f8:	d0a02117 	ldw	r2,-32636(gp)
 40105fc:	1004c03a 	cmpne	r2,r2,zero
 4010600:	1000021e 	bne	r2,zero,401060c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 4010604:	e0bffe17 	ldw	r2,-8(fp)
 4010608:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 401060c:	e0bffe17 	ldw	r2,-8(fp)
 4010610:	10c00217 	ldw	r3,8(r2)
 4010614:	d0a02117 	ldw	r2,-32636(gp)
 4010618:	10c01e36 	bltu	r2,r3,4010694 <alt_tick+0xe4>
 401061c:	e0bffe17 	ldw	r2,-8(fp)
 4010620:	10800403 	ldbu	r2,16(r2)
 4010624:	10803fcc 	andi	r2,r2,255
 4010628:	1004c03a 	cmpne	r2,r2,zero
 401062c:	1000191e 	bne	r2,zero,4010694 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 4010630:	e0bffe17 	ldw	r2,-8(fp)
 4010634:	10c00317 	ldw	r3,12(r2)
 4010638:	e0bffe17 	ldw	r2,-8(fp)
 401063c:	11000517 	ldw	r4,20(r2)
 4010640:	183ee83a 	callr	r3
 4010644:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4010648:	e0bffd17 	ldw	r2,-12(fp)
 401064c:	1004c03a 	cmpne	r2,r2,zero
 4010650:	1000031e 	bne	r2,zero,4010660 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 4010654:	e13ffe17 	ldw	r4,-8(fp)
 4010658:	40105180 	call	4010518 <alt_alarm_stop>
 401065c:	00000d06 	br	4010694 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 4010660:	e0bffe17 	ldw	r2,-8(fp)
 4010664:	10c00217 	ldw	r3,8(r2)
 4010668:	e0bffd17 	ldw	r2,-12(fp)
 401066c:	1887883a 	add	r3,r3,r2
 4010670:	e0bffe17 	ldw	r2,-8(fp)
 4010674:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4010678:	e0bffe17 	ldw	r2,-8(fp)
 401067c:	10c00217 	ldw	r3,8(r2)
 4010680:	d0a02117 	ldw	r2,-32636(gp)
 4010684:	1880032e 	bgeu	r3,r2,4010694 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 4010688:	e0fffe17 	ldw	r3,-8(fp)
 401068c:	00800044 	movi	r2,1
 4010690:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 4010694:	e0bfff17 	ldw	r2,-4(fp)
 4010698:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401069c:	d0e01004 	addi	r3,gp,-32704
 40106a0:	e0bffe17 	ldw	r2,-8(fp)
 40106a4:	10ffcc1e 	bne	r2,r3,40105d8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 40106a8:	e037883a 	mov	sp,fp
 40106ac:	dfc00117 	ldw	ra,4(sp)
 40106b0:	df000017 	ldw	fp,0(sp)
 40106b4:	dec00204 	addi	sp,sp,8
 40106b8:	f800283a 	ret

040106bc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 40106bc:	deffff04 	addi	sp,sp,-4
 40106c0:	df000015 	stw	fp,0(sp)
 40106c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 40106c8:	000170fa 	wrctl	ienable,zero
}
 40106cc:	e037883a 	mov	sp,fp
 40106d0:	df000017 	ldw	fp,0(sp)
 40106d4:	dec00104 	addi	sp,sp,4
 40106d8:	f800283a 	ret

040106dc <atexit>:
 40106dc:	200b883a 	mov	r5,r4
 40106e0:	000d883a 	mov	r6,zero
 40106e4:	0009883a 	mov	r4,zero
 40106e8:	000f883a 	mov	r7,zero
 40106ec:	401079c1 	jmpi	401079c <__register_exitproc>

040106f0 <exit>:
 40106f0:	defffe04 	addi	sp,sp,-8
 40106f4:	000b883a 	mov	r5,zero
 40106f8:	dc000015 	stw	r16,0(sp)
 40106fc:	dfc00115 	stw	ra,4(sp)
 4010700:	2021883a 	mov	r16,r4
 4010704:	40108d40 	call	40108d4 <__call_exitprocs>
 4010708:	00810074 	movhi	r2,1025
 401070c:	108bf404 	addi	r2,r2,12240
 4010710:	11000017 	ldw	r4,0(r2)
 4010714:	20800f17 	ldw	r2,60(r4)
 4010718:	10000126 	beq	r2,zero,4010720 <exit+0x30>
 401071c:	103ee83a 	callr	r2
 4010720:	8009883a 	mov	r4,r16
 4010724:	4010ac40 	call	4010ac4 <_exit>

04010728 <memcmp>:
 4010728:	00c000c4 	movi	r3,3
 401072c:	1980032e 	bgeu	r3,r6,401073c <memcmp+0x14>
 4010730:	2144b03a 	or	r2,r4,r5
 4010734:	10c4703a 	and	r2,r2,r3
 4010738:	10000f26 	beq	r2,zero,4010778 <memcmp+0x50>
 401073c:	31ffffc4 	addi	r7,r6,-1
 4010740:	3000061e 	bne	r6,zero,401075c <memcmp+0x34>
 4010744:	00000a06 	br	4010770 <memcmp+0x48>
 4010748:	39ffffc4 	addi	r7,r7,-1
 401074c:	00bfffc4 	movi	r2,-1
 4010750:	21000044 	addi	r4,r4,1
 4010754:	29400044 	addi	r5,r5,1
 4010758:	38800526 	beq	r7,r2,4010770 <memcmp+0x48>
 401075c:	20c00003 	ldbu	r3,0(r4)
 4010760:	28800003 	ldbu	r2,0(r5)
 4010764:	18bff826 	beq	r3,r2,4010748 <memcmp+0x20>
 4010768:	1885c83a 	sub	r2,r3,r2
 401076c:	f800283a 	ret
 4010770:	0005883a 	mov	r2,zero
 4010774:	f800283a 	ret
 4010778:	180f883a 	mov	r7,r3
 401077c:	20c00017 	ldw	r3,0(r4)
 4010780:	28800017 	ldw	r2,0(r5)
 4010784:	18bfed1e 	bne	r3,r2,401073c <memcmp+0x14>
 4010788:	31bfff04 	addi	r6,r6,-4
 401078c:	21000104 	addi	r4,r4,4
 4010790:	29400104 	addi	r5,r5,4
 4010794:	39bff936 	bltu	r7,r6,401077c <memcmp+0x54>
 4010798:	003fe806 	br	401073c <memcmp+0x14>

0401079c <__register_exitproc>:
 401079c:	defffa04 	addi	sp,sp,-24
 40107a0:	00810074 	movhi	r2,1025
 40107a4:	108bf404 	addi	r2,r2,12240
 40107a8:	dc000015 	stw	r16,0(sp)
 40107ac:	14000017 	ldw	r16,0(r2)
 40107b0:	dd000415 	stw	r20,16(sp)
 40107b4:	2829883a 	mov	r20,r5
 40107b8:	81405217 	ldw	r5,328(r16)
 40107bc:	dcc00315 	stw	r19,12(sp)
 40107c0:	dc800215 	stw	r18,8(sp)
 40107c4:	dc400115 	stw	r17,4(sp)
 40107c8:	dfc00515 	stw	ra,20(sp)
 40107cc:	2023883a 	mov	r17,r4
 40107d0:	3027883a 	mov	r19,r6
 40107d4:	3825883a 	mov	r18,r7
 40107d8:	28002526 	beq	r5,zero,4010870 <__register_exitproc+0xd4>
 40107dc:	29000117 	ldw	r4,4(r5)
 40107e0:	008007c4 	movi	r2,31
 40107e4:	11002716 	blt	r2,r4,4010884 <__register_exitproc+0xe8>
 40107e8:	8800101e 	bne	r17,zero,401082c <__register_exitproc+0x90>
 40107ec:	2105883a 	add	r2,r4,r4
 40107f0:	1085883a 	add	r2,r2,r2
 40107f4:	20c00044 	addi	r3,r4,1
 40107f8:	1145883a 	add	r2,r2,r5
 40107fc:	0009883a 	mov	r4,zero
 4010800:	15000215 	stw	r20,8(r2)
 4010804:	28c00115 	stw	r3,4(r5)
 4010808:	2005883a 	mov	r2,r4
 401080c:	dfc00517 	ldw	ra,20(sp)
 4010810:	dd000417 	ldw	r20,16(sp)
 4010814:	dcc00317 	ldw	r19,12(sp)
 4010818:	dc800217 	ldw	r18,8(sp)
 401081c:	dc400117 	ldw	r17,4(sp)
 4010820:	dc000017 	ldw	r16,0(sp)
 4010824:	dec00604 	addi	sp,sp,24
 4010828:	f800283a 	ret
 401082c:	29802204 	addi	r6,r5,136
 4010830:	00800044 	movi	r2,1
 4010834:	110e983a 	sll	r7,r2,r4
 4010838:	30c04017 	ldw	r3,256(r6)
 401083c:	2105883a 	add	r2,r4,r4
 4010840:	1085883a 	add	r2,r2,r2
 4010844:	1185883a 	add	r2,r2,r6
 4010848:	19c6b03a 	or	r3,r3,r7
 401084c:	14802015 	stw	r18,128(r2)
 4010850:	14c00015 	stw	r19,0(r2)
 4010854:	00800084 	movi	r2,2
 4010858:	30c04015 	stw	r3,256(r6)
 401085c:	88bfe31e 	bne	r17,r2,40107ec <__register_exitproc+0x50>
 4010860:	30804117 	ldw	r2,260(r6)
 4010864:	11c4b03a 	or	r2,r2,r7
 4010868:	30804115 	stw	r2,260(r6)
 401086c:	003fdf06 	br	40107ec <__register_exitproc+0x50>
 4010870:	00810074 	movhi	r2,1025
 4010874:	108c7004 	addi	r2,r2,12736
 4010878:	100b883a 	mov	r5,r2
 401087c:	80805215 	stw	r2,328(r16)
 4010880:	003fd606 	br	40107dc <__register_exitproc+0x40>
 4010884:	00800034 	movhi	r2,0
 4010888:	10800004 	addi	r2,r2,0
 401088c:	1000021e 	bne	r2,zero,4010898 <__register_exitproc+0xfc>
 4010890:	013fffc4 	movi	r4,-1
 4010894:	003fdc06 	br	4010808 <__register_exitproc+0x6c>
 4010898:	01006404 	movi	r4,400
 401089c:	103ee83a 	callr	r2
 40108a0:	1007883a 	mov	r3,r2
 40108a4:	103ffa26 	beq	r2,zero,4010890 <__register_exitproc+0xf4>
 40108a8:	80805217 	ldw	r2,328(r16)
 40108ac:	180b883a 	mov	r5,r3
 40108b0:	18000115 	stw	zero,4(r3)
 40108b4:	18800015 	stw	r2,0(r3)
 40108b8:	80c05215 	stw	r3,328(r16)
 40108bc:	18006215 	stw	zero,392(r3)
 40108c0:	18006315 	stw	zero,396(r3)
 40108c4:	0009883a 	mov	r4,zero
 40108c8:	883fc826 	beq	r17,zero,40107ec <__register_exitproc+0x50>
 40108cc:	003fd706 	br	401082c <__register_exitproc+0x90>

040108d0 <register_fini>:
 40108d0:	f800283a 	ret

040108d4 <__call_exitprocs>:
 40108d4:	00810074 	movhi	r2,1025
 40108d8:	108bf404 	addi	r2,r2,12240
 40108dc:	10800017 	ldw	r2,0(r2)
 40108e0:	defff304 	addi	sp,sp,-52
 40108e4:	df000b15 	stw	fp,44(sp)
 40108e8:	d8800115 	stw	r2,4(sp)
 40108ec:	00800034 	movhi	r2,0
 40108f0:	10800004 	addi	r2,r2,0
 40108f4:	1005003a 	cmpeq	r2,r2,zero
 40108f8:	d8800215 	stw	r2,8(sp)
 40108fc:	d8800117 	ldw	r2,4(sp)
 4010900:	dd400815 	stw	r21,32(sp)
 4010904:	dd000715 	stw	r20,28(sp)
 4010908:	10805204 	addi	r2,r2,328
 401090c:	dfc00c15 	stw	ra,48(sp)
 4010910:	ddc00a15 	stw	r23,40(sp)
 4010914:	dd800915 	stw	r22,36(sp)
 4010918:	dcc00615 	stw	r19,24(sp)
 401091c:	dc800515 	stw	r18,20(sp)
 4010920:	dc400415 	stw	r17,16(sp)
 4010924:	dc000315 	stw	r16,12(sp)
 4010928:	282b883a 	mov	r21,r5
 401092c:	2039883a 	mov	fp,r4
 4010930:	d8800015 	stw	r2,0(sp)
 4010934:	2829003a 	cmpeq	r20,r5,zero
 4010938:	d8800117 	ldw	r2,4(sp)
 401093c:	14405217 	ldw	r17,328(r2)
 4010940:	88001026 	beq	r17,zero,4010984 <__call_exitprocs+0xb0>
 4010944:	ddc00017 	ldw	r23,0(sp)
 4010948:	88800117 	ldw	r2,4(r17)
 401094c:	8c802204 	addi	r18,r17,136
 4010950:	143fffc4 	addi	r16,r2,-1
 4010954:	80000916 	blt	r16,zero,401097c <__call_exitprocs+0xa8>
 4010958:	05bfffc4 	movi	r22,-1
 401095c:	a000151e 	bne	r20,zero,40109b4 <__call_exitprocs+0xe0>
 4010960:	8409883a 	add	r4,r16,r16
 4010964:	2105883a 	add	r2,r4,r4
 4010968:	1485883a 	add	r2,r2,r18
 401096c:	10c02017 	ldw	r3,128(r2)
 4010970:	a8c01126 	beq	r21,r3,40109b8 <__call_exitprocs+0xe4>
 4010974:	843fffc4 	addi	r16,r16,-1
 4010978:	85bff81e 	bne	r16,r22,401095c <__call_exitprocs+0x88>
 401097c:	d8800217 	ldw	r2,8(sp)
 4010980:	10003126 	beq	r2,zero,4010a48 <__call_exitprocs+0x174>
 4010984:	dfc00c17 	ldw	ra,48(sp)
 4010988:	df000b17 	ldw	fp,44(sp)
 401098c:	ddc00a17 	ldw	r23,40(sp)
 4010990:	dd800917 	ldw	r22,36(sp)
 4010994:	dd400817 	ldw	r21,32(sp)
 4010998:	dd000717 	ldw	r20,28(sp)
 401099c:	dcc00617 	ldw	r19,24(sp)
 40109a0:	dc800517 	ldw	r18,20(sp)
 40109a4:	dc400417 	ldw	r17,16(sp)
 40109a8:	dc000317 	ldw	r16,12(sp)
 40109ac:	dec00d04 	addi	sp,sp,52
 40109b0:	f800283a 	ret
 40109b4:	8409883a 	add	r4,r16,r16
 40109b8:	88c00117 	ldw	r3,4(r17)
 40109bc:	2105883a 	add	r2,r4,r4
 40109c0:	1445883a 	add	r2,r2,r17
 40109c4:	18ffffc4 	addi	r3,r3,-1
 40109c8:	11800217 	ldw	r6,8(r2)
 40109cc:	1c001526 	beq	r3,r16,4010a24 <__call_exitprocs+0x150>
 40109d0:	10000215 	stw	zero,8(r2)
 40109d4:	303fe726 	beq	r6,zero,4010974 <__call_exitprocs+0xa0>
 40109d8:	00c00044 	movi	r3,1
 40109dc:	1c06983a 	sll	r3,r3,r16
 40109e0:	90804017 	ldw	r2,256(r18)
 40109e4:	8cc00117 	ldw	r19,4(r17)
 40109e8:	1884703a 	and	r2,r3,r2
 40109ec:	10001426 	beq	r2,zero,4010a40 <__call_exitprocs+0x16c>
 40109f0:	90804117 	ldw	r2,260(r18)
 40109f4:	1884703a 	and	r2,r3,r2
 40109f8:	10000c1e 	bne	r2,zero,4010a2c <__call_exitprocs+0x158>
 40109fc:	2105883a 	add	r2,r4,r4
 4010a00:	1485883a 	add	r2,r2,r18
 4010a04:	11400017 	ldw	r5,0(r2)
 4010a08:	e009883a 	mov	r4,fp
 4010a0c:	303ee83a 	callr	r6
 4010a10:	88800117 	ldw	r2,4(r17)
 4010a14:	98bfc81e 	bne	r19,r2,4010938 <__call_exitprocs+0x64>
 4010a18:	b8800017 	ldw	r2,0(r23)
 4010a1c:	147fd526 	beq	r2,r17,4010974 <__call_exitprocs+0xa0>
 4010a20:	003fc506 	br	4010938 <__call_exitprocs+0x64>
 4010a24:	8c000115 	stw	r16,4(r17)
 4010a28:	003fea06 	br	40109d4 <__call_exitprocs+0x100>
 4010a2c:	2105883a 	add	r2,r4,r4
 4010a30:	1485883a 	add	r2,r2,r18
 4010a34:	11000017 	ldw	r4,0(r2)
 4010a38:	303ee83a 	callr	r6
 4010a3c:	003ff406 	br	4010a10 <__call_exitprocs+0x13c>
 4010a40:	303ee83a 	callr	r6
 4010a44:	003ff206 	br	4010a10 <__call_exitprocs+0x13c>
 4010a48:	88800117 	ldw	r2,4(r17)
 4010a4c:	1000081e 	bne	r2,zero,4010a70 <__call_exitprocs+0x19c>
 4010a50:	89000017 	ldw	r4,0(r17)
 4010a54:	20000726 	beq	r4,zero,4010a74 <__call_exitprocs+0x1a0>
 4010a58:	b9000015 	stw	r4,0(r23)
 4010a5c:	8809883a 	mov	r4,r17
 4010a60:	00000000 	call	0 <__alt_mem_epcs>
 4010a64:	bc400017 	ldw	r17,0(r23)
 4010a68:	883fb71e 	bne	r17,zero,4010948 <__call_exitprocs+0x74>
 4010a6c:	003fc506 	br	4010984 <__call_exitprocs+0xb0>
 4010a70:	89000017 	ldw	r4,0(r17)
 4010a74:	882f883a 	mov	r23,r17
 4010a78:	2023883a 	mov	r17,r4
 4010a7c:	883fb21e 	bne	r17,zero,4010948 <__call_exitprocs+0x74>
 4010a80:	003fc006 	br	4010984 <__call_exitprocs+0xb0>

04010a84 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 4010a84:	defffd04 	addi	sp,sp,-12
 4010a88:	df000215 	stw	fp,8(sp)
 4010a8c:	df000204 	addi	fp,sp,8
 4010a90:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 4010a94:	e0bfff17 	ldw	r2,-4(fp)
 4010a98:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4010a9c:	e0bffe17 	ldw	r2,-8(fp)
 4010aa0:	1005003a 	cmpeq	r2,r2,zero
 4010aa4:	1000021e 	bne	r2,zero,4010ab0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 4010aa8:	002af070 	cmpltui	zero,zero,43969
 4010aac:	00000106 	br	4010ab4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 4010ab0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 4010ab4:	e037883a 	mov	sp,fp
 4010ab8:	df000017 	ldw	fp,0(sp)
 4010abc:	dec00104 	addi	sp,sp,4
 4010ac0:	f800283a 	ret

04010ac4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4010ac4:	defffd04 	addi	sp,sp,-12
 4010ac8:	dfc00215 	stw	ra,8(sp)
 4010acc:	df000115 	stw	fp,4(sp)
 4010ad0:	df000104 	addi	fp,sp,4
 4010ad4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 4010ad8:	e13fff17 	ldw	r4,-4(fp)
 4010adc:	4010a840 	call	4010a84 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4010ae0:	003fff06 	br	4010ae0 <_exit+0x1c>
 4010ae4:	040108d0 	cmplti	r16,zero,1059
